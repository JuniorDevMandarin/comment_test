[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "URLPattern",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "URLResolver",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "NoReverseMatch",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "get_script_prefix",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "resolve",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "NoReverseMatch",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "Resolver404",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "get_script_prefix",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "resolve",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "NoReverseMatch",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "NoReverseMatch",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "NoReverseMatch",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "re_path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "URLResolver",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "re_path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "register_converter",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "NoReverseMatch",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "obtain_auth_token",
        "importPath": "rest_framework.authtoken.views",
        "description": "rest_framework.authtoken.views",
        "isExtraImport": true,
        "detail": "rest_framework.authtoken.views",
        "documentation": {}
    },
    {
        "label": "Token",
        "importPath": "rest_framework.authtoken.views",
        "description": "rest_framework.authtoken.views",
        "isExtraImport": true,
        "detail": "rest_framework.authtoken.views",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "DataError",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "connections",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "field",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "viewsets",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "generics",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "parsers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "renderers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "renderers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "exceptions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "exceptions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "RemovedInDRF314Warning",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "exceptions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "renderers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "exceptions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "renderers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "ISO_8601",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "HTTP_HEADER_ENCODING",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "HTTP_HEADER_ENCODING",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "exceptions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "ISO_8601",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "RemovedInDRF313Warning",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "RemovedInDRF314Warning",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "mixins",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "views",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "exceptions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "HTTP_HEADER_ENCODING",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "exceptions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "renderers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "exceptions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "VERSION",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "exceptions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "HTTP_HEADER_ENCODING",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "exceptions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "views",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "ISO_8601",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "exceptions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "exceptions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "generics",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "mixins",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "views",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "override_settings",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "testcases",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "DefaultRouter",
        "importPath": "rest_framework.routers",
        "description": "rest_framework.routers",
        "isExtraImport": true,
        "detail": "rest_framework.routers",
        "documentation": {}
    },
    {
        "label": "TokenAuthentication",
        "importPath": "rest_framework.authentication",
        "description": "rest_framework.authentication",
        "isExtraImport": true,
        "detail": "rest_framework.authentication",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "Http404",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "Http404",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "Http404",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "Http404",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "QueryDict",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "Http404",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpRequest",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "QueryDict",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "Http404",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "authenticate",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "authenticate",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "views",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "CommandError",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "Token",
        "importPath": "rest_framework.authtoken.models",
        "description": "rest_framework.authtoken.models",
        "isExtraImport": true,
        "detail": "rest_framework.authtoken.models",
        "documentation": {}
    },
    {
        "label": "Token",
        "importPath": "rest_framework.authtoken.models",
        "description": "rest_framework.authtoken.models",
        "isExtraImport": true,
        "detail": "rest_framework.authtoken.models",
        "documentation": {}
    },
    {
        "label": "TokenProxy",
        "importPath": "rest_framework.authtoken.models",
        "description": "rest_framework.authtoken.models",
        "isExtraImport": true,
        "detail": "rest_framework.authtoken.models",
        "documentation": {}
    },
    {
        "label": "Token",
        "importPath": "rest_framework.authtoken.models",
        "description": "rest_framework.authtoken.models",
        "isExtraImport": true,
        "detail": "rest_framework.authtoken.models",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "quote",
        "importPath": "django.contrib.admin.utils",
        "description": "django.contrib.admin.utils",
        "isExtraImport": true,
        "detail": "django.contrib.admin.utils",
        "documentation": {}
    },
    {
        "label": "ChangeList",
        "importPath": "django.contrib.admin.views.main",
        "description": "django.contrib.admin.views.main",
        "isExtraImport": true,
        "detail": "django.contrib.admin.views.main",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "PermissionDenied",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ObjectDoesNotExist",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ImproperlyConfigured",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "PermissionDenied",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ImproperlyConfigured",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ObjectDoesNotExist",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ImproperlyConfigured",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ImproperlyConfigured",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "FieldDoesNotExist",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ImproperlyConfigured",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ImproperlyConfigured",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ImproperlyConfigured",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "PermissionDenied",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "ngettext",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "binascii",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "binascii",
        "description": "binascii",
        "detail": "binascii",
        "documentation": {}
    },
    {
        "label": "AuthTokenSerializer",
        "importPath": "rest_framework.authtoken.serializers",
        "description": "rest_framework.authtoken.serializers",
        "isExtraImport": true,
        "detail": "rest_framework.authtoken.serializers",
        "documentation": {}
    },
    {
        "label": "coreapi",
        "importPath": "rest_framework.compat",
        "description": "rest_framework.compat",
        "isExtraImport": true,
        "detail": "rest_framework.compat",
        "documentation": {}
    },
    {
        "label": "coreschema",
        "importPath": "rest_framework.compat",
        "description": "rest_framework.compat",
        "isExtraImport": true,
        "detail": "rest_framework.compat",
        "documentation": {}
    },
    {
        "label": "coreapi",
        "importPath": "rest_framework.compat",
        "description": "rest_framework.compat",
        "isExtraImport": true,
        "detail": "rest_framework.compat",
        "documentation": {}
    },
    {
        "label": "coreschema",
        "importPath": "rest_framework.compat",
        "description": "rest_framework.compat",
        "isExtraImport": true,
        "detail": "rest_framework.compat",
        "documentation": {}
    },
    {
        "label": "uritemplate",
        "importPath": "rest_framework.compat",
        "description": "rest_framework.compat",
        "isExtraImport": true,
        "detail": "rest_framework.compat",
        "documentation": {}
    },
    {
        "label": "uritemplate",
        "importPath": "rest_framework.compat",
        "description": "rest_framework.compat",
        "isExtraImport": true,
        "detail": "rest_framework.compat",
        "documentation": {}
    },
    {
        "label": "apply_markdown",
        "importPath": "rest_framework.compat",
        "description": "rest_framework.compat",
        "isExtraImport": true,
        "detail": "rest_framework.compat",
        "documentation": {}
    },
    {
        "label": "pygments_highlight",
        "importPath": "rest_framework.compat",
        "description": "rest_framework.compat",
        "isExtraImport": true,
        "detail": "rest_framework.compat",
        "documentation": {}
    },
    {
        "label": "coreapi",
        "importPath": "rest_framework.compat",
        "description": "rest_framework.compat",
        "isExtraImport": true,
        "detail": "rest_framework.compat",
        "documentation": {}
    },
    {
        "label": "postgres_fields",
        "importPath": "rest_framework.compat",
        "description": "rest_framework.compat",
        "isExtraImport": true,
        "detail": "rest_framework.compat",
        "documentation": {}
    },
    {
        "label": "apply_markdown",
        "importPath": "rest_framework.compat",
        "description": "rest_framework.compat",
        "isExtraImport": true,
        "detail": "rest_framework.compat",
        "documentation": {}
    },
    {
        "label": "coreapi",
        "importPath": "rest_framework.compat",
        "description": "rest_framework.compat",
        "isExtraImport": true,
        "detail": "rest_framework.compat",
        "documentation": {}
    },
    {
        "label": "coreschema",
        "importPath": "rest_framework.compat",
        "description": "rest_framework.compat",
        "isExtraImport": true,
        "detail": "rest_framework.compat",
        "documentation": {}
    },
    {
        "label": "distinct",
        "importPath": "rest_framework.compat",
        "description": "rest_framework.compat",
        "isExtraImport": true,
        "detail": "rest_framework.compat",
        "documentation": {}
    },
    {
        "label": "coreapi",
        "importPath": "rest_framework.compat",
        "description": "rest_framework.compat",
        "isExtraImport": true,
        "detail": "rest_framework.compat",
        "documentation": {}
    },
    {
        "label": "coreschema",
        "importPath": "rest_framework.compat",
        "description": "rest_framework.compat",
        "isExtraImport": true,
        "detail": "rest_framework.compat",
        "documentation": {}
    },
    {
        "label": "INDENT_SEPARATORS",
        "importPath": "rest_framework.compat",
        "description": "rest_framework.compat",
        "isExtraImport": true,
        "detail": "rest_framework.compat",
        "documentation": {}
    },
    {
        "label": "LONG_SEPARATORS",
        "importPath": "rest_framework.compat",
        "description": "rest_framework.compat",
        "isExtraImport": true,
        "detail": "rest_framework.compat",
        "documentation": {}
    },
    {
        "label": "SHORT_SEPARATORS",
        "importPath": "rest_framework.compat",
        "description": "rest_framework.compat",
        "isExtraImport": true,
        "detail": "rest_framework.compat",
        "documentation": {}
    },
    {
        "label": "coreapi",
        "importPath": "rest_framework.compat",
        "description": "rest_framework.compat",
        "isExtraImport": true,
        "detail": "rest_framework.compat",
        "documentation": {}
    },
    {
        "label": "coreschema",
        "importPath": "rest_framework.compat",
        "description": "rest_framework.compat",
        "isExtraImport": true,
        "detail": "rest_framework.compat",
        "documentation": {}
    },
    {
        "label": "pygments_css",
        "importPath": "rest_framework.compat",
        "description": "rest_framework.compat",
        "isExtraImport": true,
        "detail": "rest_framework.compat",
        "documentation": {}
    },
    {
        "label": "yaml",
        "importPath": "rest_framework.compat",
        "description": "rest_framework.compat",
        "isExtraImport": true,
        "detail": "rest_framework.compat",
        "documentation": {}
    },
    {
        "label": "postgres_fields",
        "importPath": "rest_framework.compat",
        "description": "rest_framework.compat",
        "isExtraImport": true,
        "detail": "rest_framework.compat",
        "documentation": {}
    },
    {
        "label": "coreapi",
        "importPath": "rest_framework.compat",
        "description": "rest_framework.compat",
        "isExtraImport": true,
        "detail": "rest_framework.compat",
        "documentation": {}
    },
    {
        "label": "requests",
        "importPath": "rest_framework.compat",
        "description": "rest_framework.compat",
        "isExtraImport": true,
        "detail": "rest_framework.compat",
        "documentation": {}
    },
    {
        "label": "unicode_http_header",
        "importPath": "rest_framework.compat",
        "description": "rest_framework.compat",
        "isExtraImport": true,
        "detail": "rest_framework.compat",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "ManualSchema",
        "importPath": "rest_framework.schemas",
        "description": "rest_framework.schemas",
        "isExtraImport": true,
        "detail": "rest_framework.schemas",
        "documentation": {}
    },
    {
        "label": "coreapi",
        "importPath": "rest_framework.schemas",
        "description": "rest_framework.schemas",
        "isExtraImport": true,
        "detail": "rest_framework.schemas",
        "documentation": {}
    },
    {
        "label": "coreapi",
        "importPath": "rest_framework.schemas",
        "description": "rest_framework.schemas",
        "isExtraImport": true,
        "detail": "rest_framework.schemas",
        "documentation": {}
    },
    {
        "label": "coreapi",
        "importPath": "rest_framework.schemas",
        "description": "rest_framework.schemas",
        "isExtraImport": true,
        "detail": "rest_framework.schemas",
        "documentation": {}
    },
    {
        "label": "SchemaGenerator",
        "importPath": "rest_framework.schemas",
        "description": "rest_framework.schemas",
        "isExtraImport": true,
        "detail": "rest_framework.schemas",
        "documentation": {}
    },
    {
        "label": "get_schema_view",
        "importPath": "rest_framework.schemas",
        "description": "rest_framework.schemas",
        "isExtraImport": true,
        "detail": "rest_framework.schemas",
        "documentation": {}
    },
    {
        "label": "SchemaGenerator",
        "importPath": "rest_framework.schemas",
        "description": "rest_framework.schemas",
        "isExtraImport": true,
        "detail": "rest_framework.schemas",
        "documentation": {}
    },
    {
        "label": "DefaultSchema",
        "importPath": "rest_framework.schemas",
        "description": "rest_framework.schemas",
        "isExtraImport": true,
        "detail": "rest_framework.schemas",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "import_string",
        "importPath": "django.utils.module_loading",
        "description": "django.utils.module_loading",
        "isExtraImport": true,
        "detail": "django.utils.module_loading",
        "documentation": {}
    },
    {
        "label": "import_string",
        "importPath": "django.utils.module_loading",
        "description": "django.utils.module_loading",
        "isExtraImport": true,
        "detail": "django.utils.module_loading",
        "documentation": {}
    },
    {
        "label": "SchemaGenerator",
        "importPath": "rest_framework.schemas.openapi",
        "description": "rest_framework.schemas.openapi",
        "isExtraImport": true,
        "detail": "rest_framework.schemas.openapi",
        "documentation": {}
    },
    {
        "label": "warnings",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "warnings",
        "description": "warnings",
        "detail": "warnings",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "namedtuple",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "namedtuple",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "namedtuple",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "parse",
        "importPath": "urllib",
        "description": "urllib",
        "isExtraImport": true,
        "detail": "urllib",
        "documentation": {}
    },
    {
        "label": "parse",
        "importPath": "urllib",
        "description": "urllib",
        "isExtraImport": true,
        "detail": "urllib",
        "documentation": {}
    },
    {
        "label": "parse",
        "importPath": "urllib",
        "description": "urllib",
        "isExtraImport": true,
        "detail": "urllib",
        "documentation": {}
    },
    {
        "label": "parse",
        "importPath": "urllib",
        "description": "urllib",
        "isExtraImport": true,
        "detail": "urllib",
        "documentation": {}
    },
    {
        "label": "parse",
        "importPath": "urllib",
        "description": "urllib",
        "isExtraImport": true,
        "detail": "urllib",
        "documentation": {}
    },
    {
        "label": "parse",
        "importPath": "urllib",
        "description": "urllib",
        "isExtraImport": true,
        "detail": "urllib",
        "documentation": {}
    },
    {
        "label": "force_str",
        "importPath": "django.utils.encoding",
        "description": "django.utils.encoding",
        "isExtraImport": true,
        "detail": "django.utils.encoding",
        "documentation": {}
    },
    {
        "label": "smart_str",
        "importPath": "django.utils.encoding",
        "description": "django.utils.encoding",
        "isExtraImport": true,
        "detail": "django.utils.encoding",
        "documentation": {}
    },
    {
        "label": "force_str",
        "importPath": "django.utils.encoding",
        "description": "django.utils.encoding",
        "isExtraImport": true,
        "detail": "django.utils.encoding",
        "documentation": {}
    },
    {
        "label": "iri_to_uri",
        "importPath": "django.utils.encoding",
        "description": "django.utils.encoding",
        "isExtraImport": true,
        "detail": "django.utils.encoding",
        "documentation": {}
    },
    {
        "label": "force_str",
        "importPath": "django.utils.encoding",
        "description": "django.utils.encoding",
        "isExtraImport": true,
        "detail": "django.utils.encoding",
        "documentation": {}
    },
    {
        "label": "force_str",
        "importPath": "django.utils.encoding",
        "description": "django.utils.encoding",
        "isExtraImport": true,
        "detail": "django.utils.encoding",
        "documentation": {}
    },
    {
        "label": "force_str",
        "importPath": "django.utils.encoding",
        "description": "django.utils.encoding",
        "isExtraImport": true,
        "detail": "django.utils.encoding",
        "documentation": {}
    },
    {
        "label": "force_str",
        "importPath": "django.utils.encoding",
        "description": "django.utils.encoding",
        "isExtraImport": true,
        "detail": "django.utils.encoding",
        "documentation": {}
    },
    {
        "label": "force_str",
        "importPath": "django.utils.encoding",
        "description": "django.utils.encoding",
        "isExtraImport": true,
        "detail": "django.utils.encoding",
        "documentation": {}
    },
    {
        "label": "force_str",
        "importPath": "django.utils.encoding",
        "description": "django.utils.encoding",
        "isExtraImport": true,
        "detail": "django.utils.encoding",
        "documentation": {}
    },
    {
        "label": "is_protected_type",
        "importPath": "django.utils.encoding",
        "description": "django.utils.encoding",
        "isExtraImport": true,
        "detail": "django.utils.encoding",
        "documentation": {}
    },
    {
        "label": "smart_str",
        "importPath": "django.utils.encoding",
        "description": "django.utils.encoding",
        "isExtraImport": true,
        "detail": "django.utils.encoding",
        "documentation": {}
    },
    {
        "label": "force_str",
        "importPath": "django.utils.encoding",
        "description": "django.utils.encoding",
        "isExtraImport": true,
        "detail": "django.utils.encoding",
        "documentation": {}
    },
    {
        "label": "force_str",
        "importPath": "django.utils.encoding",
        "description": "django.utils.encoding",
        "isExtraImport": true,
        "detail": "django.utils.encoding",
        "documentation": {}
    },
    {
        "label": "force_str",
        "importPath": "django.utils.encoding",
        "description": "django.utils.encoding",
        "isExtraImport": true,
        "detail": "django.utils.encoding",
        "documentation": {}
    },
    {
        "label": "force_str",
        "importPath": "django.utils.encoding",
        "description": "django.utils.encoding",
        "isExtraImport": true,
        "detail": "django.utils.encoding",
        "documentation": {}
    },
    {
        "label": "smart_str",
        "importPath": "django.utils.encoding",
        "description": "django.utils.encoding",
        "isExtraImport": true,
        "detail": "django.utils.encoding",
        "documentation": {}
    },
    {
        "label": "uri_to_iri",
        "importPath": "django.utils.encoding",
        "description": "django.utils.encoding",
        "isExtraImport": true,
        "detail": "django.utils.encoding",
        "documentation": {}
    },
    {
        "label": "force_bytes",
        "importPath": "django.utils.encoding",
        "description": "django.utils.encoding",
        "isExtraImport": true,
        "detail": "django.utils.encoding",
        "documentation": {}
    },
    {
        "label": "smart_str",
        "importPath": "django.utils.encoding",
        "description": "django.utils.encoding",
        "isExtraImport": true,
        "detail": "django.utils.encoding",
        "documentation": {}
    },
    {
        "label": "api_settings",
        "importPath": "rest_framework.settings",
        "description": "rest_framework.settings",
        "isExtraImport": true,
        "detail": "rest_framework.settings",
        "documentation": {}
    },
    {
        "label": "api_settings",
        "importPath": "rest_framework.settings",
        "description": "rest_framework.settings",
        "isExtraImport": true,
        "detail": "rest_framework.settings",
        "documentation": {}
    },
    {
        "label": "api_settings",
        "importPath": "rest_framework.settings",
        "description": "rest_framework.settings",
        "isExtraImport": true,
        "detail": "rest_framework.settings",
        "documentation": {}
    },
    {
        "label": "api_settings",
        "importPath": "rest_framework.settings",
        "description": "rest_framework.settings",
        "isExtraImport": true,
        "detail": "rest_framework.settings",
        "documentation": {}
    },
    {
        "label": "api_settings",
        "importPath": "rest_framework.settings",
        "description": "rest_framework.settings",
        "isExtraImport": true,
        "detail": "rest_framework.settings",
        "documentation": {}
    },
    {
        "label": "api_settings",
        "importPath": "rest_framework.settings",
        "description": "rest_framework.settings",
        "isExtraImport": true,
        "detail": "rest_framework.settings",
        "documentation": {}
    },
    {
        "label": "api_settings",
        "importPath": "rest_framework.settings",
        "description": "rest_framework.settings",
        "isExtraImport": true,
        "detail": "rest_framework.settings",
        "documentation": {}
    },
    {
        "label": "api_settings",
        "importPath": "rest_framework.settings",
        "description": "rest_framework.settings",
        "isExtraImport": true,
        "detail": "rest_framework.settings",
        "documentation": {}
    },
    {
        "label": "api_settings",
        "importPath": "rest_framework.settings",
        "description": "rest_framework.settings",
        "isExtraImport": true,
        "detail": "rest_framework.settings",
        "documentation": {}
    },
    {
        "label": "api_settings",
        "importPath": "rest_framework.settings",
        "description": "rest_framework.settings",
        "isExtraImport": true,
        "detail": "rest_framework.settings",
        "documentation": {}
    },
    {
        "label": "api_settings",
        "importPath": "rest_framework.settings",
        "description": "rest_framework.settings",
        "isExtraImport": true,
        "detail": "rest_framework.settings",
        "documentation": {}
    },
    {
        "label": "api_settings",
        "importPath": "rest_framework.settings",
        "description": "rest_framework.settings",
        "isExtraImport": true,
        "detail": "rest_framework.settings",
        "documentation": {}
    },
    {
        "label": "api_settings",
        "importPath": "rest_framework.settings",
        "description": "rest_framework.settings",
        "isExtraImport": true,
        "detail": "rest_framework.settings",
        "documentation": {}
    },
    {
        "label": "api_settings",
        "importPath": "rest_framework.settings",
        "description": "rest_framework.settings",
        "isExtraImport": true,
        "detail": "rest_framework.settings",
        "documentation": {}
    },
    {
        "label": "api_settings",
        "importPath": "rest_framework.settings",
        "description": "rest_framework.settings",
        "isExtraImport": true,
        "detail": "rest_framework.settings",
        "documentation": {}
    },
    {
        "label": "api_settings",
        "importPath": "rest_framework.settings",
        "description": "rest_framework.settings",
        "isExtraImport": true,
        "detail": "rest_framework.settings",
        "documentation": {}
    },
    {
        "label": "api_settings",
        "importPath": "rest_framework.settings",
        "description": "rest_framework.settings",
        "isExtraImport": true,
        "detail": "rest_framework.settings",
        "documentation": {}
    },
    {
        "label": "api_settings",
        "importPath": "rest_framework.settings",
        "description": "rest_framework.settings",
        "isExtraImport": true,
        "detail": "rest_framework.settings",
        "documentation": {}
    },
    {
        "label": "api_settings",
        "importPath": "rest_framework.settings",
        "description": "rest_framework.settings",
        "isExtraImport": true,
        "detail": "rest_framework.settings",
        "documentation": {}
    },
    {
        "label": "api_settings",
        "importPath": "rest_framework.settings",
        "description": "rest_framework.settings",
        "isExtraImport": true,
        "detail": "rest_framework.settings",
        "documentation": {}
    },
    {
        "label": "api_settings",
        "importPath": "rest_framework.settings",
        "description": "rest_framework.settings",
        "isExtraImport": true,
        "detail": "rest_framework.settings",
        "documentation": {}
    },
    {
        "label": "api_settings",
        "importPath": "rest_framework.settings",
        "description": "rest_framework.settings",
        "isExtraImport": true,
        "detail": "rest_framework.settings",
        "documentation": {}
    },
    {
        "label": "api_settings",
        "importPath": "rest_framework.settings",
        "description": "rest_framework.settings",
        "isExtraImport": true,
        "detail": "rest_framework.settings",
        "documentation": {}
    },
    {
        "label": "api_settings",
        "importPath": "rest_framework.settings",
        "description": "rest_framework.settings",
        "isExtraImport": true,
        "detail": "rest_framework.settings",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "import_module",
        "importPath": "importlib",
        "description": "importlib",
        "isExtraImport": true,
        "detail": "importlib",
        "documentation": {}
    },
    {
        "label": "import_module",
        "importPath": "importlib",
        "description": "importlib",
        "isExtraImport": true,
        "detail": "importlib",
        "documentation": {}
    },
    {
        "label": "simplify_regex",
        "importPath": "django.contrib.admindocs.views",
        "description": "django.contrib.admindocs.views",
        "isExtraImport": true,
        "detail": "django.contrib.admindocs.views",
        "documentation": {}
    },
    {
        "label": "clone_request",
        "importPath": "rest_framework.request",
        "description": "rest_framework.request",
        "isExtraImport": true,
        "detail": "rest_framework.request",
        "documentation": {}
    },
    {
        "label": "clone_request",
        "importPath": "rest_framework.request",
        "description": "rest_framework.request",
        "isExtraImport": true,
        "detail": "rest_framework.request",
        "documentation": {}
    },
    {
        "label": "is_form_media_type",
        "importPath": "rest_framework.request",
        "description": "rest_framework.request",
        "isExtraImport": true,
        "detail": "rest_framework.request",
        "documentation": {}
    },
    {
        "label": "override_method",
        "importPath": "rest_framework.request",
        "description": "rest_framework.request",
        "isExtraImport": true,
        "detail": "rest_framework.request",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "rest_framework.request",
        "description": "rest_framework.request",
        "isExtraImport": true,
        "detail": "rest_framework.request",
        "documentation": {}
    },
    {
        "label": "_get_pk",
        "importPath": "rest_framework.utils.model_meta",
        "description": "rest_framework.utils.model_meta",
        "isExtraImport": true,
        "detail": "rest_framework.utils.model_meta",
        "documentation": {}
    },
    {
        "label": "WeakKeyDictionary",
        "importPath": "weakref",
        "description": "weakref",
        "isExtraImport": true,
        "detail": "weakref",
        "documentation": {}
    },
    {
        "label": "formatting",
        "importPath": "rest_framework.utils",
        "description": "rest_framework.utils",
        "isExtraImport": true,
        "detail": "rest_framework.utils",
        "documentation": {}
    },
    {
        "label": "json",
        "importPath": "rest_framework.utils",
        "description": "rest_framework.utils",
        "isExtraImport": true,
        "detail": "rest_framework.utils",
        "documentation": {}
    },
    {
        "label": "html",
        "importPath": "rest_framework.utils",
        "description": "rest_framework.utils",
        "isExtraImport": true,
        "detail": "rest_framework.utils",
        "documentation": {}
    },
    {
        "label": "humanize_datetime",
        "importPath": "rest_framework.utils",
        "description": "rest_framework.utils",
        "isExtraImport": true,
        "detail": "rest_framework.utils",
        "documentation": {}
    },
    {
        "label": "json",
        "importPath": "rest_framework.utils",
        "description": "rest_framework.utils",
        "isExtraImport": true,
        "detail": "rest_framework.utils",
        "documentation": {}
    },
    {
        "label": "representation",
        "importPath": "rest_framework.utils",
        "description": "rest_framework.utils",
        "isExtraImport": true,
        "detail": "rest_framework.utils",
        "documentation": {}
    },
    {
        "label": "json",
        "importPath": "rest_framework.utils",
        "description": "rest_framework.utils",
        "isExtraImport": true,
        "detail": "rest_framework.utils",
        "documentation": {}
    },
    {
        "label": "html",
        "importPath": "rest_framework.utils",
        "description": "rest_framework.utils",
        "isExtraImport": true,
        "detail": "rest_framework.utils",
        "documentation": {}
    },
    {
        "label": "encoders",
        "importPath": "rest_framework.utils",
        "description": "rest_framework.utils",
        "isExtraImport": true,
        "detail": "rest_framework.utils",
        "documentation": {}
    },
    {
        "label": "json",
        "importPath": "rest_framework.utils",
        "description": "rest_framework.utils",
        "isExtraImport": true,
        "detail": "rest_framework.utils",
        "documentation": {}
    },
    {
        "label": "html",
        "importPath": "rest_framework.utils",
        "description": "rest_framework.utils",
        "isExtraImport": true,
        "detail": "rest_framework.utils",
        "documentation": {}
    },
    {
        "label": "model_meta",
        "importPath": "rest_framework.utils",
        "description": "rest_framework.utils",
        "isExtraImport": true,
        "detail": "rest_framework.utils",
        "documentation": {}
    },
    {
        "label": "representation",
        "importPath": "rest_framework.utils",
        "description": "rest_framework.utils",
        "isExtraImport": true,
        "detail": "rest_framework.utils",
        "documentation": {}
    },
    {
        "label": "formatting",
        "importPath": "rest_framework.utils",
        "description": "rest_framework.utils",
        "isExtraImport": true,
        "detail": "rest_framework.utils",
        "documentation": {}
    },
    {
        "label": "decimal",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "decimal",
        "description": "decimal",
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "operator",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "operator",
        "description": "operator",
        "detail": "operator",
        "documentation": {}
    },
    {
        "label": "attrgetter",
        "importPath": "operator",
        "description": "operator",
        "isExtraImport": true,
        "detail": "operator",
        "documentation": {}
    },
    {
        "label": "urljoin",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "DecimalValidator",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "EmailValidator",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "MaxLengthValidator",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "MaxValueValidator",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "MinLengthValidator",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "MinValueValidator",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "RegexValidator",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "URLValidator",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "EmailValidator",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "MaxLengthValidator",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "MaxValueValidator",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "MinLengthValidator",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "MinValueValidator",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "ProhibitNullCharactersValidator",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "RegexValidator",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "URLValidator",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "ip_address_validators",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "_UnvalidatedField",
        "importPath": "rest_framework.fields",
        "description": "rest_framework.fields",
        "isExtraImport": true,
        "detail": "rest_framework.fields",
        "documentation": {}
    },
    {
        "label": "empty",
        "importPath": "rest_framework.fields",
        "description": "rest_framework.fields",
        "isExtraImport": true,
        "detail": "rest_framework.fields",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "rest_framework.fields",
        "description": "rest_framework.fields",
        "isExtraImport": true,
        "detail": "rest_framework.fields",
        "documentation": {}
    },
    {
        "label": "empty",
        "importPath": "rest_framework.fields",
        "description": "rest_framework.fields",
        "isExtraImport": true,
        "detail": "rest_framework.fields",
        "documentation": {}
    },
    {
        "label": "get_attribute",
        "importPath": "rest_framework.fields",
        "description": "rest_framework.fields",
        "isExtraImport": true,
        "detail": "rest_framework.fields",
        "documentation": {}
    },
    {
        "label": "is_simple_callable",
        "importPath": "rest_framework.fields",
        "description": "rest_framework.fields",
        "isExtraImport": true,
        "detail": "rest_framework.fields",
        "documentation": {}
    },
    {
        "label": "iter_options",
        "importPath": "rest_framework.fields",
        "description": "rest_framework.fields",
        "isExtraImport": true,
        "detail": "rest_framework.fields",
        "documentation": {}
    },
    {
        "label": "get_error_detail",
        "importPath": "rest_framework.fields",
        "description": "rest_framework.fields",
        "isExtraImport": true,
        "detail": "rest_framework.fields",
        "documentation": {}
    },
    {
        "label": "set_value",
        "importPath": "rest_framework.fields",
        "description": "rest_framework.fields",
        "isExtraImport": true,
        "detail": "rest_framework.fields",
        "documentation": {}
    },
    {
        "label": "# NOQA # isort:skip\n    BooleanField",
        "importPath": "rest_framework.fields",
        "description": "rest_framework.fields",
        "isExtraImport": true,
        "detail": "rest_framework.fields",
        "documentation": {}
    },
    {
        "label": "CharField",
        "importPath": "rest_framework.fields",
        "description": "rest_framework.fields",
        "isExtraImport": true,
        "detail": "rest_framework.fields",
        "documentation": {}
    },
    {
        "label": "ChoiceField",
        "importPath": "rest_framework.fields",
        "description": "rest_framework.fields",
        "isExtraImport": true,
        "detail": "rest_framework.fields",
        "documentation": {}
    },
    {
        "label": "DateField",
        "importPath": "rest_framework.fields",
        "description": "rest_framework.fields",
        "isExtraImport": true,
        "detail": "rest_framework.fields",
        "documentation": {}
    },
    {
        "label": "DateTimeField",
        "importPath": "rest_framework.fields",
        "description": "rest_framework.fields",
        "isExtraImport": true,
        "detail": "rest_framework.fields",
        "documentation": {}
    },
    {
        "label": "DecimalField",
        "importPath": "rest_framework.fields",
        "description": "rest_framework.fields",
        "isExtraImport": true,
        "detail": "rest_framework.fields",
        "documentation": {}
    },
    {
        "label": "DictField",
        "importPath": "rest_framework.fields",
        "description": "rest_framework.fields",
        "isExtraImport": true,
        "detail": "rest_framework.fields",
        "documentation": {}
    },
    {
        "label": "DurationField",
        "importPath": "rest_framework.fields",
        "description": "rest_framework.fields",
        "isExtraImport": true,
        "detail": "rest_framework.fields",
        "documentation": {}
    },
    {
        "label": "EmailField",
        "importPath": "rest_framework.fields",
        "description": "rest_framework.fields",
        "isExtraImport": true,
        "detail": "rest_framework.fields",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "rest_framework.fields",
        "description": "rest_framework.fields",
        "isExtraImport": true,
        "detail": "rest_framework.fields",
        "documentation": {}
    },
    {
        "label": "FileField",
        "importPath": "rest_framework.fields",
        "description": "rest_framework.fields",
        "isExtraImport": true,
        "detail": "rest_framework.fields",
        "documentation": {}
    },
    {
        "label": "FilePathField",
        "importPath": "rest_framework.fields",
        "description": "rest_framework.fields",
        "isExtraImport": true,
        "detail": "rest_framework.fields",
        "documentation": {}
    },
    {
        "label": "FloatField",
        "importPath": "rest_framework.fields",
        "description": "rest_framework.fields",
        "isExtraImport": true,
        "detail": "rest_framework.fields",
        "documentation": {}
    },
    {
        "label": "HiddenField",
        "importPath": "rest_framework.fields",
        "description": "rest_framework.fields",
        "isExtraImport": true,
        "detail": "rest_framework.fields",
        "documentation": {}
    },
    {
        "label": "HStoreField",
        "importPath": "rest_framework.fields",
        "description": "rest_framework.fields",
        "isExtraImport": true,
        "detail": "rest_framework.fields",
        "documentation": {}
    },
    {
        "label": "IPAddressField",
        "importPath": "rest_framework.fields",
        "description": "rest_framework.fields",
        "isExtraImport": true,
        "detail": "rest_framework.fields",
        "documentation": {}
    },
    {
        "label": "ImageField",
        "importPath": "rest_framework.fields",
        "description": "rest_framework.fields",
        "isExtraImport": true,
        "detail": "rest_framework.fields",
        "documentation": {}
    },
    {
        "label": "IntegerField",
        "importPath": "rest_framework.fields",
        "description": "rest_framework.fields",
        "isExtraImport": true,
        "detail": "rest_framework.fields",
        "documentation": {}
    },
    {
        "label": "JSONField",
        "importPath": "rest_framework.fields",
        "description": "rest_framework.fields",
        "isExtraImport": true,
        "detail": "rest_framework.fields",
        "documentation": {}
    },
    {
        "label": "ListField",
        "importPath": "rest_framework.fields",
        "description": "rest_framework.fields",
        "isExtraImport": true,
        "detail": "rest_framework.fields",
        "documentation": {}
    },
    {
        "label": "ModelField",
        "importPath": "rest_framework.fields",
        "description": "rest_framework.fields",
        "isExtraImport": true,
        "detail": "rest_framework.fields",
        "documentation": {}
    },
    {
        "label": "MultipleChoiceField",
        "importPath": "rest_framework.fields",
        "description": "rest_framework.fields",
        "isExtraImport": true,
        "detail": "rest_framework.fields",
        "documentation": {}
    },
    {
        "label": "NullBooleanField",
        "importPath": "rest_framework.fields",
        "description": "rest_framework.fields",
        "isExtraImport": true,
        "detail": "rest_framework.fields",
        "documentation": {}
    },
    {
        "label": "ReadOnlyField",
        "importPath": "rest_framework.fields",
        "description": "rest_framework.fields",
        "isExtraImport": true,
        "detail": "rest_framework.fields",
        "documentation": {}
    },
    {
        "label": "RegexField",
        "importPath": "rest_framework.fields",
        "description": "rest_framework.fields",
        "isExtraImport": true,
        "detail": "rest_framework.fields",
        "documentation": {}
    },
    {
        "label": "SerializerMethodField",
        "importPath": "rest_framework.fields",
        "description": "rest_framework.fields",
        "isExtraImport": true,
        "detail": "rest_framework.fields",
        "documentation": {}
    },
    {
        "label": "SlugField",
        "importPath": "rest_framework.fields",
        "description": "rest_framework.fields",
        "isExtraImport": true,
        "detail": "rest_framework.fields",
        "documentation": {}
    },
    {
        "label": "TimeField",
        "importPath": "rest_framework.fields",
        "description": "rest_framework.fields",
        "isExtraImport": true,
        "detail": "rest_framework.fields",
        "documentation": {}
    },
    {
        "label": "URLField",
        "importPath": "rest_framework.fields",
        "description": "rest_framework.fields",
        "isExtraImport": true,
        "detail": "rest_framework.fields",
        "documentation": {}
    },
    {
        "label": "UUIDField",
        "importPath": "rest_framework.fields",
        "description": "rest_framework.fields",
        "isExtraImport": true,
        "detail": "rest_framework.fields",
        "documentation": {}
    },
    {
        "label": "# NOQA # isort:skip\n    CreateOnlyDefault",
        "importPath": "rest_framework.fields",
        "description": "rest_framework.fields",
        "isExtraImport": true,
        "detail": "rest_framework.fields",
        "documentation": {}
    },
    {
        "label": "CurrentUserDefault",
        "importPath": "rest_framework.fields",
        "description": "rest_framework.fields",
        "isExtraImport": true,
        "detail": "rest_framework.fields",
        "documentation": {}
    },
    {
        "label": "SkipField",
        "importPath": "rest_framework.fields",
        "description": "rest_framework.fields",
        "isExtraImport": true,
        "detail": "rest_framework.fields",
        "documentation": {}
    },
    {
        "label": "empty",
        "importPath": "rest_framework.fields",
        "description": "rest_framework.fields",
        "isExtraImport": true,
        "detail": "rest_framework.fields",
        "documentation": {}
    },
    {
        "label": "RetrieveModelMixin",
        "importPath": "rest_framework.mixins",
        "description": "rest_framework.mixins",
        "isExtraImport": true,
        "detail": "rest_framework.mixins",
        "documentation": {}
    },
    {
        "label": "template",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "loader",
        "importPath": "django.template",
        "description": "django.template",
        "isExtraImport": true,
        "detail": "django.template",
        "documentation": {}
    },
    {
        "label": "loader",
        "importPath": "django.template",
        "description": "django.template",
        "isExtraImport": true,
        "detail": "django.template",
        "documentation": {}
    },
    {
        "label": "loader",
        "importPath": "django.template",
        "description": "django.template",
        "isExtraImport": true,
        "detail": "django.template",
        "documentation": {}
    },
    {
        "label": "engines",
        "importPath": "django.template",
        "description": "django.template",
        "isExtraImport": true,
        "detail": "django.template",
        "documentation": {}
    },
    {
        "label": "loader",
        "importPath": "django.template",
        "description": "django.template",
        "isExtraImport": true,
        "detail": "django.template",
        "documentation": {}
    },
    {
        "label": "escape",
        "importPath": "django.utils.html",
        "description": "django.utils.html",
        "isExtraImport": true,
        "detail": "django.utils.html",
        "documentation": {}
    },
    {
        "label": "format_html",
        "importPath": "django.utils.html",
        "description": "django.utils.html",
        "isExtraImport": true,
        "detail": "django.utils.html",
        "documentation": {}
    },
    {
        "label": "smart_urlquote",
        "importPath": "django.utils.html",
        "description": "django.utils.html",
        "isExtraImport": true,
        "detail": "django.utils.html",
        "documentation": {}
    },
    {
        "label": "escape",
        "importPath": "django.utils.html",
        "description": "django.utils.html",
        "isExtraImport": true,
        "detail": "django.utils.html",
        "documentation": {}
    },
    {
        "label": "mark_safe",
        "importPath": "django.utils.html",
        "description": "django.utils.html",
        "isExtraImport": true,
        "detail": "django.utils.html",
        "documentation": {}
    },
    {
        "label": "mark_safe",
        "importPath": "django.utils.safestring",
        "description": "django.utils.safestring",
        "isExtraImport": true,
        "detail": "django.utils.safestring",
        "documentation": {}
    },
    {
        "label": "mark_safe",
        "importPath": "django.utils.safestring",
        "description": "django.utils.safestring",
        "isExtraImport": true,
        "detail": "django.utils.safestring",
        "documentation": {}
    },
    {
        "label": "HTMLFormRenderer",
        "importPath": "rest_framework.renderers",
        "description": "rest_framework.renderers",
        "isExtraImport": true,
        "detail": "rest_framework.renderers",
        "documentation": {}
    },
    {
        "label": "CoreJSONRenderer",
        "importPath": "rest_framework.renderers",
        "description": "rest_framework.renderers",
        "isExtraImport": true,
        "detail": "rest_framework.renderers",
        "documentation": {}
    },
    {
        "label": "DocumentationRenderer",
        "importPath": "rest_framework.renderers",
        "description": "rest_framework.renderers",
        "isExtraImport": true,
        "detail": "rest_framework.renderers",
        "documentation": {}
    },
    {
        "label": "SchemaJSRenderer",
        "importPath": "rest_framework.renderers",
        "description": "rest_framework.renderers",
        "isExtraImport": true,
        "detail": "rest_framework.renderers",
        "documentation": {}
    },
    {
        "label": "replace_query_param",
        "importPath": "rest_framework.utils.urls",
        "description": "rest_framework.utils.urls",
        "isExtraImport": true,
        "detail": "rest_framework.utils.urls",
        "documentation": {}
    },
    {
        "label": "remove_query_param",
        "importPath": "rest_framework.utils.urls",
        "description": "rest_framework.utils.urls",
        "isExtraImport": true,
        "detail": "rest_framework.utils.urls",
        "documentation": {}
    },
    {
        "label": "replace_query_param",
        "importPath": "rest_framework.utils.urls",
        "description": "rest_framework.utils.urls",
        "isExtraImport": true,
        "detail": "rest_framework.utils.urls",
        "documentation": {}
    },
    {
        "label": "replace_query_param",
        "importPath": "rest_framework.utils.urls",
        "description": "rest_framework.utils.urls",
        "isExtraImport": true,
        "detail": "rest_framework.utils.urls",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "QuerySet",
        "importPath": "django.db.models.query",
        "description": "django.db.models.query",
        "isExtraImport": true,
        "detail": "django.db.models.query",
        "documentation": {}
    },
    {
        "label": "QuerySet",
        "importPath": "django.db.models.query",
        "description": "django.db.models.query",
        "isExtraImport": true,
        "detail": "django.db.models.query",
        "documentation": {}
    },
    {
        "label": "QuerySet",
        "importPath": "django.db.models.query",
        "description": "django.db.models.query",
        "isExtraImport": true,
        "detail": "django.db.models.query",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "Promise",
        "importPath": "django.utils.functional",
        "description": "django.utils.functional",
        "isExtraImport": true,
        "detail": "django.utils.functional",
        "documentation": {}
    },
    {
        "label": "Promise",
        "importPath": "django.utils.functional",
        "description": "django.utils.functional",
        "isExtraImport": true,
        "detail": "django.utils.functional",
        "documentation": {}
    },
    {
        "label": "lazy",
        "importPath": "django.utils.functional",
        "description": "django.utils.functional",
        "isExtraImport": true,
        "detail": "django.utils.functional",
        "documentation": {}
    },
    {
        "label": "cached_property",
        "importPath": "django.utils.functional",
        "description": "django.utils.functional",
        "isExtraImport": true,
        "detail": "django.utils.functional",
        "documentation": {}
    },
    {
        "label": "inspect",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "inspect",
        "description": "inspect",
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "getmembers",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "validators",
        "importPath": "django.core",
        "description": "django.core",
        "isExtraImport": true,
        "detail": "django.core",
        "documentation": {}
    },
    {
        "label": "capfirst",
        "importPath": "django.utils.text",
        "description": "django.utils.text",
        "isExtraImport": true,
        "detail": "django.utils.text",
        "documentation": {}
    },
    {
        "label": "UniqueValidator",
        "importPath": "rest_framework.validators",
        "description": "rest_framework.validators",
        "isExtraImport": true,
        "detail": "rest_framework.validators",
        "documentation": {}
    },
    {
        "label": "ProhibitSurrogateCharactersValidator",
        "importPath": "rest_framework.validators",
        "description": "rest_framework.validators",
        "isExtraImport": true,
        "detail": "rest_framework.validators",
        "documentation": {}
    },
    {
        "label": "UniqueForDateValidator",
        "importPath": "rest_framework.validators",
        "description": "rest_framework.validators",
        "isExtraImport": true,
        "detail": "rest_framework.validators",
        "documentation": {}
    },
    {
        "label": "UniqueForMonthValidator",
        "importPath": "rest_framework.validators",
        "description": "rest_framework.validators",
        "isExtraImport": true,
        "detail": "rest_framework.validators",
        "documentation": {}
    },
    {
        "label": "UniqueForYearValidator",
        "importPath": "rest_framework.validators",
        "description": "rest_framework.validators",
        "isExtraImport": true,
        "detail": "rest_framework.validators",
        "documentation": {}
    },
    {
        "label": "UniqueTogetherValidator",
        "importPath": "rest_framework.validators",
        "description": "rest_framework.validators",
        "isExtraImport": true,
        "detail": "rest_framework.validators",
        "documentation": {}
    },
    {
        "label": "MultiValueDict",
        "importPath": "django.utils.datastructures",
        "description": "django.utils.datastructures",
        "isExtraImport": true,
        "detail": "django.utils.datastructures",
        "documentation": {}
    },
    {
        "label": "MultiValueDict",
        "importPath": "django.utils.datastructures",
        "description": "django.utils.datastructures",
        "isExtraImport": true,
        "detail": "django.utils.datastructures",
        "documentation": {}
    },
    {
        "label": "functools",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "functools",
        "description": "functools",
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "reduce",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "update_wrapper",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "parse_header",
        "importPath": "django.http.multipartparser",
        "description": "django.http.multipartparser",
        "isExtraImport": true,
        "detail": "django.http.multipartparser",
        "documentation": {}
    },
    {
        "label": "ChunkIter",
        "importPath": "django.http.multipartparser",
        "description": "django.http.multipartparser",
        "isExtraImport": true,
        "detail": "django.http.multipartparser",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "django.http.multipartparser",
        "description": "django.http.multipartparser",
        "isExtraImport": true,
        "detail": "django.http.multipartparser",
        "documentation": {}
    },
    {
        "label": "MultiPartParserError",
        "importPath": "django.http.multipartparser",
        "description": "django.http.multipartparser",
        "isExtraImport": true,
        "detail": "django.http.multipartparser",
        "documentation": {}
    },
    {
        "label": "parse_header",
        "importPath": "django.http.multipartparser",
        "description": "django.http.multipartparser",
        "isExtraImport": true,
        "detail": "django.http.multipartparser",
        "documentation": {}
    },
    {
        "label": "parse_header",
        "importPath": "django.http.multipartparser",
        "description": "django.http.multipartparser",
        "isExtraImport": true,
        "detail": "django.http.multipartparser",
        "documentation": {}
    },
    {
        "label": "parse_header",
        "importPath": "django.http.multipartparser",
        "description": "django.http.multipartparser",
        "isExtraImport": true,
        "detail": "django.http.multipartparser",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "MutableMapping",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "base64",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "base64",
        "description": "base64",
        "detail": "base64",
        "documentation": {}
    },
    {
        "label": "b64decode",
        "importPath": "base64",
        "description": "base64",
        "isExtraImport": true,
        "detail": "base64",
        "documentation": {}
    },
    {
        "label": "b64encode",
        "importPath": "base64",
        "description": "base64",
        "isExtraImport": true,
        "detail": "base64",
        "documentation": {}
    },
    {
        "label": "CsrfViewMiddleware",
        "importPath": "django.middleware.csrf",
        "description": "django.middleware.csrf",
        "isExtraImport": true,
        "detail": "django.middleware.csrf",
        "documentation": {}
    },
    {
        "label": "Tags",
        "importPath": "django.core.checks",
        "description": "django.core.checks",
        "isExtraImport": true,
        "detail": "django.core.checks",
        "documentation": {}
    },
    {
        "label": "Warning",
        "importPath": "django.core.checks",
        "description": "django.core.checks",
        "isExtraImport": true,
        "detail": "django.core.checks",
        "documentation": {}
    },
    {
        "label": "register",
        "importPath": "django.core.checks",
        "description": "django.core.checks",
        "isExtraImport": true,
        "detail": "django.core.checks",
        "documentation": {}
    },
    {
        "label": "View",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "View",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "types",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "types",
        "description": "types",
        "detail": "types",
        "documentation": {}
    },
    {
        "label": "pretty_name",
        "importPath": "django.forms.utils",
        "description": "django.forms.utils",
        "isExtraImport": true,
        "detail": "django.forms.utils",
        "documentation": {}
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ReturnDict",
        "importPath": "rest_framework.utils.serializer_helpers",
        "description": "rest_framework.utils.serializer_helpers",
        "isExtraImport": true,
        "detail": "rest_framework.utils.serializer_helpers",
        "documentation": {}
    },
    {
        "label": "ReturnList",
        "importPath": "rest_framework.utils.serializer_helpers",
        "description": "rest_framework.utils.serializer_helpers",
        "isExtraImport": true,
        "detail": "rest_framework.utils.serializer_helpers",
        "documentation": {}
    },
    {
        "label": "BindingDict",
        "importPath": "rest_framework.utils.serializer_helpers",
        "description": "rest_framework.utils.serializer_helpers",
        "isExtraImport": true,
        "detail": "rest_framework.utils.serializer_helpers",
        "documentation": {}
    },
    {
        "label": "BoundField",
        "importPath": "rest_framework.utils.serializer_helpers",
        "description": "rest_framework.utils.serializer_helpers",
        "isExtraImport": true,
        "detail": "rest_framework.utils.serializer_helpers",
        "documentation": {}
    },
    {
        "label": "JSONBoundField",
        "importPath": "rest_framework.utils.serializer_helpers",
        "description": "rest_framework.utils.serializer_helpers",
        "isExtraImport": true,
        "detail": "rest_framework.utils.serializer_helpers",
        "documentation": {}
    },
    {
        "label": "NestedBoundField",
        "importPath": "rest_framework.utils.serializer_helpers",
        "description": "rest_framework.utils.serializer_helpers",
        "isExtraImport": true,
        "detail": "rest_framework.utils.serializer_helpers",
        "documentation": {}
    },
    {
        "label": "ReturnDict",
        "importPath": "rest_framework.utils.serializer_helpers",
        "description": "rest_framework.utils.serializer_helpers",
        "isExtraImport": true,
        "detail": "rest_framework.utils.serializer_helpers",
        "documentation": {}
    },
    {
        "label": "ReturnList",
        "importPath": "rest_framework.utils.serializer_helpers",
        "description": "rest_framework.utils.serializer_helpers",
        "isExtraImport": true,
        "detail": "rest_framework.utils.serializer_helpers",
        "documentation": {}
    },
    {
        "label": "copy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "copy",
        "description": "copy",
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "FilePathField",
        "importPath": "django.forms",
        "description": "django.forms",
        "isExtraImport": true,
        "detail": "django.forms",
        "documentation": {}
    },
    {
        "label": "ImageField",
        "importPath": "django.forms",
        "description": "django.forms",
        "isExtraImport": true,
        "detail": "django.forms",
        "documentation": {}
    },
    {
        "label": "parse_date",
        "importPath": "django.utils.dateparse",
        "description": "django.utils.dateparse",
        "isExtraImport": true,
        "detail": "django.utils.dateparse",
        "documentation": {}
    },
    {
        "label": "parse_datetime",
        "importPath": "django.utils.dateparse",
        "description": "django.utils.dateparse",
        "isExtraImport": true,
        "detail": "django.utils.dateparse",
        "documentation": {}
    },
    {
        "label": "parse_duration",
        "importPath": "django.utils.dateparse",
        "description": "django.utils.dateparse",
        "isExtraImport": true,
        "detail": "django.utils.dateparse",
        "documentation": {}
    },
    {
        "label": "parse_time",
        "importPath": "django.utils.dateparse",
        "description": "django.utils.dateparse",
        "isExtraImport": true,
        "detail": "django.utils.dateparse",
        "documentation": {}
    },
    {
        "label": "duration_string",
        "importPath": "django.utils.duration",
        "description": "django.utils.duration",
        "isExtraImport": true,
        "detail": "django.utils.duration",
        "documentation": {}
    },
    {
        "label": "localize_input",
        "importPath": "django.utils.formats",
        "description": "django.utils.formats",
        "isExtraImport": true,
        "detail": "django.utils.formats",
        "documentation": {}
    },
    {
        "label": "sanitize_separators",
        "importPath": "django.utils.formats",
        "description": "django.utils.formats",
        "isExtraImport": true,
        "detail": "django.utils.formats",
        "documentation": {}
    },
    {
        "label": "clean_ipv6_address",
        "importPath": "django.utils.ipv6",
        "description": "django.utils.ipv6",
        "isExtraImport": true,
        "detail": "django.utils.ipv6",
        "documentation": {}
    },
    {
        "label": "utc",
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "isExtraImport": true,
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "InvalidTimeError",
        "importPath": "pytz.exceptions",
        "description": "pytz.exceptions",
        "isExtraImport": true,
        "detail": "pytz.exceptions",
        "documentation": {}
    },
    {
        "label": "ErrorDetail",
        "importPath": "rest_framework.exceptions",
        "description": "rest_framework.exceptions",
        "isExtraImport": true,
        "detail": "rest_framework.exceptions",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "rest_framework.exceptions",
        "description": "rest_framework.exceptions",
        "isExtraImport": true,
        "detail": "rest_framework.exceptions",
        "documentation": {}
    },
    {
        "label": "NotFound",
        "importPath": "rest_framework.exceptions",
        "description": "rest_framework.exceptions",
        "isExtraImport": true,
        "detail": "rest_framework.exceptions",
        "documentation": {}
    },
    {
        "label": "ParseError",
        "importPath": "rest_framework.exceptions",
        "description": "rest_framework.exceptions",
        "isExtraImport": true,
        "detail": "rest_framework.exceptions",
        "documentation": {}
    },
    {
        "label": "ParseError",
        "importPath": "rest_framework.exceptions",
        "description": "rest_framework.exceptions",
        "isExtraImport": true,
        "detail": "rest_framework.exceptions",
        "documentation": {}
    },
    {
        "label": "ErrorDetail",
        "importPath": "rest_framework.exceptions",
        "description": "rest_framework.exceptions",
        "isExtraImport": true,
        "detail": "rest_framework.exceptions",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "rest_framework.exceptions",
        "description": "rest_framework.exceptions",
        "isExtraImport": true,
        "detail": "rest_framework.exceptions",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "rest_framework.exceptions",
        "description": "rest_framework.exceptions",
        "isExtraImport": true,
        "detail": "rest_framework.exceptions",
        "documentation": {}
    },
    {
        "label": "lazy_format",
        "importPath": "rest_framework.utils.formatting",
        "description": "rest_framework.utils.formatting",
        "isExtraImport": true,
        "detail": "rest_framework.utils.formatting",
        "documentation": {}
    },
    {
        "label": "LOOKUP_SEP",
        "importPath": "django.db.models.constants",
        "description": "django.db.models.constants",
        "isExtraImport": true,
        "detail": "django.db.models.constants",
        "documentation": {}
    },
    {
        "label": "ClassLookupDict",
        "importPath": "rest_framework.utils.field_mapping",
        "description": "rest_framework.utils.field_mapping",
        "isExtraImport": true,
        "detail": "rest_framework.utils.field_mapping",
        "documentation": {}
    },
    {
        "label": "ClassLookupDict",
        "importPath": "rest_framework.utils.field_mapping",
        "description": "rest_framework.utils.field_mapping",
        "isExtraImport": true,
        "detail": "rest_framework.utils.field_mapping",
        "documentation": {}
    },
    {
        "label": "ClassLookupDict",
        "importPath": "rest_framework.utils.field_mapping",
        "description": "rest_framework.utils.field_mapping",
        "isExtraImport": true,
        "detail": "rest_framework.utils.field_mapping",
        "documentation": {}
    },
    {
        "label": "get_field_kwargs",
        "importPath": "rest_framework.utils.field_mapping",
        "description": "rest_framework.utils.field_mapping",
        "isExtraImport": true,
        "detail": "rest_framework.utils.field_mapping",
        "documentation": {}
    },
    {
        "label": "get_nested_relation_kwargs",
        "importPath": "rest_framework.utils.field_mapping",
        "description": "rest_framework.utils.field_mapping",
        "isExtraImport": true,
        "detail": "rest_framework.utils.field_mapping",
        "documentation": {}
    },
    {
        "label": "get_relation_kwargs",
        "importPath": "rest_framework.utils.field_mapping",
        "description": "rest_framework.utils.field_mapping",
        "isExtraImport": true,
        "detail": "rest_framework.utils.field_mapping",
        "documentation": {}
    },
    {
        "label": "get_url_kwargs",
        "importPath": "rest_framework.utils.field_mapping",
        "description": "rest_framework.utils.field_mapping",
        "isExtraImport": true,
        "detail": "rest_framework.utils.field_mapping",
        "documentation": {}
    },
    {
        "label": "_MediaType",
        "importPath": "rest_framework.utils.mediatypes",
        "description": "rest_framework.utils.mediatypes",
        "isExtraImport": true,
        "detail": "rest_framework.utils.mediatypes",
        "documentation": {}
    },
    {
        "label": "media_type_matches",
        "importPath": "rest_framework.utils.mediatypes",
        "description": "rest_framework.utils.mediatypes",
        "isExtraImport": true,
        "detail": "rest_framework.utils.mediatypes",
        "documentation": {}
    },
    {
        "label": "order_by_precedence",
        "importPath": "rest_framework.utils.mediatypes",
        "description": "rest_framework.utils.mediatypes",
        "isExtraImport": true,
        "detail": "rest_framework.utils.mediatypes",
        "documentation": {}
    },
    {
        "label": "_MediaType",
        "importPath": "rest_framework.utils.mediatypes",
        "description": "rest_framework.utils.mediatypes",
        "isExtraImport": true,
        "detail": "rest_framework.utils.mediatypes",
        "documentation": {}
    },
    {
        "label": "InvalidPage",
        "importPath": "django.core.paginator",
        "description": "django.core.paginator",
        "isExtraImport": true,
        "detail": "django.core.paginator",
        "documentation": {}
    },
    {
        "label": "Paginator",
        "importPath": "django.core.paginator",
        "description": "django.core.paginator",
        "isExtraImport": true,
        "detail": "django.core.paginator",
        "documentation": {}
    },
    {
        "label": "Page",
        "importPath": "django.core.paginator",
        "description": "django.core.paginator",
        "isExtraImport": true,
        "detail": "django.core.paginator",
        "documentation": {}
    },
    {
        "label": "codecs",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "codecs",
        "description": "codecs",
        "detail": "codecs",
        "documentation": {}
    },
    {
        "label": "StopFutureHandlers",
        "importPath": "django.core.files.uploadhandler",
        "description": "django.core.files.uploadhandler",
        "isExtraImport": true,
        "detail": "django.core.files.uploadhandler",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "Manager",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "rest_framework.reverse",
        "description": "rest_framework.reverse",
        "isExtraImport": true,
        "detail": "rest_framework.reverse",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "rest_framework.reverse",
        "description": "rest_framework.reverse",
        "isExtraImport": true,
        "detail": "rest_framework.reverse",
        "documentation": {}
    },
    {
        "label": "_reverse",
        "importPath": "rest_framework.reverse",
        "description": "rest_framework.reverse",
        "isExtraImport": true,
        "detail": "rest_framework.reverse",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "rest_framework.reverse",
        "description": "rest_framework.reverse",
        "isExtraImport": true,
        "detail": "rest_framework.reverse",
        "documentation": {}
    },
    {
        "label": "get_breadcrumbs",
        "importPath": "rest_framework.utils.breadcrumbs",
        "description": "rest_framework.utils.breadcrumbs",
        "isExtraImport": true,
        "detail": "rest_framework.utils.breadcrumbs",
        "documentation": {}
    },
    {
        "label": "io",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "io",
        "description": "io",
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "contextmanager",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "RawPostDataException",
        "importPath": "django.http.request",
        "description": "django.http.request",
        "isExtraImport": true,
        "detail": "django.http.request",
        "documentation": {}
    },
    {
        "label": "responses",
        "importPath": "http.client",
        "description": "http.client",
        "isExtraImport": true,
        "detail": "http.client",
        "documentation": {}
    },
    {
        "label": "SimpleTemplateResponse",
        "importPath": "django.template.response",
        "description": "django.template.response",
        "isExtraImport": true,
        "detail": "django.template.response",
        "documentation": {}
    },
    {
        "label": "Serializer",
        "importPath": "rest_framework.serializers",
        "description": "rest_framework.serializers",
        "isExtraImport": true,
        "detail": "rest_framework.serializers",
        "documentation": {}
    },
    {
        "label": "itertools",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "itertools",
        "description": "itertools",
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "SchemaView",
        "importPath": "rest_framework.schemas.views",
        "description": "rest_framework.schemas.views",
        "isExtraImport": true,
        "detail": "rest_framework.schemas.views",
        "documentation": {}
    },
    {
        "label": "format_suffix_patterns",
        "importPath": "rest_framework.urlpatterns",
        "description": "rest_framework.urlpatterns",
        "isExtraImport": true,
        "detail": "rest_framework.urlpatterns",
        "documentation": {}
    },
    {
        "label": "traceback",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "traceback",
        "description": "traceback",
        "detail": "traceback",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "django.db.models.fields",
        "description": "django.db.models.fields",
        "isExtraImport": true,
        "detail": "django.db.models.fields",
        "documentation": {}
    },
    {
        "label": "# NOQA # isort:skip\n    HyperlinkedIdentityField",
        "importPath": "rest_framework.relations",
        "description": "rest_framework.relations",
        "isExtraImport": true,
        "detail": "rest_framework.relations",
        "documentation": {}
    },
    {
        "label": "HyperlinkedRelatedField",
        "importPath": "rest_framework.relations",
        "description": "rest_framework.relations",
        "isExtraImport": true,
        "detail": "rest_framework.relations",
        "documentation": {}
    },
    {
        "label": "ManyRelatedField",
        "importPath": "rest_framework.relations",
        "description": "rest_framework.relations",
        "isExtraImport": true,
        "detail": "rest_framework.relations",
        "documentation": {}
    },
    {
        "label": "PrimaryKeyRelatedField",
        "importPath": "rest_framework.relations",
        "description": "rest_framework.relations",
        "isExtraImport": true,
        "detail": "rest_framework.relations",
        "documentation": {}
    },
    {
        "label": "RelatedField",
        "importPath": "rest_framework.relations",
        "description": "rest_framework.relations",
        "isExtraImport": true,
        "detail": "rest_framework.relations",
        "documentation": {}
    },
    {
        "label": "SlugRelatedField",
        "importPath": "rest_framework.relations",
        "description": "rest_framework.relations",
        "isExtraImport": true,
        "detail": "rest_framework.relations",
        "documentation": {}
    },
    {
        "label": "StringRelatedField",
        "importPath": "rest_framework.relations",
        "description": "rest_framework.relations",
        "isExtraImport": true,
        "detail": "rest_framework.relations",
        "documentation": {}
    },
    {
        "label": "Hyperlink",
        "importPath": "rest_framework.relations",
        "description": "rest_framework.relations",
        "isExtraImport": true,
        "detail": "rest_framework.relations",
        "documentation": {}
    },
    {
        "label": "PKOnlyObject",
        "importPath": "rest_framework.relations",
        "description": "rest_framework.relations",
        "isExtraImport": true,
        "detail": "rest_framework.relations",
        "documentation": {}
    },
    {
        "label": "setting_changed",
        "importPath": "django.test.signals",
        "description": "django.test.signals",
        "isExtraImport": true,
        "detail": "django.test.signals",
        "documentation": {}
    },
    {
        "label": "WSGIHandler",
        "importPath": "django.core.handlers.wsgi",
        "description": "django.core.handlers.wsgi",
        "isExtraImport": true,
        "detail": "django.core.handlers.wsgi",
        "documentation": {}
    },
    {
        "label": "Client",
        "importPath": "django.test.client",
        "description": "django.test.client",
        "isExtraImport": true,
        "detail": "django.test.client",
        "documentation": {}
    },
    {
        "label": "ClientHandler",
        "importPath": "django.test.client",
        "description": "django.test.client",
        "isExtraImport": true,
        "detail": "django.test.client",
        "documentation": {}
    },
    {
        "label": "RequestFactory",
        "importPath": "django.test.client",
        "description": "django.test.client",
        "isExtraImport": true,
        "detail": "django.test.client",
        "documentation": {}
    },
    {
        "label": "urlencode",
        "importPath": "django.utils.http",
        "description": "django.utils.http",
        "isExtraImport": true,
        "detail": "django.utils.http",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "django.core.cache",
        "description": "django.core.cache",
        "isExtraImport": true,
        "detail": "django.core.cache",
        "documentation": {}
    },
    {
        "label": "RoutePattern",
        "importPath": "django.urls.resolvers",
        "description": "django.urls.resolvers",
        "isExtraImport": true,
        "detail": "django.urls.resolvers",
        "documentation": {}
    },
    {
        "label": "smart_repr",
        "importPath": "rest_framework.utils.representation",
        "description": "rest_framework.utils.representation",
        "isExtraImport": true,
        "detail": "rest_framework.utils.representation",
        "documentation": {}
    },
    {
        "label": "replace_query_param",
        "importPath": "rest_framework.templatetags.rest_framework",
        "description": "rest_framework.templatetags.rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework.templatetags.rest_framework",
        "documentation": {}
    },
    {
        "label": "HttpResponseBase",
        "importPath": "django.http.response",
        "description": "django.http.response",
        "isExtraImport": true,
        "detail": "django.http.response",
        "documentation": {}
    },
    {
        "label": "cc_delim_re",
        "importPath": "django.utils.cache",
        "description": "django.utils.cache",
        "isExtraImport": true,
        "detail": "django.utils.cache",
        "documentation": {}
    },
    {
        "label": "patch_vary_headers",
        "importPath": "django.utils.cache",
        "description": "django.utils.cache",
        "isExtraImport": true,
        "detail": "django.utils.cache",
        "documentation": {}
    },
    {
        "label": "csrf_exempt",
        "importPath": "django.views.decorators.csrf",
        "description": "django.views.decorators.csrf",
        "isExtraImport": true,
        "detail": "django.views.decorators.csrf",
        "documentation": {}
    },
    {
        "label": "csrf_exempt",
        "importPath": "django.views.decorators.csrf",
        "description": "django.views.decorators.csrf",
        "isExtraImport": true,
        "detail": "django.views.decorators.csrf",
        "documentation": {}
    },
    {
        "label": "classonlymethod",
        "importPath": "django.utils.decorators",
        "description": "django.utils.decorators",
        "isExtraImport": true,
        "detail": "django.utils.decorators",
        "documentation": {}
    },
    {
        "label": "MethodMapper",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "stringify",
        "importPath": "flatted",
        "description": "flatted",
        "isExtraImport": true,
        "detail": "flatted",
        "documentation": {}
    },
    {
        "label": "parse",
        "importPath": "flatted",
        "description": "flatted",
        "isExtraImport": true,
        "detail": "flatted",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "backend.backend.asgi",
        "description": "backend.backend.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "backend.backend.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-!g^^1!h2sqtcd7fygpk$swz$q^45^zionl2*8v03rr$+zco_g$'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "SECRET_KEY = 'django-insecure-!g^^1!h2sqtcd7fygpk$swz$q^45^zionl2*8v03rr$+zco_g$'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "ALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'core',",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'core',\n    'rest_framework',\n    'rest_framework.authtoken',",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'corsheaders.middleware.CorsMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "ROOT_URLCONF = 'backend.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "WSGI_APPLICATION = 'backend.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/3.2/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation\n# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\nCORS_ALLOWED_ORIGINS = [\n    \"http://localhost:3000\",  # Replace with your frontend's origin\n]\n# CORS_ORIGIN_ALLOW_ALL = True\n# Static files (CSS, JavaScript, Images)",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\nCORS_ALLOWED_ORIGINS = [\n    \"http://localhost:3000\",  # Replace with your frontend's origin\n]\n# CORS_ORIGIN_ALLOW_ALL = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.2/howto/static-files/",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "USE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\nCORS_ALLOWED_ORIGINS = [\n    \"http://localhost:3000\",  # Replace with your frontend's origin\n]\n# CORS_ORIGIN_ALLOW_ALL = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.2/howto/static-files/\nSTATIC_URL = '/static/'",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "USE_L10N",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "USE_L10N = True\nUSE_TZ = True\nCORS_ALLOWED_ORIGINS = [\n    \"http://localhost:3000\",  # Replace with your frontend's origin\n]\n# CORS_ORIGIN_ALLOW_ALL = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.2/howto/static-files/\nSTATIC_URL = '/static/'\n# Default primary key field type",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "USE_TZ = True\nCORS_ALLOWED_ORIGINS = [\n    \"http://localhost:3000\",  # Replace with your frontend's origin\n]\n# CORS_ORIGIN_ALLOW_ALL = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.2/howto/static-files/\nSTATIC_URL = '/static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "CORS_ALLOWED_ORIGINS",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "CORS_ALLOWED_ORIGINS = [\n    \"http://localhost:3000\",  # Replace with your frontend's origin\n]\n# CORS_ORIGIN_ALLOW_ALL = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.2/howto/static-files/\nSTATIC_URL = '/static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "STATIC_URL = '/static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "backend.backend.urls",
        "description": "backend.backend.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('core.urls')),\n    path('auth/', obtain_auth_token),\n]",
        "detail": "backend.backend.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "backend.backend.wsgi",
        "description": "backend.backend.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "backend.backend.wsgi",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "backend.core.migrations.0001_initial",
        "description": "backend.core.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Article',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('title', models.CharField(max_length=100)),",
        "detail": "backend.core.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "backend.core.migrations.0002_comment",
        "description": "backend.core.migrations.0002_comment",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('core', '0001_initial'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Comment',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('user_name', models.CharField(max_length=255)),",
        "detail": "backend.core.migrations.0002_comment",
        "documentation": {}
    },
    {
        "label": "ArticleModel",
        "kind": 6,
        "importPath": "backend.core.admin",
        "description": "backend.core.admin",
        "peekOfCode": "class ArticleModel(admin.ModelAdmin):\n    list_filter = ('title', 'description')\n    list_display = ('title', 'description')\nadmin.site.register(Comment)",
        "detail": "backend.core.admin",
        "documentation": {}
    },
    {
        "label": "CoreConfig",
        "kind": 6,
        "importPath": "backend.core.apps",
        "description": "backend.core.apps",
        "peekOfCode": "class CoreConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'core'",
        "detail": "backend.core.apps",
        "documentation": {}
    },
    {
        "label": "Article",
        "kind": 6,
        "importPath": "backend.core.models",
        "description": "backend.core.models",
        "peekOfCode": "class Article(models.Model):\n    title = models.CharField(max_length=100)\n    description = models.TextField()\n    def __str__(self):\n        return self.title\nclass Comment(models.Model):\n    user_name = models.CharField(max_length=255)\n    email = models.EmailField()\n    home_page = models.URLField(blank=True, null=True)\n    captcha_code = models.CharField(max_length=255)",
        "detail": "backend.core.models",
        "documentation": {}
    },
    {
        "label": "Comment",
        "kind": 6,
        "importPath": "backend.core.models",
        "description": "backend.core.models",
        "peekOfCode": "class Comment(models.Model):\n    user_name = models.CharField(max_length=255)\n    email = models.EmailField()\n    home_page = models.URLField(blank=True, null=True)\n    captcha_code = models.CharField(max_length=255)\n    text = models.TextField()\n    parent = models.ForeignKey('self', on_delete=models.CASCADE, null=True, blank=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    def __str__(self):\n        return self.text",
        "detail": "backend.core.models",
        "documentation": {}
    },
    {
        "label": "ArticleSerializer",
        "kind": 6,
        "importPath": "backend.core.serialziers",
        "description": "backend.core.serialziers",
        "peekOfCode": "class ArticleSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Article\n        fields = ['id','title','description']\nclass UserSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = User\n        fields = ['id','username','password']\n        extra_kwargs = {'password':{\n            'write_only':True,",
        "detail": "backend.core.serialziers",
        "documentation": {}
    },
    {
        "label": "UserSerializer",
        "kind": 6,
        "importPath": "backend.core.serialziers",
        "description": "backend.core.serialziers",
        "peekOfCode": "class UserSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = User\n        fields = ['id','username','password']\n        extra_kwargs = {'password':{\n            'write_only':True,\n            'required':True\n        }}\n    def create(self, validated_data):\n        user = User.objects.create_user(**validated_data)",
        "detail": "backend.core.serialziers",
        "documentation": {}
    },
    {
        "label": "CommentSerializer",
        "kind": 6,
        "importPath": "backend.core.serialziers",
        "description": "backend.core.serialziers",
        "peekOfCode": "class CommentSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Comment\n        fields = '__all__'",
        "detail": "backend.core.serialziers",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "backend.core.urls",
        "description": "backend.core.urls",
        "peekOfCode": "router = DefaultRouter()\nrouter.register('articles', ArticleViewSet, basename='articles')\nrouter.register('users', UserViewSet)\nurlpatterns = [\n    path('api/', include(router.urls)),\n    path('api/comments/', CommentListCreateView.as_view(), name='comment-list-create'),\n]",
        "detail": "backend.core.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "backend.core.urls",
        "description": "backend.core.urls",
        "peekOfCode": "urlpatterns = [\n    path('api/', include(router.urls)),\n    path('api/comments/', CommentListCreateView.as_view(), name='comment-list-create'),\n]",
        "detail": "backend.core.urls",
        "documentation": {}
    },
    {
        "label": "UserViewSet",
        "kind": 6,
        "importPath": "backend.core.views",
        "description": "backend.core.views",
        "peekOfCode": "class UserViewSet(viewsets.ModelViewSet):\n    queryset = User.objects.all()\n    serializer_class = UserSerializer\nclass ArticleViewSet(viewsets.ModelViewSet):\n    queryset = Article.objects.all()\n    serializer_class = ArticleSerializer\n    authentication_classes = (TokenAuthentication,)\nclass CommentListCreateView(generics.ListCreateAPIView):\n    queryset = Comment.objects.all()\n    serializer_class = CommentSerializer",
        "detail": "backend.core.views",
        "documentation": {}
    },
    {
        "label": "ArticleViewSet",
        "kind": 6,
        "importPath": "backend.core.views",
        "description": "backend.core.views",
        "peekOfCode": "class ArticleViewSet(viewsets.ModelViewSet):\n    queryset = Article.objects.all()\n    serializer_class = ArticleSerializer\n    authentication_classes = (TokenAuthentication,)\nclass CommentListCreateView(generics.ListCreateAPIView):\n    queryset = Comment.objects.all()\n    serializer_class = CommentSerializer",
        "detail": "backend.core.views",
        "documentation": {}
    },
    {
        "label": "CommentListCreateView",
        "kind": 6,
        "importPath": "backend.core.views",
        "description": "backend.core.views",
        "peekOfCode": "class CommentListCreateView(generics.ListCreateAPIView):\n    queryset = Comment.objects.all()\n    serializer_class = CommentSerializer",
        "detail": "backend.core.views",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "backend.rest_framework.authtoken.management.commands.drf_create_token",
        "description": "backend.rest_framework.authtoken.management.commands.drf_create_token",
        "peekOfCode": "class Command(BaseCommand):\n    help = 'Create DRF Token for a given user'\n    def create_user_token(self, username, reset_token):\n        user = UserModel._default_manager.get_by_natural_key(username)\n        if reset_token:\n            Token.objects.filter(user=user).delete()\n        token = Token.objects.get_or_create(user=user)\n        return token[0]\n    def add_arguments(self, parser):\n        parser.add_argument('username', type=str)",
        "detail": "backend.rest_framework.authtoken.management.commands.drf_create_token",
        "documentation": {}
    },
    {
        "label": "UserModel",
        "kind": 5,
        "importPath": "backend.rest_framework.authtoken.management.commands.drf_create_token",
        "description": "backend.rest_framework.authtoken.management.commands.drf_create_token",
        "peekOfCode": "UserModel = get_user_model()\nclass Command(BaseCommand):\n    help = 'Create DRF Token for a given user'\n    def create_user_token(self, username, reset_token):\n        user = UserModel._default_manager.get_by_natural_key(username)\n        if reset_token:\n            Token.objects.filter(user=user).delete()\n        token = Token.objects.get_or_create(user=user)\n        return token[0]\n    def add_arguments(self, parser):",
        "detail": "backend.rest_framework.authtoken.management.commands.drf_create_token",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "backend.rest_framework.authtoken.migrations.0001_initial",
        "description": "backend.rest_framework.authtoken.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Token',\n            fields=[\n                ('key', models.CharField(primary_key=True, serialize=False, max_length=40)),\n                ('created', models.DateTimeField(auto_now_add=True)),",
        "detail": "backend.rest_framework.authtoken.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "backend.rest_framework.authtoken.migrations.0002_auto_20160226_1747",
        "description": "backend.rest_framework.authtoken.migrations.0002_auto_20160226_1747",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('authtoken', '0001_initial'),\n    ]\n    operations = [\n        migrations.AlterModelOptions(\n            name='token',\n            options={'verbose_name_plural': 'Tokens', 'verbose_name': 'Token'},\n        ),\n        migrations.AlterField(",
        "detail": "backend.rest_framework.authtoken.migrations.0002_auto_20160226_1747",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "backend.rest_framework.authtoken.migrations.0003_tokenproxy",
        "description": "backend.rest_framework.authtoken.migrations.0003_tokenproxy",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('authtoken', '0002_auto_20160226_1747'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='TokenProxy',\n            fields=[\n            ],\n            options={",
        "detail": "backend.rest_framework.authtoken.migrations.0003_tokenproxy",
        "documentation": {}
    },
    {
        "label": "TokenChangeList",
        "kind": 6,
        "importPath": "backend.rest_framework.authtoken.admin",
        "description": "backend.rest_framework.authtoken.admin",
        "peekOfCode": "class TokenChangeList(ChangeList):\n    \"\"\"Map to matching User id\"\"\"\n    def url_for_result(self, result):\n        pk = result.user.pk\n        return reverse('admin:%s_%s_change' % (self.opts.app_label,\n                                               self.opts.model_name),\n                       args=(quote(pk),),\n                       current_app=self.model_admin.admin_site.name)\nclass TokenAdmin(admin.ModelAdmin):\n    list_display = ('key', 'user', 'created')",
        "detail": "backend.rest_framework.authtoken.admin",
        "documentation": {}
    },
    {
        "label": "TokenAdmin",
        "kind": 6,
        "importPath": "backend.rest_framework.authtoken.admin",
        "description": "backend.rest_framework.authtoken.admin",
        "peekOfCode": "class TokenAdmin(admin.ModelAdmin):\n    list_display = ('key', 'user', 'created')\n    fields = ('user',)\n    ordering = ('-created',)\n    actions = None  # Actions not compatible with mapped IDs.\n    def get_changelist(self, request, **kwargs):\n        return TokenChangeList\n    def get_object(self, request, object_id, from_field=None):\n        \"\"\"\n        Map from User ID to matching Token.",
        "detail": "backend.rest_framework.authtoken.admin",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "backend.rest_framework.authtoken.admin",
        "description": "backend.rest_framework.authtoken.admin",
        "peekOfCode": "User = get_user_model()\nclass TokenChangeList(ChangeList):\n    \"\"\"Map to matching User id\"\"\"\n    def url_for_result(self, result):\n        pk = result.user.pk\n        return reverse('admin:%s_%s_change' % (self.opts.app_label,\n                                               self.opts.model_name),\n                       args=(quote(pk),),\n                       current_app=self.model_admin.admin_site.name)\nclass TokenAdmin(admin.ModelAdmin):",
        "detail": "backend.rest_framework.authtoken.admin",
        "documentation": {}
    },
    {
        "label": "AuthTokenConfig",
        "kind": 6,
        "importPath": "backend.rest_framework.authtoken.apps",
        "description": "backend.rest_framework.authtoken.apps",
        "peekOfCode": "class AuthTokenConfig(AppConfig):\n    name = 'rest_framework.authtoken'\n    verbose_name = _(\"Auth Token\")",
        "detail": "backend.rest_framework.authtoken.apps",
        "documentation": {}
    },
    {
        "label": "Token",
        "kind": 6,
        "importPath": "backend.rest_framework.authtoken.models",
        "description": "backend.rest_framework.authtoken.models",
        "peekOfCode": "class Token(models.Model):\n    \"\"\"\n    The default authorization token model.\n    \"\"\"\n    key = models.CharField(_(\"Key\"), max_length=40, primary_key=True)\n    user = models.OneToOneField(\n        settings.AUTH_USER_MODEL, related_name='auth_token',\n        on_delete=models.CASCADE, verbose_name=_(\"User\")\n    )\n    created = models.DateTimeField(_(\"Created\"), auto_now_add=True)",
        "detail": "backend.rest_framework.authtoken.models",
        "documentation": {}
    },
    {
        "label": "TokenProxy",
        "kind": 6,
        "importPath": "backend.rest_framework.authtoken.models",
        "description": "backend.rest_framework.authtoken.models",
        "peekOfCode": "class TokenProxy(Token):\n    \"\"\"\n    Proxy mapping pk to user pk for use in admin.\n    \"\"\"\n    @property\n    def pk(self):\n        return self.user_id\n    class Meta:\n        proxy = 'rest_framework.authtoken' in settings.INSTALLED_APPS\n        abstract = 'rest_framework.authtoken' not in settings.INSTALLED_APPS",
        "detail": "backend.rest_framework.authtoken.models",
        "documentation": {}
    },
    {
        "label": "AuthTokenSerializer",
        "kind": 6,
        "importPath": "backend.rest_framework.authtoken.serializers",
        "description": "backend.rest_framework.authtoken.serializers",
        "peekOfCode": "class AuthTokenSerializer(serializers.Serializer):\n    username = serializers.CharField(\n        label=_(\"Username\"),\n        write_only=True\n    )\n    password = serializers.CharField(\n        label=_(\"Password\"),\n        style={'input_type': 'password'},\n        trim_whitespace=False,\n        write_only=True",
        "detail": "backend.rest_framework.authtoken.serializers",
        "documentation": {}
    },
    {
        "label": "ObtainAuthToken",
        "kind": 6,
        "importPath": "backend.rest_framework.authtoken.views",
        "description": "backend.rest_framework.authtoken.views",
        "peekOfCode": "class ObtainAuthToken(APIView):\n    throttle_classes = ()\n    permission_classes = ()\n    parser_classes = (parsers.FormParser, parsers.MultiPartParser, parsers.JSONParser,)\n    renderer_classes = (renderers.JSONRenderer,)\n    serializer_class = AuthTokenSerializer\n    if coreapi_schema.is_enabled():\n        schema = ManualSchema(\n            fields=[\n                coreapi.Field(",
        "detail": "backend.rest_framework.authtoken.views",
        "documentation": {}
    },
    {
        "label": "obtain_auth_token",
        "kind": 5,
        "importPath": "backend.rest_framework.authtoken.views",
        "description": "backend.rest_framework.authtoken.views",
        "peekOfCode": "obtain_auth_token = ObtainAuthToken.as_view()",
        "detail": "backend.rest_framework.authtoken.views",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "backend.rest_framework.management.commands.generateschema",
        "description": "backend.rest_framework.management.commands.generateschema",
        "peekOfCode": "class Command(BaseCommand):\n    help = \"Generates configured API schema for project.\"\n    def get_mode(self):\n        return COREAPI_MODE if coreapi.is_enabled() else OPENAPI_MODE\n    def add_arguments(self, parser):\n        parser.add_argument('--title', dest=\"title\", default='', type=str)\n        parser.add_argument('--url', dest=\"url\", default=None, type=str)\n        parser.add_argument('--description', dest=\"description\", default=None, type=str)\n        if self.get_mode() == COREAPI_MODE:\n            parser.add_argument('--format', dest=\"format\", choices=['openapi', 'openapi-json', 'corejson'], default='openapi', type=str)",
        "detail": "backend.rest_framework.management.commands.generateschema",
        "documentation": {}
    },
    {
        "label": "OPENAPI_MODE",
        "kind": 5,
        "importPath": "backend.rest_framework.management.commands.generateschema",
        "description": "backend.rest_framework.management.commands.generateschema",
        "peekOfCode": "OPENAPI_MODE = 'openapi'\nCOREAPI_MODE = 'coreapi'\nclass Command(BaseCommand):\n    help = \"Generates configured API schema for project.\"\n    def get_mode(self):\n        return COREAPI_MODE if coreapi.is_enabled() else OPENAPI_MODE\n    def add_arguments(self, parser):\n        parser.add_argument('--title', dest=\"title\", default='', type=str)\n        parser.add_argument('--url', dest=\"url\", default=None, type=str)\n        parser.add_argument('--description', dest=\"description\", default=None, type=str)",
        "detail": "backend.rest_framework.management.commands.generateschema",
        "documentation": {}
    },
    {
        "label": "COREAPI_MODE",
        "kind": 5,
        "importPath": "backend.rest_framework.management.commands.generateschema",
        "description": "backend.rest_framework.management.commands.generateschema",
        "peekOfCode": "COREAPI_MODE = 'coreapi'\nclass Command(BaseCommand):\n    help = \"Generates configured API schema for project.\"\n    def get_mode(self):\n        return COREAPI_MODE if coreapi.is_enabled() else OPENAPI_MODE\n    def add_arguments(self, parser):\n        parser.add_argument('--title', dest=\"title\", default='', type=str)\n        parser.add_argument('--url', dest=\"url\", default=None, type=str)\n        parser.add_argument('--description', dest=\"description\", default=None, type=str)\n        if self.get_mode() == COREAPI_MODE:",
        "detail": "backend.rest_framework.management.commands.generateschema",
        "documentation": {}
    },
    {
        "label": "LinkNode",
        "kind": 6,
        "importPath": "backend.rest_framework.schemas.coreapi",
        "description": "backend.rest_framework.schemas.coreapi",
        "peekOfCode": "class LinkNode(OrderedDict):\n    def __init__(self):\n        self.links = []\n        self.methods_counter = Counter()\n        super(LinkNode, self).__init__()\n    def get_available_key(self, preferred_key):\n        if preferred_key not in self:\n            return preferred_key\n        while True:\n            current_val = self.methods_counter[preferred_key]",
        "detail": "backend.rest_framework.schemas.coreapi",
        "documentation": {}
    },
    {
        "label": "SchemaGenerator",
        "kind": 6,
        "importPath": "backend.rest_framework.schemas.coreapi",
        "description": "backend.rest_framework.schemas.coreapi",
        "peekOfCode": "class SchemaGenerator(BaseSchemaGenerator):\n    \"\"\"\n    Original CoreAPI version.\n    \"\"\"\n    # Map HTTP methods onto actions.\n    default_mapping = {\n        'get': 'retrieve',\n        'post': 'create',\n        'put': 'update',\n        'patch': 'partial_update',",
        "detail": "backend.rest_framework.schemas.coreapi",
        "documentation": {}
    },
    {
        "label": "AutoSchema",
        "kind": 6,
        "importPath": "backend.rest_framework.schemas.coreapi",
        "description": "backend.rest_framework.schemas.coreapi",
        "peekOfCode": "class AutoSchema(ViewInspector):\n    \"\"\"\n    Default inspector for APIView\n    Responsible for per-view introspection and schema generation.\n    \"\"\"\n    def __init__(self, manual_fields=None):\n        \"\"\"\n        Parameters:\n        * `manual_fields`: list of `coreapi.Field` instances that\n            will be added to auto-generated fields, overwriting on `Field.name`",
        "detail": "backend.rest_framework.schemas.coreapi",
        "documentation": {}
    },
    {
        "label": "ManualSchema",
        "kind": 6,
        "importPath": "backend.rest_framework.schemas.coreapi",
        "description": "backend.rest_framework.schemas.coreapi",
        "peekOfCode": "class ManualSchema(ViewInspector):\n    \"\"\"\n    Allows providing a list of coreapi.Fields,\n    plus an optional description.\n    \"\"\"\n    def __init__(self, fields, description='', encoding=None):\n        \"\"\"\n        Parameters:\n        * `fields`: list of `coreapi.Field` instances.\n        * `description`: String description for view. Optional.",
        "detail": "backend.rest_framework.schemas.coreapi",
        "documentation": {}
    },
    {
        "label": "common_path",
        "kind": 2,
        "importPath": "backend.rest_framework.schemas.coreapi",
        "description": "backend.rest_framework.schemas.coreapi",
        "peekOfCode": "def common_path(paths):\n    split_paths = [path.strip('/').split('/') for path in paths]\n    s1 = min(split_paths)\n    s2 = max(split_paths)\n    common = s1\n    for i, c in enumerate(s1):\n        if c != s2[i]:\n            common = s1[:i]\n            break\n    return '/' + '/'.join(common)",
        "detail": "backend.rest_framework.schemas.coreapi",
        "documentation": {}
    },
    {
        "label": "is_custom_action",
        "kind": 2,
        "importPath": "backend.rest_framework.schemas.coreapi",
        "description": "backend.rest_framework.schemas.coreapi",
        "peekOfCode": "def is_custom_action(action):\n    return action not in {\n        'retrieve', 'list', 'create', 'update', 'partial_update', 'destroy'\n    }\ndef distribute_links(obj):\n    for key, value in obj.items():\n        distribute_links(value)\n    for preferred_key, link in obj.links:\n        key = obj.get_available_key(preferred_key)\n        obj[key] = link",
        "detail": "backend.rest_framework.schemas.coreapi",
        "documentation": {}
    },
    {
        "label": "distribute_links",
        "kind": 2,
        "importPath": "backend.rest_framework.schemas.coreapi",
        "description": "backend.rest_framework.schemas.coreapi",
        "peekOfCode": "def distribute_links(obj):\n    for key, value in obj.items():\n        distribute_links(value)\n    for preferred_key, link in obj.links:\n        key = obj.get_available_key(preferred_key)\n        obj[key] = link\nINSERT_INTO_COLLISION_FMT = \"\"\"\nSchema Naming Collision.\ncoreapi.Link for URL path {value_url} cannot be inserted into schema.\nPosition conflicts with coreapi.Link for URL path {target_url}.",
        "detail": "backend.rest_framework.schemas.coreapi",
        "documentation": {}
    },
    {
        "label": "insert_into",
        "kind": 2,
        "importPath": "backend.rest_framework.schemas.coreapi",
        "description": "backend.rest_framework.schemas.coreapi",
        "peekOfCode": "def insert_into(target, keys, value):\n    \"\"\"\n    Nested dictionary insertion.\n    >>> example = {}\n    >>> insert_into(example, ['a', 'b', 'c'], 123)\n    >>> example\n    LinkNode({'a': LinkNode({'b': LinkNode({'c': LinkNode(links=[123])}}})))\n    \"\"\"\n    for key in keys[:-1]:\n        if key not in target:",
        "detail": "backend.rest_framework.schemas.coreapi",
        "documentation": {}
    },
    {
        "label": "field_to_schema",
        "kind": 2,
        "importPath": "backend.rest_framework.schemas.coreapi",
        "description": "backend.rest_framework.schemas.coreapi",
        "peekOfCode": "def field_to_schema(field):\n    title = force_str(field.label) if field.label else ''\n    description = force_str(field.help_text) if field.help_text else ''\n    if isinstance(field, (serializers.ListSerializer, serializers.ListField)):\n        child_schema = field_to_schema(field.child)\n        return coreschema.Array(\n            items=child_schema,\n            title=title,\n            description=description\n        )",
        "detail": "backend.rest_framework.schemas.coreapi",
        "documentation": {}
    },
    {
        "label": "is_enabled",
        "kind": 2,
        "importPath": "backend.rest_framework.schemas.coreapi",
        "description": "backend.rest_framework.schemas.coreapi",
        "peekOfCode": "def is_enabled():\n    \"\"\"Is CoreAPI Mode enabled?\"\"\"\n    return issubclass(api_settings.DEFAULT_SCHEMA_CLASS, AutoSchema)",
        "detail": "backend.rest_framework.schemas.coreapi",
        "documentation": {}
    },
    {
        "label": "INSERT_INTO_COLLISION_FMT",
        "kind": 5,
        "importPath": "backend.rest_framework.schemas.coreapi",
        "description": "backend.rest_framework.schemas.coreapi",
        "peekOfCode": "INSERT_INTO_COLLISION_FMT = \"\"\"\nSchema Naming Collision.\ncoreapi.Link for URL path {value_url} cannot be inserted into schema.\nPosition conflicts with coreapi.Link for URL path {target_url}.\nAttempted to insert link with keys: {keys}.\nAdjust URLs to avoid naming collision or override `SchemaGenerator.get_keys()`\nto customise schema structure.\n\"\"\"\nclass LinkNode(OrderedDict):\n    def __init__(self):",
        "detail": "backend.rest_framework.schemas.coreapi",
        "documentation": {}
    },
    {
        "label": "EndpointEnumerator",
        "kind": 6,
        "importPath": "backend.rest_framework.schemas.generators",
        "description": "backend.rest_framework.schemas.generators",
        "peekOfCode": "class EndpointEnumerator:\n    \"\"\"\n    A class to determine the available API endpoints that a project exposes.\n    \"\"\"\n    def __init__(self, patterns=None, urlconf=None):\n        if patterns is None:\n            if urlconf is None:\n                # Use the default Django URL conf\n                urlconf = settings.ROOT_URLCONF\n            # Load the given URLconf module",
        "detail": "backend.rest_framework.schemas.generators",
        "documentation": {}
    },
    {
        "label": "BaseSchemaGenerator",
        "kind": 6,
        "importPath": "backend.rest_framework.schemas.generators",
        "description": "backend.rest_framework.schemas.generators",
        "peekOfCode": "class BaseSchemaGenerator:\n    endpoint_inspector_cls = EndpointEnumerator\n    # 'pk' isn't great as an externally exposed name for an identifier,\n    # so by default we prefer to use the actual model field name for schemas.\n    # Set by 'SCHEMA_COERCE_PATH_PK'.\n    coerce_path_pk = None\n    def __init__(self, title=None, url=None, description=None, patterns=None, urlconf=None, version=None):\n        if url and not url.endswith('/'):\n            url += '/'\n        self.coerce_path_pk = api_settings.SCHEMA_COERCE_PATH_PK",
        "detail": "backend.rest_framework.schemas.generators",
        "documentation": {}
    },
    {
        "label": "get_pk_name",
        "kind": 2,
        "importPath": "backend.rest_framework.schemas.generators",
        "description": "backend.rest_framework.schemas.generators",
        "peekOfCode": "def get_pk_name(model):\n    meta = model._meta.concrete_model._meta\n    return _get_pk(meta).name\ndef is_api_view(callback):\n    \"\"\"\n    Return `True` if the given view callback is a REST framework view/viewset.\n    \"\"\"\n    # Avoid import cycle on APIView\n    from rest_framework.views import APIView\n    cls = getattr(callback, 'cls', None)",
        "detail": "backend.rest_framework.schemas.generators",
        "documentation": {}
    },
    {
        "label": "is_api_view",
        "kind": 2,
        "importPath": "backend.rest_framework.schemas.generators",
        "description": "backend.rest_framework.schemas.generators",
        "peekOfCode": "def is_api_view(callback):\n    \"\"\"\n    Return `True` if the given view callback is a REST framework view/viewset.\n    \"\"\"\n    # Avoid import cycle on APIView\n    from rest_framework.views import APIView\n    cls = getattr(callback, 'cls', None)\n    return (cls is not None) and issubclass(cls, APIView)\ndef endpoint_ordering(endpoint):\n    path, method, callback = endpoint",
        "detail": "backend.rest_framework.schemas.generators",
        "documentation": {}
    },
    {
        "label": "endpoint_ordering",
        "kind": 2,
        "importPath": "backend.rest_framework.schemas.generators",
        "description": "backend.rest_framework.schemas.generators",
        "peekOfCode": "def endpoint_ordering(endpoint):\n    path, method, callback = endpoint\n    method_priority = {\n        'GET': 0,\n        'POST': 1,\n        'PUT': 2,\n        'PATCH': 3,\n        'DELETE': 4\n    }.get(method, 5)\n    return (method_priority,)",
        "detail": "backend.rest_framework.schemas.generators",
        "documentation": {}
    },
    {
        "label": "_PATH_PARAMETER_COMPONENT_RE",
        "kind": 5,
        "importPath": "backend.rest_framework.schemas.generators",
        "description": "backend.rest_framework.schemas.generators",
        "peekOfCode": "_PATH_PARAMETER_COMPONENT_RE = re.compile(\n    r'<(?:(?P<converter>[^>:]+):)?(?P<parameter>\\w+)>'\n)\nclass EndpointEnumerator:\n    \"\"\"\n    A class to determine the available API endpoints that a project exposes.\n    \"\"\"\n    def __init__(self, patterns=None, urlconf=None):\n        if patterns is None:\n            if urlconf is None:",
        "detail": "backend.rest_framework.schemas.generators",
        "documentation": {}
    },
    {
        "label": "ViewInspector",
        "kind": 6,
        "importPath": "backend.rest_framework.schemas.inspectors",
        "description": "backend.rest_framework.schemas.inspectors",
        "peekOfCode": "class ViewInspector:\n    \"\"\"\n    Descriptor class on APIView.\n    Provide subclass for per-view schema generation\n    \"\"\"\n    # Used in _get_description_section()\n    header_regex = re.compile('^[a-zA-Z][0-9A-Za-z_]*:')\n    def __init__(self):\n        self.instance_schemas = WeakKeyDictionary()\n    def __get__(self, instance, owner):",
        "detail": "backend.rest_framework.schemas.inspectors",
        "documentation": {}
    },
    {
        "label": "DefaultSchema",
        "kind": 6,
        "importPath": "backend.rest_framework.schemas.inspectors",
        "description": "backend.rest_framework.schemas.inspectors",
        "peekOfCode": "class DefaultSchema(ViewInspector):\n    \"\"\"Allows overriding AutoSchema using DEFAULT_SCHEMA_CLASS setting\"\"\"\n    def __get__(self, instance, owner):\n        result = super().__get__(instance, owner)\n        if not isinstance(result, DefaultSchema):\n            return result\n        inspector_class = api_settings.DEFAULT_SCHEMA_CLASS\n        assert issubclass(inspector_class, ViewInspector), (\n            \"DEFAULT_SCHEMA_CLASS must be set to a ViewInspector (usually an AutoSchema) subclass\"\n        )",
        "detail": "backend.rest_framework.schemas.inspectors",
        "documentation": {}
    },
    {
        "label": "SchemaGenerator",
        "kind": 6,
        "importPath": "backend.rest_framework.schemas.openapi",
        "description": "backend.rest_framework.schemas.openapi",
        "peekOfCode": "class SchemaGenerator(BaseSchemaGenerator):\n    def get_info(self):\n        # Title and version are required by openapi specification 3.x\n        info = {\n            'title': self.title or '',\n            'version': self.version or ''\n        }\n        if self.description is not None:\n            info['description'] = self.description\n        return info",
        "detail": "backend.rest_framework.schemas.openapi",
        "documentation": {}
    },
    {
        "label": "AutoSchema",
        "kind": 6,
        "importPath": "backend.rest_framework.schemas.openapi",
        "description": "backend.rest_framework.schemas.openapi",
        "peekOfCode": "class AutoSchema(ViewInspector):\n    def __init__(self, tags=None, operation_id_base=None, component_name=None):\n        \"\"\"\n        :param operation_id_base: user-defined name in operationId. If empty, it will be deducted from the Model/Serializer/View name.\n        :param component_name: user-defined component's name. If empty, it will be deducted from the Serializer's class name.\n        \"\"\"\n        if tags and not all(isinstance(tag, str) for tag in tags):\n            raise ValueError('tags must be a list or tuple of string.')\n        self._tags = tags\n        self.operation_id_base = operation_id_base",
        "detail": "backend.rest_framework.schemas.openapi",
        "documentation": {}
    },
    {
        "label": "is_list_view",
        "kind": 2,
        "importPath": "backend.rest_framework.schemas.utils",
        "description": "backend.rest_framework.schemas.utils",
        "peekOfCode": "def is_list_view(path, method, view):\n    \"\"\"\n    Return True if the given path/method appears to represent a list view.\n    \"\"\"\n    if hasattr(view, 'action'):\n        # Viewsets have an explicitly defined action, which we can inspect.\n        return view.action == 'list'\n    if method.lower() != 'get':\n        return False\n    if isinstance(view, RetrieveModelMixin):",
        "detail": "backend.rest_framework.schemas.utils",
        "documentation": {}
    },
    {
        "label": "get_pk_description",
        "kind": 2,
        "importPath": "backend.rest_framework.schemas.utils",
        "description": "backend.rest_framework.schemas.utils",
        "peekOfCode": "def get_pk_description(model, model_field):\n    if isinstance(model_field, models.AutoField):\n        value_type = _('unique integer value')\n    elif isinstance(model_field, models.UUIDField):\n        value_type = _('UUID string')\n    else:\n        value_type = _('unique value')\n    return _('A {value_type} identifying this {name}.').format(\n        value_type=value_type,\n        name=model._meta.verbose_name,",
        "detail": "backend.rest_framework.schemas.utils",
        "documentation": {}
    },
    {
        "label": "SchemaView",
        "kind": 6,
        "importPath": "backend.rest_framework.schemas.views",
        "description": "backend.rest_framework.schemas.views",
        "peekOfCode": "class SchemaView(APIView):\n    _ignore_model_permissions = True\n    schema = None  # exclude from schema\n    renderer_classes = None\n    schema_generator = None\n    public = False\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        if self.renderer_classes is None:\n            if coreapi.is_enabled():",
        "detail": "backend.rest_framework.schemas.views",
        "documentation": {}
    },
    {
        "label": "CodeNode",
        "kind": 6,
        "importPath": "backend.rest_framework.templatetags.rest_framework",
        "description": "backend.rest_framework.templatetags.rest_framework",
        "peekOfCode": "class CodeNode(template.Node):\n    style = 'emacs'\n    def __init__(self, lang, code):\n        self.lang = lang\n        self.nodelist = code\n    def render(self, context):\n        text = self.nodelist.render(context)\n        return pygments_highlight(text, self.lang, self.style)\n@register.filter()\ndef with_location(fields, location):",
        "detail": "backend.rest_framework.templatetags.rest_framework",
        "documentation": {}
    },
    {
        "label": "highlight_code",
        "kind": 2,
        "importPath": "backend.rest_framework.templatetags.rest_framework",
        "description": "backend.rest_framework.templatetags.rest_framework",
        "peekOfCode": "def highlight_code(parser, token):\n    code = token.split_contents()[-1]\n    nodelist = parser.parse(('endcode',))\n    parser.delete_first_token()\n    return CodeNode(code, nodelist)\nclass CodeNode(template.Node):\n    style = 'emacs'\n    def __init__(self, lang, code):\n        self.lang = lang\n        self.nodelist = code",
        "detail": "backend.rest_framework.templatetags.rest_framework",
        "documentation": {}
    },
    {
        "label": "with_location",
        "kind": 2,
        "importPath": "backend.rest_framework.templatetags.rest_framework",
        "description": "backend.rest_framework.templatetags.rest_framework",
        "peekOfCode": "def with_location(fields, location):\n    return [\n        field for field in fields\n        if field.location == location\n    ]\n@register.simple_tag\ndef form_for_link(link):\n    import coreschema\n    properties = OrderedDict([\n        (field.name, field.schema or coreschema.String())",
        "detail": "backend.rest_framework.templatetags.rest_framework",
        "documentation": {}
    },
    {
        "label": "form_for_link",
        "kind": 2,
        "importPath": "backend.rest_framework.templatetags.rest_framework",
        "description": "backend.rest_framework.templatetags.rest_framework",
        "peekOfCode": "def form_for_link(link):\n    import coreschema\n    properties = OrderedDict([\n        (field.name, field.schema or coreschema.String())\n        for field in link.fields\n    ])\n    required = [\n        field.name\n        for field in link.fields\n        if field.required",
        "detail": "backend.rest_framework.templatetags.rest_framework",
        "documentation": {}
    },
    {
        "label": "render_markdown",
        "kind": 2,
        "importPath": "backend.rest_framework.templatetags.rest_framework",
        "description": "backend.rest_framework.templatetags.rest_framework",
        "peekOfCode": "def render_markdown(markdown_text):\n    if apply_markdown is None:\n        return markdown_text\n    return mark_safe(apply_markdown(markdown_text))\n@register.simple_tag\ndef get_pagination_html(pager):\n    return pager.to_html()\n@register.simple_tag\ndef render_form(serializer, template_pack=None):\n    style = {'template_pack': template_pack} if template_pack else {}",
        "detail": "backend.rest_framework.templatetags.rest_framework",
        "documentation": {}
    },
    {
        "label": "get_pagination_html",
        "kind": 2,
        "importPath": "backend.rest_framework.templatetags.rest_framework",
        "description": "backend.rest_framework.templatetags.rest_framework",
        "peekOfCode": "def get_pagination_html(pager):\n    return pager.to_html()\n@register.simple_tag\ndef render_form(serializer, template_pack=None):\n    style = {'template_pack': template_pack} if template_pack else {}\n    renderer = HTMLFormRenderer()\n    return renderer.render(serializer.data, None, {'style': style})\n@register.simple_tag\ndef render_field(field, style):\n    renderer = style.get('renderer', HTMLFormRenderer())",
        "detail": "backend.rest_framework.templatetags.rest_framework",
        "documentation": {}
    },
    {
        "label": "render_form",
        "kind": 2,
        "importPath": "backend.rest_framework.templatetags.rest_framework",
        "description": "backend.rest_framework.templatetags.rest_framework",
        "peekOfCode": "def render_form(serializer, template_pack=None):\n    style = {'template_pack': template_pack} if template_pack else {}\n    renderer = HTMLFormRenderer()\n    return renderer.render(serializer.data, None, {'style': style})\n@register.simple_tag\ndef render_field(field, style):\n    renderer = style.get('renderer', HTMLFormRenderer())\n    return renderer.render_field(field, style)\n@register.simple_tag\ndef optional_login(request):",
        "detail": "backend.rest_framework.templatetags.rest_framework",
        "documentation": {}
    },
    {
        "label": "render_field",
        "kind": 2,
        "importPath": "backend.rest_framework.templatetags.rest_framework",
        "description": "backend.rest_framework.templatetags.rest_framework",
        "peekOfCode": "def render_field(field, style):\n    renderer = style.get('renderer', HTMLFormRenderer())\n    return renderer.render_field(field, style)\n@register.simple_tag\ndef optional_login(request):\n    \"\"\"\n    Include a login snippet if REST framework's login view is in the URLconf.\n    \"\"\"\n    try:\n        login_url = reverse('rest_framework:login')",
        "detail": "backend.rest_framework.templatetags.rest_framework",
        "documentation": {}
    },
    {
        "label": "optional_login",
        "kind": 2,
        "importPath": "backend.rest_framework.templatetags.rest_framework",
        "description": "backend.rest_framework.templatetags.rest_framework",
        "peekOfCode": "def optional_login(request):\n    \"\"\"\n    Include a login snippet if REST framework's login view is in the URLconf.\n    \"\"\"\n    try:\n        login_url = reverse('rest_framework:login')\n    except NoReverseMatch:\n        return ''\n    snippet = \"<li><a href='{href}?next={next}'>Log in</a></li>\"\n    snippet = format_html(snippet, href=login_url, next=escape(request.path))",
        "detail": "backend.rest_framework.templatetags.rest_framework",
        "documentation": {}
    },
    {
        "label": "optional_docs_login",
        "kind": 2,
        "importPath": "backend.rest_framework.templatetags.rest_framework",
        "description": "backend.rest_framework.templatetags.rest_framework",
        "peekOfCode": "def optional_docs_login(request):\n    \"\"\"\n    Include a login snippet if REST framework's login view is in the URLconf.\n    \"\"\"\n    try:\n        login_url = reverse('rest_framework:login')\n    except NoReverseMatch:\n        return 'log in'\n    snippet = \"<a href='{href}?next={next}'>log in</a>\"\n    snippet = format_html(snippet, href=login_url, next=escape(request.path))",
        "detail": "backend.rest_framework.templatetags.rest_framework",
        "documentation": {}
    },
    {
        "label": "optional_logout",
        "kind": 2,
        "importPath": "backend.rest_framework.templatetags.rest_framework",
        "description": "backend.rest_framework.templatetags.rest_framework",
        "peekOfCode": "def optional_logout(request, user):\n    \"\"\"\n    Include a logout snippet if REST framework's logout view is in the URLconf.\n    \"\"\"\n    try:\n        logout_url = reverse('rest_framework:logout')\n    except NoReverseMatch:\n        snippet = format_html('<li class=\"navbar-text\">{user}</li>', user=escape(user))\n        return mark_safe(snippet)\n    snippet = \"\"\"<li class=\"dropdown\">",
        "detail": "backend.rest_framework.templatetags.rest_framework",
        "documentation": {}
    },
    {
        "label": "add_query_param",
        "kind": 2,
        "importPath": "backend.rest_framework.templatetags.rest_framework",
        "description": "backend.rest_framework.templatetags.rest_framework",
        "peekOfCode": "def add_query_param(request, key, val):\n    \"\"\"\n    Add a query parameter to the current request url, and return the new url.\n    \"\"\"\n    iri = request.get_full_path()\n    uri = iri_to_uri(iri)\n    return escape(replace_query_param(uri, key, val))\n@register.filter\ndef as_string(value):\n    if value is None:",
        "detail": "backend.rest_framework.templatetags.rest_framework",
        "documentation": {}
    },
    {
        "label": "as_string",
        "kind": 2,
        "importPath": "backend.rest_framework.templatetags.rest_framework",
        "description": "backend.rest_framework.templatetags.rest_framework",
        "peekOfCode": "def as_string(value):\n    if value is None:\n        return ''\n    return '%s' % value\n@register.filter\ndef as_list_of_strings(value):\n    return [\n        '' if (item is None) else ('%s' % item)\n        for item in value\n    ]",
        "detail": "backend.rest_framework.templatetags.rest_framework",
        "documentation": {}
    },
    {
        "label": "as_list_of_strings",
        "kind": 2,
        "importPath": "backend.rest_framework.templatetags.rest_framework",
        "description": "backend.rest_framework.templatetags.rest_framework",
        "peekOfCode": "def as_list_of_strings(value):\n    return [\n        '' if (item is None) else ('%s' % item)\n        for item in value\n    ]\n@register.filter\ndef add_class(value, css_class):\n    \"\"\"\n    https://stackoverflow.com/questions/4124220/django-adding-css-classes-when-rendering-form-fields-in-a-template\n    Inserts classes into template variables that contain HTML tags,",
        "detail": "backend.rest_framework.templatetags.rest_framework",
        "documentation": {}
    },
    {
        "label": "add_class",
        "kind": 2,
        "importPath": "backend.rest_framework.templatetags.rest_framework",
        "description": "backend.rest_framework.templatetags.rest_framework",
        "peekOfCode": "def add_class(value, css_class):\n    \"\"\"\n    https://stackoverflow.com/questions/4124220/django-adding-css-classes-when-rendering-form-fields-in-a-template\n    Inserts classes into template variables that contain HTML tags,\n    useful for modifying forms without needing to change the Form objects.\n    Usage:\n        {{ field.label_tag|add_class:\"control-label\" }}\n    In the case of REST Framework, the filter is used to add Bootstrap-specific\n    classes to the forms.\n    \"\"\"",
        "detail": "backend.rest_framework.templatetags.rest_framework",
        "documentation": {}
    },
    {
        "label": "format_value",
        "kind": 2,
        "importPath": "backend.rest_framework.templatetags.rest_framework",
        "description": "backend.rest_framework.templatetags.rest_framework",
        "peekOfCode": "def format_value(value):\n    if getattr(value, 'is_hyperlink', False):\n        name = str(value.obj)\n        return mark_safe('<a href=%s>%s</a>' % (value, escape(name)))\n    if value is None or isinstance(value, bool):\n        return mark_safe('<code>%s</code>' % {True: 'true', False: 'false', None: 'null'}[value])\n    elif isinstance(value, list):\n        if any(isinstance(item, (list, dict)) for item in value):\n            template = loader.get_template('rest_framework/admin/list_value.html')\n        else:",
        "detail": "backend.rest_framework.templatetags.rest_framework",
        "documentation": {}
    },
    {
        "label": "items",
        "kind": 2,
        "importPath": "backend.rest_framework.templatetags.rest_framework",
        "description": "backend.rest_framework.templatetags.rest_framework",
        "peekOfCode": "def items(value):\n    \"\"\"\n    Simple filter to return the items of the dict. Useful when the dict may\n    have a key 'items' which is resolved first in Django template dot-notation\n    lookup.  See issue #4931\n    Also see: https://stackoverflow.com/questions/15416662/django-template-loop-over-dictionary-items-with-items-as-key\n    \"\"\"\n    if value is None:\n        # `{% for k, v in value.items %}` doesn't raise when value is None or\n        # not in the context, so neither should `{% for k, v in value|items %}`",
        "detail": "backend.rest_framework.templatetags.rest_framework",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 2,
        "importPath": "backend.rest_framework.templatetags.rest_framework",
        "description": "backend.rest_framework.templatetags.rest_framework",
        "peekOfCode": "def data(value):\n    \"\"\"\n    Simple filter to access `data` attribute of object,\n    specifically coreapi.Document.\n    As per `items` filter above, allows accessing `document.data` when\n    Document contains Link keyed-at \"data\".\n    See issue #5395\n    \"\"\"\n    return value.data\n@register.filter",
        "detail": "backend.rest_framework.templatetags.rest_framework",
        "documentation": {}
    },
    {
        "label": "schema_links",
        "kind": 2,
        "importPath": "backend.rest_framework.templatetags.rest_framework",
        "description": "backend.rest_framework.templatetags.rest_framework",
        "peekOfCode": "def schema_links(section, sec_key=None):\n    \"\"\"\n    Recursively find every link in a schema, even nested.\n    \"\"\"\n    NESTED_FORMAT = '%s > %s'  # this format is used in docs/js/api.js:normalizeKeys\n    links = section.links\n    if section.data:\n        data = section.data.items()\n        for sub_section_key, sub_section in data:\n            new_links = schema_links(sub_section, sec_key=sub_section_key)",
        "detail": "backend.rest_framework.templatetags.rest_framework",
        "documentation": {}
    },
    {
        "label": "add_nested_class",
        "kind": 2,
        "importPath": "backend.rest_framework.templatetags.rest_framework",
        "description": "backend.rest_framework.templatetags.rest_framework",
        "peekOfCode": "def add_nested_class(value):\n    if isinstance(value, dict):\n        return 'class=nested'\n    if isinstance(value, list) and any(isinstance(item, (list, dict)) for item in value):\n        return 'class=nested'\n    return ''\n# Bunch of stuff cloned from urlize\nTRAILING_PUNCTUATION = ['.', ',', ':', ';', '.)', '\"', \"']\", \"'}\", \"'\"]\nWRAPPING_PUNCTUATION = [('(', ')'), ('<', '>'), ('[', ']'), ('&lt;', '&gt;'),\n                        ('\"', '\"'), (\"'\", \"'\")]",
        "detail": "backend.rest_framework.templatetags.rest_framework",
        "documentation": {}
    },
    {
        "label": "smart_urlquote_wrapper",
        "kind": 2,
        "importPath": "backend.rest_framework.templatetags.rest_framework",
        "description": "backend.rest_framework.templatetags.rest_framework",
        "peekOfCode": "def smart_urlquote_wrapper(matched_url):\n    \"\"\"\n    Simple wrapper for smart_urlquote. ValueError(\"Invalid IPv6 URL\") can\n    be raised here, see issue #1386\n    \"\"\"\n    try:\n        return smart_urlquote(matched_url)\n    except ValueError:\n        return None\n@register.filter",
        "detail": "backend.rest_framework.templatetags.rest_framework",
        "documentation": {}
    },
    {
        "label": "break_long_headers",
        "kind": 2,
        "importPath": "backend.rest_framework.templatetags.rest_framework",
        "description": "backend.rest_framework.templatetags.rest_framework",
        "peekOfCode": "def break_long_headers(header):\n    \"\"\"\n    Breaks headers longer than 160 characters (~page length)\n    when possible (are comma separated)\n    \"\"\"\n    if len(header) > 160 and ',' in header:\n        header = mark_safe('<br> ' + ', <br>'.join(header.split(',')))\n    return header",
        "detail": "backend.rest_framework.templatetags.rest_framework",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 5,
        "importPath": "backend.rest_framework.templatetags.rest_framework",
        "description": "backend.rest_framework.templatetags.rest_framework",
        "peekOfCode": "register = template.Library()\n# Regex for adding classes to html snippets\nclass_re = re.compile(r'(?<=class=[\"\\'])(.*)(?=[\"\\'])')\n@register.tag(name='code')\ndef highlight_code(parser, token):\n    code = token.split_contents()[-1]\n    nodelist = parser.parse(('endcode',))\n    parser.delete_first_token()\n    return CodeNode(code, nodelist)\nclass CodeNode(template.Node):",
        "detail": "backend.rest_framework.templatetags.rest_framework",
        "documentation": {}
    },
    {
        "label": "class_re",
        "kind": 5,
        "importPath": "backend.rest_framework.templatetags.rest_framework",
        "description": "backend.rest_framework.templatetags.rest_framework",
        "peekOfCode": "class_re = re.compile(r'(?<=class=[\"\\'])(.*)(?=[\"\\'])')\n@register.tag(name='code')\ndef highlight_code(parser, token):\n    code = token.split_contents()[-1]\n    nodelist = parser.parse(('endcode',))\n    parser.delete_first_token()\n    return CodeNode(code, nodelist)\nclass CodeNode(template.Node):\n    style = 'emacs'\n    def __init__(self, lang, code):",
        "detail": "backend.rest_framework.templatetags.rest_framework",
        "documentation": {}
    },
    {
        "label": "TRAILING_PUNCTUATION",
        "kind": 5,
        "importPath": "backend.rest_framework.templatetags.rest_framework",
        "description": "backend.rest_framework.templatetags.rest_framework",
        "peekOfCode": "TRAILING_PUNCTUATION = ['.', ',', ':', ';', '.)', '\"', \"']\", \"'}\", \"'\"]\nWRAPPING_PUNCTUATION = [('(', ')'), ('<', '>'), ('[', ']'), ('&lt;', '&gt;'),\n                        ('\"', '\"'), (\"'\", \"'\")]\nword_split_re = re.compile(r'(\\s+)')\nsimple_url_re = re.compile(r'^https?://\\[?\\w', re.IGNORECASE)\nsimple_url_2_re = re.compile(r'^www\\.|^(?!http)\\w[^@]+\\.(com|edu|gov|int|mil|net|org)$', re.IGNORECASE)\nsimple_email_re = re.compile(r'^\\S+@\\S+\\.\\S+$')\ndef smart_urlquote_wrapper(matched_url):\n    \"\"\"\n    Simple wrapper for smart_urlquote. ValueError(\"Invalid IPv6 URL\") can",
        "detail": "backend.rest_framework.templatetags.rest_framework",
        "documentation": {}
    },
    {
        "label": "WRAPPING_PUNCTUATION",
        "kind": 5,
        "importPath": "backend.rest_framework.templatetags.rest_framework",
        "description": "backend.rest_framework.templatetags.rest_framework",
        "peekOfCode": "WRAPPING_PUNCTUATION = [('(', ')'), ('<', '>'), ('[', ']'), ('&lt;', '&gt;'),\n                        ('\"', '\"'), (\"'\", \"'\")]\nword_split_re = re.compile(r'(\\s+)')\nsimple_url_re = re.compile(r'^https?://\\[?\\w', re.IGNORECASE)\nsimple_url_2_re = re.compile(r'^www\\.|^(?!http)\\w[^@]+\\.(com|edu|gov|int|mil|net|org)$', re.IGNORECASE)\nsimple_email_re = re.compile(r'^\\S+@\\S+\\.\\S+$')\ndef smart_urlquote_wrapper(matched_url):\n    \"\"\"\n    Simple wrapper for smart_urlquote. ValueError(\"Invalid IPv6 URL\") can\n    be raised here, see issue #1386",
        "detail": "backend.rest_framework.templatetags.rest_framework",
        "documentation": {}
    },
    {
        "label": "word_split_re",
        "kind": 5,
        "importPath": "backend.rest_framework.templatetags.rest_framework",
        "description": "backend.rest_framework.templatetags.rest_framework",
        "peekOfCode": "word_split_re = re.compile(r'(\\s+)')\nsimple_url_re = re.compile(r'^https?://\\[?\\w', re.IGNORECASE)\nsimple_url_2_re = re.compile(r'^www\\.|^(?!http)\\w[^@]+\\.(com|edu|gov|int|mil|net|org)$', re.IGNORECASE)\nsimple_email_re = re.compile(r'^\\S+@\\S+\\.\\S+$')\ndef smart_urlquote_wrapper(matched_url):\n    \"\"\"\n    Simple wrapper for smart_urlquote. ValueError(\"Invalid IPv6 URL\") can\n    be raised here, see issue #1386\n    \"\"\"\n    try:",
        "detail": "backend.rest_framework.templatetags.rest_framework",
        "documentation": {}
    },
    {
        "label": "simple_url_re",
        "kind": 5,
        "importPath": "backend.rest_framework.templatetags.rest_framework",
        "description": "backend.rest_framework.templatetags.rest_framework",
        "peekOfCode": "simple_url_re = re.compile(r'^https?://\\[?\\w', re.IGNORECASE)\nsimple_url_2_re = re.compile(r'^www\\.|^(?!http)\\w[^@]+\\.(com|edu|gov|int|mil|net|org)$', re.IGNORECASE)\nsimple_email_re = re.compile(r'^\\S+@\\S+\\.\\S+$')\ndef smart_urlquote_wrapper(matched_url):\n    \"\"\"\n    Simple wrapper for smart_urlquote. ValueError(\"Invalid IPv6 URL\") can\n    be raised here, see issue #1386\n    \"\"\"\n    try:\n        return smart_urlquote(matched_url)",
        "detail": "backend.rest_framework.templatetags.rest_framework",
        "documentation": {}
    },
    {
        "label": "simple_url_2_re",
        "kind": 5,
        "importPath": "backend.rest_framework.templatetags.rest_framework",
        "description": "backend.rest_framework.templatetags.rest_framework",
        "peekOfCode": "simple_url_2_re = re.compile(r'^www\\.|^(?!http)\\w[^@]+\\.(com|edu|gov|int|mil|net|org)$', re.IGNORECASE)\nsimple_email_re = re.compile(r'^\\S+@\\S+\\.\\S+$')\ndef smart_urlquote_wrapper(matched_url):\n    \"\"\"\n    Simple wrapper for smart_urlquote. ValueError(\"Invalid IPv6 URL\") can\n    be raised here, see issue #1386\n    \"\"\"\n    try:\n        return smart_urlquote(matched_url)\n    except ValueError:",
        "detail": "backend.rest_framework.templatetags.rest_framework",
        "documentation": {}
    },
    {
        "label": "simple_email_re",
        "kind": 5,
        "importPath": "backend.rest_framework.templatetags.rest_framework",
        "description": "backend.rest_framework.templatetags.rest_framework",
        "peekOfCode": "simple_email_re = re.compile(r'^\\S+@\\S+\\.\\S+$')\ndef smart_urlquote_wrapper(matched_url):\n    \"\"\"\n    Simple wrapper for smart_urlquote. ValueError(\"Invalid IPv6 URL\") can\n    be raised here, see issue #1386\n    \"\"\"\n    try:\n        return smart_urlquote(matched_url)\n    except ValueError:\n        return None",
        "detail": "backend.rest_framework.templatetags.rest_framework",
        "documentation": {}
    },
    {
        "label": "get_breadcrumbs",
        "kind": 2,
        "importPath": "backend.rest_framework.utils.breadcrumbs",
        "description": "backend.rest_framework.utils.breadcrumbs",
        "peekOfCode": "def get_breadcrumbs(url, request=None):\n    \"\"\"\n    Given a url returns a list of breadcrumbs, which are each a\n    tuple of (name, url).\n    \"\"\"\n    from rest_framework.reverse import preserve_builtin_query_params\n    from rest_framework.views import APIView\n    def breadcrumbs_recursive(url, breadcrumbs_list, prefix, seen):\n        \"\"\"\n        Add tuples of (name, url) to the breadcrumbs list,",
        "detail": "backend.rest_framework.utils.breadcrumbs",
        "documentation": {}
    },
    {
        "label": "JSONEncoder",
        "kind": 6,
        "importPath": "backend.rest_framework.utils.encoders",
        "description": "backend.rest_framework.utils.encoders",
        "peekOfCode": "class JSONEncoder(json.JSONEncoder):\n    \"\"\"\n    JSONEncoder subclass that knows how to encode date/time/timedelta,\n    decimal types, generators and other basic python objects.\n    \"\"\"\n    def default(self, obj):\n        # For Date Time string spec, see ECMA 262\n        # https://ecma-international.org/ecma-262/5.1/#sec-15.9.1.15\n        if isinstance(obj, Promise):\n            return force_str(obj)",
        "detail": "backend.rest_framework.utils.encoders",
        "documentation": {}
    },
    {
        "label": "ClassLookupDict",
        "kind": 6,
        "importPath": "backend.rest_framework.utils.field_mapping",
        "description": "backend.rest_framework.utils.field_mapping",
        "peekOfCode": "class ClassLookupDict:\n    \"\"\"\n    Takes a dictionary with classes as keys.\n    Lookups against this object will traverses the object's inheritance\n    hierarchy in method resolution order, and returns the first matching value\n    from the dictionary or raises a KeyError if nothing matches.\n    \"\"\"\n    def __init__(self, mapping):\n        self.mapping = mapping\n    def __getitem__(self, key):",
        "detail": "backend.rest_framework.utils.field_mapping",
        "documentation": {}
    },
    {
        "label": "needs_label",
        "kind": 2,
        "importPath": "backend.rest_framework.utils.field_mapping",
        "description": "backend.rest_framework.utils.field_mapping",
        "peekOfCode": "def needs_label(model_field, field_name):\n    \"\"\"\n    Returns `True` if the label based on the model's verbose name\n    is not equal to the default label it would have based on it's field name.\n    \"\"\"\n    default_label = field_name.replace('_', ' ').capitalize()\n    return capfirst(model_field.verbose_name) != default_label\ndef get_detail_view_name(model):\n    \"\"\"\n    Given a model class, return the view name to use for URL relationships",
        "detail": "backend.rest_framework.utils.field_mapping",
        "documentation": {}
    },
    {
        "label": "get_detail_view_name",
        "kind": 2,
        "importPath": "backend.rest_framework.utils.field_mapping",
        "description": "backend.rest_framework.utils.field_mapping",
        "peekOfCode": "def get_detail_view_name(model):\n    \"\"\"\n    Given a model class, return the view name to use for URL relationships\n    that refer to instances of the model.\n    \"\"\"\n    return '%(model_name)s-detail' % {\n        'model_name': model._meta.object_name.lower()\n    }\ndef get_field_kwargs(field_name, model_field):\n    \"\"\"",
        "detail": "backend.rest_framework.utils.field_mapping",
        "documentation": {}
    },
    {
        "label": "get_field_kwargs",
        "kind": 2,
        "importPath": "backend.rest_framework.utils.field_mapping",
        "description": "backend.rest_framework.utils.field_mapping",
        "peekOfCode": "def get_field_kwargs(field_name, model_field):\n    \"\"\"\n    Creates a default instance of a basic non-relational field.\n    \"\"\"\n    kwargs = {}\n    validator_kwarg = list(model_field.validators)\n    # The following will only be used by ModelField classes.\n    # Gets removed for everything else.\n    kwargs['model_field'] = model_field\n    if model_field.verbose_name and needs_label(model_field, field_name):",
        "detail": "backend.rest_framework.utils.field_mapping",
        "documentation": {}
    },
    {
        "label": "get_relation_kwargs",
        "kind": 2,
        "importPath": "backend.rest_framework.utils.field_mapping",
        "description": "backend.rest_framework.utils.field_mapping",
        "peekOfCode": "def get_relation_kwargs(field_name, relation_info):\n    \"\"\"\n    Creates a default instance of a flat relational field.\n    \"\"\"\n    model_field, related_model, to_many, to_field, has_through_model, reverse = relation_info\n    kwargs = {\n        'queryset': related_model._default_manager,\n        'view_name': get_detail_view_name(related_model)\n    }\n    if to_many:",
        "detail": "backend.rest_framework.utils.field_mapping",
        "documentation": {}
    },
    {
        "label": "get_nested_relation_kwargs",
        "kind": 2,
        "importPath": "backend.rest_framework.utils.field_mapping",
        "description": "backend.rest_framework.utils.field_mapping",
        "peekOfCode": "def get_nested_relation_kwargs(relation_info):\n    kwargs = {'read_only': True}\n    if relation_info.to_many:\n        kwargs['many'] = True\n    return kwargs\ndef get_url_kwargs(model_field):\n    return {\n        'view_name': get_detail_view_name(model_field)\n    }",
        "detail": "backend.rest_framework.utils.field_mapping",
        "documentation": {}
    },
    {
        "label": "get_url_kwargs",
        "kind": 2,
        "importPath": "backend.rest_framework.utils.field_mapping",
        "description": "backend.rest_framework.utils.field_mapping",
        "peekOfCode": "def get_url_kwargs(model_field):\n    return {\n        'view_name': get_detail_view_name(model_field)\n    }",
        "detail": "backend.rest_framework.utils.field_mapping",
        "documentation": {}
    },
    {
        "label": "NUMERIC_FIELD_TYPES",
        "kind": 5,
        "importPath": "backend.rest_framework.utils.field_mapping",
        "description": "backend.rest_framework.utils.field_mapping",
        "peekOfCode": "NUMERIC_FIELD_TYPES = (\n    models.IntegerField, models.FloatField, models.DecimalField, models.DurationField,\n)\nclass ClassLookupDict:\n    \"\"\"\n    Takes a dictionary with classes as keys.\n    Lookups against this object will traverses the object's inheritance\n    hierarchy in method resolution order, and returns the first matching value\n    from the dictionary or raises a KeyError if nothing matches.\n    \"\"\"",
        "detail": "backend.rest_framework.utils.field_mapping",
        "documentation": {}
    },
    {
        "label": "lazy_format",
        "kind": 6,
        "importPath": "backend.rest_framework.utils.formatting",
        "description": "backend.rest_framework.utils.formatting",
        "peekOfCode": "class lazy_format:\n    \"\"\"\n    Delay formatting until it's actually needed.\n    Useful when the format string or one of the arguments is lazy.\n    Not using Django's lazy because it is too slow.\n    \"\"\"\n    __slots__ = ('format_string', 'args', 'kwargs', 'result')\n    def __init__(self, format_string, *args, **kwargs):\n        self.result = None\n        self.format_string = format_string",
        "detail": "backend.rest_framework.utils.formatting",
        "documentation": {}
    },
    {
        "label": "remove_trailing_string",
        "kind": 2,
        "importPath": "backend.rest_framework.utils.formatting",
        "description": "backend.rest_framework.utils.formatting",
        "peekOfCode": "def remove_trailing_string(content, trailing):\n    \"\"\"\n    Strip trailing component `trailing` from `content` if it exists.\n    Used when generating names from view classes.\n    \"\"\"\n    if content.endswith(trailing) and content != trailing:\n        return content[:-len(trailing)]\n    return content\ndef dedent(content):\n    \"\"\"",
        "detail": "backend.rest_framework.utils.formatting",
        "documentation": {}
    },
    {
        "label": "dedent",
        "kind": 2,
        "importPath": "backend.rest_framework.utils.formatting",
        "description": "backend.rest_framework.utils.formatting",
        "peekOfCode": "def dedent(content):\n    \"\"\"\n    Remove leading indent from a block of text.\n    Used when generating descriptions from docstrings.\n    Note that python's `textwrap.dedent` doesn't quite cut it,\n    as it fails to dedent multiline docstrings that include\n    unindented text on the initial line.\n    \"\"\"\n    content = force_str(content)\n    lines = [line for line in content.splitlines()[1:] if line.lstrip()]",
        "detail": "backend.rest_framework.utils.formatting",
        "documentation": {}
    },
    {
        "label": "camelcase_to_spaces",
        "kind": 2,
        "importPath": "backend.rest_framework.utils.formatting",
        "description": "backend.rest_framework.utils.formatting",
        "peekOfCode": "def camelcase_to_spaces(content):\n    \"\"\"\n    Translate 'CamelCaseNames' to 'Camel Case Names'.\n    Used when generating names from view classes.\n    \"\"\"\n    camelcase_boundary = '(((?<=[a-z])[A-Z])|([A-Z](?![A-Z]|$)))'\n    content = re.sub(camelcase_boundary, ' \\\\1', content).strip()\n    return ' '.join(content.split('_')).title()\ndef markup_description(description):\n    \"\"\"",
        "detail": "backend.rest_framework.utils.formatting",
        "documentation": {}
    },
    {
        "label": "markup_description",
        "kind": 2,
        "importPath": "backend.rest_framework.utils.formatting",
        "description": "backend.rest_framework.utils.formatting",
        "peekOfCode": "def markup_description(description):\n    \"\"\"\n    Apply HTML markup to the given description.\n    \"\"\"\n    if apply_markdown:\n        description = apply_markdown(description)\n    else:\n        description = escape(description).replace('\\n', '<br />')\n        description = '<p>' + description + '</p>'\n    return mark_safe(description)",
        "detail": "backend.rest_framework.utils.formatting",
        "documentation": {}
    },
    {
        "label": "is_html_input",
        "kind": 2,
        "importPath": "backend.rest_framework.utils.html",
        "description": "backend.rest_framework.utils.html",
        "peekOfCode": "def is_html_input(dictionary):\n    # MultiDict type datastructures are used to represent HTML form input,\n    # which may have more than one value for each key.\n    return hasattr(dictionary, 'getlist')\ndef parse_html_list(dictionary, prefix='', default=None):\n    \"\"\"\n    Used to support list values in HTML forms.\n    Supports lists of primitives and/or dictionaries.\n    * List of primitives.\n    {",
        "detail": "backend.rest_framework.utils.html",
        "documentation": {}
    },
    {
        "label": "parse_html_list",
        "kind": 2,
        "importPath": "backend.rest_framework.utils.html",
        "description": "backend.rest_framework.utils.html",
        "peekOfCode": "def parse_html_list(dictionary, prefix='', default=None):\n    \"\"\"\n    Used to support list values in HTML forms.\n    Supports lists of primitives and/or dictionaries.\n    * List of primitives.\n    {\n        '[0]': 'abc',\n        '[1]': 'def',\n        '[2]': 'hij'\n    }",
        "detail": "backend.rest_framework.utils.html",
        "documentation": {}
    },
    {
        "label": "parse_html_dict",
        "kind": 2,
        "importPath": "backend.rest_framework.utils.html",
        "description": "backend.rest_framework.utils.html",
        "peekOfCode": "def parse_html_dict(dictionary, prefix=''):\n    \"\"\"\n    Used to support dictionary values in HTML forms.\n    {\n        'profile.username': 'example',\n        'profile.email': 'example@example.com',\n    }\n        -->\n    {\n        'profile': {",
        "detail": "backend.rest_framework.utils.html",
        "documentation": {}
    },
    {
        "label": "datetime_formats",
        "kind": 2,
        "importPath": "backend.rest_framework.utils.humanize_datetime",
        "description": "backend.rest_framework.utils.humanize_datetime",
        "peekOfCode": "def datetime_formats(formats):\n    format = ', '.join(formats).replace(\n        ISO_8601,\n        'YYYY-MM-DDThh:mm[:ss[.uuuuuu]][+HH:MM|-HH:MM|Z]'\n    )\n    return humanize_strptime(format)\ndef date_formats(formats):\n    format = ', '.join(formats).replace(ISO_8601, 'YYYY-MM-DD')\n    return humanize_strptime(format)\ndef time_formats(formats):",
        "detail": "backend.rest_framework.utils.humanize_datetime",
        "documentation": {}
    },
    {
        "label": "date_formats",
        "kind": 2,
        "importPath": "backend.rest_framework.utils.humanize_datetime",
        "description": "backend.rest_framework.utils.humanize_datetime",
        "peekOfCode": "def date_formats(formats):\n    format = ', '.join(formats).replace(ISO_8601, 'YYYY-MM-DD')\n    return humanize_strptime(format)\ndef time_formats(formats):\n    format = ', '.join(formats).replace(ISO_8601, 'hh:mm[:ss[.uuuuuu]]')\n    return humanize_strptime(format)\ndef humanize_strptime(format_string):\n    # Note that we're missing some of the locale specific mappings that\n    # don't really make sense.\n    mapping = {",
        "detail": "backend.rest_framework.utils.humanize_datetime",
        "documentation": {}
    },
    {
        "label": "time_formats",
        "kind": 2,
        "importPath": "backend.rest_framework.utils.humanize_datetime",
        "description": "backend.rest_framework.utils.humanize_datetime",
        "peekOfCode": "def time_formats(formats):\n    format = ', '.join(formats).replace(ISO_8601, 'hh:mm[:ss[.uuuuuu]]')\n    return humanize_strptime(format)\ndef humanize_strptime(format_string):\n    # Note that we're missing some of the locale specific mappings that\n    # don't really make sense.\n    mapping = {\n        \"%Y\": \"YYYY\",\n        \"%y\": \"YY\",\n        \"%m\": \"MM\",",
        "detail": "backend.rest_framework.utils.humanize_datetime",
        "documentation": {}
    },
    {
        "label": "humanize_strptime",
        "kind": 2,
        "importPath": "backend.rest_framework.utils.humanize_datetime",
        "description": "backend.rest_framework.utils.humanize_datetime",
        "peekOfCode": "def humanize_strptime(format_string):\n    # Note that we're missing some of the locale specific mappings that\n    # don't really make sense.\n    mapping = {\n        \"%Y\": \"YYYY\",\n        \"%y\": \"YY\",\n        \"%m\": \"MM\",\n        \"%b\": \"[Jan-Dec]\",\n        \"%B\": \"[January-December]\",\n        \"%d\": \"DD\",",
        "detail": "backend.rest_framework.utils.humanize_datetime",
        "documentation": {}
    },
    {
        "label": "strict_constant",
        "kind": 2,
        "importPath": "backend.rest_framework.utils.json",
        "description": "backend.rest_framework.utils.json",
        "peekOfCode": "def strict_constant(o):\n    raise ValueError('Out of range float values are not JSON compliant: ' + repr(o))\n@functools.wraps(json.dump)\ndef dump(*args, **kwargs):\n    kwargs.setdefault('allow_nan', False)\n    return json.dump(*args, **kwargs)\n@functools.wraps(json.dumps)\ndef dumps(*args, **kwargs):\n    kwargs.setdefault('allow_nan', False)\n    return json.dumps(*args, **kwargs)",
        "detail": "backend.rest_framework.utils.json",
        "documentation": {}
    },
    {
        "label": "dump",
        "kind": 2,
        "importPath": "backend.rest_framework.utils.json",
        "description": "backend.rest_framework.utils.json",
        "peekOfCode": "def dump(*args, **kwargs):\n    kwargs.setdefault('allow_nan', False)\n    return json.dump(*args, **kwargs)\n@functools.wraps(json.dumps)\ndef dumps(*args, **kwargs):\n    kwargs.setdefault('allow_nan', False)\n    return json.dumps(*args, **kwargs)\n@functools.wraps(json.load)\ndef load(*args, **kwargs):\n    kwargs.setdefault('parse_constant', strict_constant)",
        "detail": "backend.rest_framework.utils.json",
        "documentation": {}
    },
    {
        "label": "dumps",
        "kind": 2,
        "importPath": "backend.rest_framework.utils.json",
        "description": "backend.rest_framework.utils.json",
        "peekOfCode": "def dumps(*args, **kwargs):\n    kwargs.setdefault('allow_nan', False)\n    return json.dumps(*args, **kwargs)\n@functools.wraps(json.load)\ndef load(*args, **kwargs):\n    kwargs.setdefault('parse_constant', strict_constant)\n    return json.load(*args, **kwargs)\n@functools.wraps(json.loads)\ndef loads(*args, **kwargs):\n    kwargs.setdefault('parse_constant', strict_constant)",
        "detail": "backend.rest_framework.utils.json",
        "documentation": {}
    },
    {
        "label": "load",
        "kind": 2,
        "importPath": "backend.rest_framework.utils.json",
        "description": "backend.rest_framework.utils.json",
        "peekOfCode": "def load(*args, **kwargs):\n    kwargs.setdefault('parse_constant', strict_constant)\n    return json.load(*args, **kwargs)\n@functools.wraps(json.loads)\ndef loads(*args, **kwargs):\n    kwargs.setdefault('parse_constant', strict_constant)\n    return json.loads(*args, **kwargs)",
        "detail": "backend.rest_framework.utils.json",
        "documentation": {}
    },
    {
        "label": "loads",
        "kind": 2,
        "importPath": "backend.rest_framework.utils.json",
        "description": "backend.rest_framework.utils.json",
        "peekOfCode": "def loads(*args, **kwargs):\n    kwargs.setdefault('parse_constant', strict_constant)\n    return json.loads(*args, **kwargs)",
        "detail": "backend.rest_framework.utils.json",
        "documentation": {}
    },
    {
        "label": "_MediaType",
        "kind": 6,
        "importPath": "backend.rest_framework.utils.mediatypes",
        "description": "backend.rest_framework.utils.mediatypes",
        "peekOfCode": "class _MediaType:\n    def __init__(self, media_type_str):\n        self.orig = '' if (media_type_str is None) else media_type_str\n        self.full_type, self.params = parse_header(self.orig.encode(HTTP_HEADER_ENCODING))\n        self.main_type, sep, self.sub_type = self.full_type.partition('/')\n    def match(self, other):\n        \"\"\"Return true if this MediaType satisfies the given MediaType.\"\"\"\n        for key in self.params:\n            if key != 'q' and other.params.get(key, None) != self.params.get(key, None):\n                return False",
        "detail": "backend.rest_framework.utils.mediatypes",
        "documentation": {}
    },
    {
        "label": "media_type_matches",
        "kind": 2,
        "importPath": "backend.rest_framework.utils.mediatypes",
        "description": "backend.rest_framework.utils.mediatypes",
        "peekOfCode": "def media_type_matches(lhs, rhs):\n    \"\"\"\n    Returns ``True`` if the media type in the first argument <= the\n    media type in the second argument.  The media types are strings\n    as described by the HTTP spec.\n    Valid media type strings include:\n    'application/json; indent=4'\n    'application/json'\n    'text/*'\n    '*/*'",
        "detail": "backend.rest_framework.utils.mediatypes",
        "documentation": {}
    },
    {
        "label": "order_by_precedence",
        "kind": 2,
        "importPath": "backend.rest_framework.utils.mediatypes",
        "description": "backend.rest_framework.utils.mediatypes",
        "peekOfCode": "def order_by_precedence(media_type_lst):\n    \"\"\"\n    Returns a list of sets of media type strings, ordered by precedence.\n    Precedence is determined by how specific a media type is:\n    3. 'type/subtype; param=val'\n    2. 'type/subtype'\n    1. 'type/*'\n    0. '*/*'\n    \"\"\"\n    ret = [set(), set(), set(), set()]",
        "detail": "backend.rest_framework.utils.mediatypes",
        "documentation": {}
    },
    {
        "label": "get_field_info",
        "kind": 2,
        "importPath": "backend.rest_framework.utils.model_meta",
        "description": "backend.rest_framework.utils.model_meta",
        "peekOfCode": "def get_field_info(model):\n    \"\"\"\n    Given a model class, returns a `FieldInfo` instance, which is a\n    `namedtuple`, containing metadata about the various field types on the model\n    including information about their relationships.\n    \"\"\"\n    opts = model._meta.concrete_model._meta\n    pk = _get_pk(opts)\n    fields = _get_fields(opts)\n    forward_relations = _get_forward_relationships(opts)",
        "detail": "backend.rest_framework.utils.model_meta",
        "documentation": {}
    },
    {
        "label": "is_abstract_model",
        "kind": 2,
        "importPath": "backend.rest_framework.utils.model_meta",
        "description": "backend.rest_framework.utils.model_meta",
        "peekOfCode": "def is_abstract_model(model):\n    \"\"\"\n    Given a model class, returns a boolean True if it is abstract and False if it is not.\n    \"\"\"\n    return hasattr(model, '_meta') and hasattr(model._meta, 'abstract') and model._meta.abstract",
        "detail": "backend.rest_framework.utils.model_meta",
        "documentation": {}
    },
    {
        "label": "FieldInfo",
        "kind": 5,
        "importPath": "backend.rest_framework.utils.model_meta",
        "description": "backend.rest_framework.utils.model_meta",
        "peekOfCode": "FieldInfo = namedtuple('FieldResult', [\n    'pk',  # Model field instance\n    'fields',  # Dict of field name -> model field instance\n    'forward_relations',  # Dict of field name -> RelationInfo\n    'reverse_relations',  # Dict of field name -> RelationInfo\n    'fields_and_pk',  # Shortcut for 'pk' + 'fields'\n    'relations'  # Shortcut for 'forward_relations' + 'reverse_relations'\n])\nRelationInfo = namedtuple('RelationInfo', [\n    'model_field',",
        "detail": "backend.rest_framework.utils.model_meta",
        "documentation": {}
    },
    {
        "label": "RelationInfo",
        "kind": 5,
        "importPath": "backend.rest_framework.utils.model_meta",
        "description": "backend.rest_framework.utils.model_meta",
        "peekOfCode": "RelationInfo = namedtuple('RelationInfo', [\n    'model_field',\n    'related_model',\n    'to_many',\n    'to_field',\n    'has_through_model',\n    'reverse'\n])\ndef get_field_info(model):\n    \"\"\"",
        "detail": "backend.rest_framework.utils.model_meta",
        "documentation": {}
    },
    {
        "label": "manager_repr",
        "kind": 2,
        "importPath": "backend.rest_framework.utils.representation",
        "description": "backend.rest_framework.utils.representation",
        "peekOfCode": "def manager_repr(value):\n    model = value.model\n    opts = model._meta\n    names_and_managers = [\n        (manager.name, manager)\n        for manager\n        in opts.managers\n    ]\n    for manager_name, manager_instance in names_and_managers:\n        if manager_instance == value:",
        "detail": "backend.rest_framework.utils.representation",
        "documentation": {}
    },
    {
        "label": "smart_repr",
        "kind": 2,
        "importPath": "backend.rest_framework.utils.representation",
        "description": "backend.rest_framework.utils.representation",
        "peekOfCode": "def smart_repr(value):\n    if isinstance(value, models.Manager):\n        return manager_repr(value)\n    if isinstance(value, Promise) and value._delegate_text:\n        value = force_str(value)\n    value = repr(value)\n    # Representations like u'help text'\n    # should simply be presented as 'help text'\n    if value.startswith(\"u'\") and value.endswith(\"'\"):\n        return value[1:]",
        "detail": "backend.rest_framework.utils.representation",
        "documentation": {}
    },
    {
        "label": "field_repr",
        "kind": 2,
        "importPath": "backend.rest_framework.utils.representation",
        "description": "backend.rest_framework.utils.representation",
        "peekOfCode": "def field_repr(field, force_many=False):\n    kwargs = field._kwargs\n    if force_many:\n        kwargs = kwargs.copy()\n        kwargs['many'] = True\n        kwargs.pop('child', None)\n    arg_string = ', '.join([smart_repr(val) for val in field._args])\n    kwarg_string = ', '.join([\n        '%s=%s' % (key, smart_repr(val))\n        for key, val in sorted(kwargs.items())",
        "detail": "backend.rest_framework.utils.representation",
        "documentation": {}
    },
    {
        "label": "serializer_repr",
        "kind": 2,
        "importPath": "backend.rest_framework.utils.representation",
        "description": "backend.rest_framework.utils.representation",
        "peekOfCode": "def serializer_repr(serializer, indent, force_many=None):\n    ret = field_repr(serializer, force_many) + ':'\n    indent_str = '    ' * indent\n    if force_many:\n        fields = force_many.fields\n    else:\n        fields = serializer.fields\n    for field_name, field in fields.items():\n        ret += '\\n' + indent_str + field_name + ' = '\n        if hasattr(field, 'fields'):",
        "detail": "backend.rest_framework.utils.representation",
        "documentation": {}
    },
    {
        "label": "list_repr",
        "kind": 2,
        "importPath": "backend.rest_framework.utils.representation",
        "description": "backend.rest_framework.utils.representation",
        "peekOfCode": "def list_repr(serializer, indent):\n    child = serializer.child\n    if hasattr(child, 'fields'):\n        return serializer_repr(serializer, indent, force_many=child)\n    return field_repr(serializer)",
        "detail": "backend.rest_framework.utils.representation",
        "documentation": {}
    },
    {
        "label": "ReturnDict",
        "kind": 6,
        "importPath": "backend.rest_framework.utils.serializer_helpers",
        "description": "backend.rest_framework.utils.serializer_helpers",
        "peekOfCode": "class ReturnDict(OrderedDict):\n    \"\"\"\n    Return object from `serializer.data` for the `Serializer` class.\n    Includes a backlink to the serializer instance for renderers\n    to use if they need richer field information.\n    \"\"\"\n    def __init__(self, *args, **kwargs):\n        self.serializer = kwargs.pop('serializer')\n        super().__init__(*args, **kwargs)\n    def copy(self):",
        "detail": "backend.rest_framework.utils.serializer_helpers",
        "documentation": {}
    },
    {
        "label": "ReturnList",
        "kind": 6,
        "importPath": "backend.rest_framework.utils.serializer_helpers",
        "description": "backend.rest_framework.utils.serializer_helpers",
        "peekOfCode": "class ReturnList(list):\n    \"\"\"\n    Return object from `serializer.data` for the `SerializerList` class.\n    Includes a backlink to the serializer instance for renderers\n    to use if they need richer field information.\n    \"\"\"\n    def __init__(self, *args, **kwargs):\n        self.serializer = kwargs.pop('serializer')\n        super().__init__(*args, **kwargs)\n    def __repr__(self):",
        "detail": "backend.rest_framework.utils.serializer_helpers",
        "documentation": {}
    },
    {
        "label": "BoundField",
        "kind": 6,
        "importPath": "backend.rest_framework.utils.serializer_helpers",
        "description": "backend.rest_framework.utils.serializer_helpers",
        "peekOfCode": "class BoundField:\n    \"\"\"\n    A field object that also includes `.value` and `.error` properties.\n    Returned when iterating over a serializer instance,\n    providing an API similar to Django forms and form fields.\n    \"\"\"\n    def __init__(self, field, value, errors, prefix=''):\n        self._field = field\n        self._prefix = prefix\n        self.value = value",
        "detail": "backend.rest_framework.utils.serializer_helpers",
        "documentation": {}
    },
    {
        "label": "JSONBoundField",
        "kind": 6,
        "importPath": "backend.rest_framework.utils.serializer_helpers",
        "description": "backend.rest_framework.utils.serializer_helpers",
        "peekOfCode": "class JSONBoundField(BoundField):\n    def as_form_field(self):\n        value = self.value\n        # When HTML form input is used and the input is not valid\n        # value will be a JSONString, rather than a JSON primitive.\n        if not getattr(value, 'is_json_string', False):\n            try:\n                value = json.dumps(\n                    self.value,\n                    sort_keys=True,",
        "detail": "backend.rest_framework.utils.serializer_helpers",
        "documentation": {}
    },
    {
        "label": "NestedBoundField",
        "kind": 6,
        "importPath": "backend.rest_framework.utils.serializer_helpers",
        "description": "backend.rest_framework.utils.serializer_helpers",
        "peekOfCode": "class NestedBoundField(BoundField):\n    \"\"\"\n    This `BoundField` additionally implements __iter__ and __getitem__\n    in order to support nested bound fields. This class is the type of\n    `BoundField` that is used for serializer fields.\n    \"\"\"\n    def __init__(self, field, value, errors, prefix=''):\n        if value is None or value == '' or not isinstance(value, Mapping):\n            value = {}\n        super().__init__(field, value, errors, prefix)",
        "detail": "backend.rest_framework.utils.serializer_helpers",
        "documentation": {}
    },
    {
        "label": "BindingDict",
        "kind": 6,
        "importPath": "backend.rest_framework.utils.serializer_helpers",
        "description": "backend.rest_framework.utils.serializer_helpers",
        "peekOfCode": "class BindingDict(MutableMapping):\n    \"\"\"\n    This dict-like object is used to store fields on a serializer.\n    This ensures that whenever fields are added to the serializer we call\n    `field.bind()` so that the `field_name` and `parent` attributes\n    can be set correctly.\n    \"\"\"\n    def __init__(self, serializer):\n        self.serializer = serializer\n        self.fields = OrderedDict()",
        "detail": "backend.rest_framework.utils.serializer_helpers",
        "documentation": {}
    },
    {
        "label": "replace_query_param",
        "kind": 2,
        "importPath": "backend.rest_framework.utils.urls",
        "description": "backend.rest_framework.utils.urls",
        "peekOfCode": "def replace_query_param(url, key, val):\n    \"\"\"\n    Given a URL and a key/val pair, set or replace an item in the query\n    parameters of the URL, and return the new URL.\n    \"\"\"\n    (scheme, netloc, path, query, fragment) = parse.urlsplit(force_str(url))\n    query_dict = parse.parse_qs(query, keep_blank_values=True)\n    query_dict[force_str(key)] = [force_str(val)]\n    query = parse.urlencode(sorted(query_dict.items()), doseq=True)\n    return parse.urlunsplit((scheme, netloc, path, query, fragment))",
        "detail": "backend.rest_framework.utils.urls",
        "documentation": {}
    },
    {
        "label": "remove_query_param",
        "kind": 2,
        "importPath": "backend.rest_framework.utils.urls",
        "description": "backend.rest_framework.utils.urls",
        "peekOfCode": "def remove_query_param(url, key):\n    \"\"\"\n    Given a URL and a key/val pair, remove an item in the query\n    parameters of the URL, and return the new URL.\n    \"\"\"\n    (scheme, netloc, path, query, fragment) = parse.urlsplit(force_str(url))\n    query_dict = parse.parse_qs(query, keep_blank_values=True)\n    query_dict.pop(key, None)\n    query = parse.urlencode(sorted(query_dict.items()), doseq=True)\n    return parse.urlunsplit((scheme, netloc, path, query, fragment))",
        "detail": "backend.rest_framework.utils.urls",
        "documentation": {}
    },
    {
        "label": "RestFrameworkConfig",
        "kind": 6,
        "importPath": "backend.rest_framework.apps",
        "description": "backend.rest_framework.apps",
        "peekOfCode": "class RestFrameworkConfig(AppConfig):\n    name = 'rest_framework'\n    verbose_name = \"Django REST framework\"\n    def ready(self):\n        # Add System checks\n        from .checks import pagination_system_check  # NOQA",
        "detail": "backend.rest_framework.apps",
        "documentation": {}
    },
    {
        "label": "CSRFCheck",
        "kind": 6,
        "importPath": "backend.rest_framework.authentication",
        "description": "backend.rest_framework.authentication",
        "peekOfCode": "class CSRFCheck(CsrfViewMiddleware):\n    def _reject(self, request, reason):\n        # Return the failure reason instead of an HttpResponse\n        return reason\nclass BaseAuthentication:\n    \"\"\"\n    All authentication classes should extend BaseAuthentication.\n    \"\"\"\n    def authenticate(self, request):\n        \"\"\"",
        "detail": "backend.rest_framework.authentication",
        "documentation": {}
    },
    {
        "label": "BaseAuthentication",
        "kind": 6,
        "importPath": "backend.rest_framework.authentication",
        "description": "backend.rest_framework.authentication",
        "peekOfCode": "class BaseAuthentication:\n    \"\"\"\n    All authentication classes should extend BaseAuthentication.\n    \"\"\"\n    def authenticate(self, request):\n        \"\"\"\n        Authenticate the request and return a two-tuple of (user, token).\n        \"\"\"\n        raise NotImplementedError(\".authenticate() must be overridden.\")\n    def authenticate_header(self, request):",
        "detail": "backend.rest_framework.authentication",
        "documentation": {}
    },
    {
        "label": "BasicAuthentication",
        "kind": 6,
        "importPath": "backend.rest_framework.authentication",
        "description": "backend.rest_framework.authentication",
        "peekOfCode": "class BasicAuthentication(BaseAuthentication):\n    \"\"\"\n    HTTP Basic authentication against username/password.\n    \"\"\"\n    www_authenticate_realm = 'api'\n    def authenticate(self, request):\n        \"\"\"\n        Returns a `User` if a correct username and password have been supplied\n        using HTTP Basic authentication.  Otherwise returns `None`.\n        \"\"\"",
        "detail": "backend.rest_framework.authentication",
        "documentation": {}
    },
    {
        "label": "SessionAuthentication",
        "kind": 6,
        "importPath": "backend.rest_framework.authentication",
        "description": "backend.rest_framework.authentication",
        "peekOfCode": "class SessionAuthentication(BaseAuthentication):\n    \"\"\"\n    Use Django's session framework for authentication.\n    \"\"\"\n    def authenticate(self, request):\n        \"\"\"\n        Returns a `User` if the request session currently has a logged in user.\n        Otherwise returns `None`.\n        \"\"\"\n        # Get the session-based user from the underlying HttpRequest object",
        "detail": "backend.rest_framework.authentication",
        "documentation": {}
    },
    {
        "label": "TokenAuthentication",
        "kind": 6,
        "importPath": "backend.rest_framework.authentication",
        "description": "backend.rest_framework.authentication",
        "peekOfCode": "class TokenAuthentication(BaseAuthentication):\n    \"\"\"\n    Simple token based authentication.\n    Clients should authenticate by passing the token key in the \"Authorization\"\n    HTTP header, prepended with the string \"Token \".  For example:\n        Authorization: Token 401f7ac837da42b97f613d789819ff93537bee6a\n    \"\"\"\n    keyword = 'Token'\n    model = None\n    def get_model(self):",
        "detail": "backend.rest_framework.authentication",
        "documentation": {}
    },
    {
        "label": "RemoteUserAuthentication",
        "kind": 6,
        "importPath": "backend.rest_framework.authentication",
        "description": "backend.rest_framework.authentication",
        "peekOfCode": "class RemoteUserAuthentication(BaseAuthentication):\n    \"\"\"\n    REMOTE_USER authentication.\n    To use this, set up your web server to perform authentication, which will\n    set the REMOTE_USER environment variable. You will need to have\n    'django.contrib.auth.backends.RemoteUserBackend in your\n    AUTHENTICATION_BACKENDS setting\n    \"\"\"\n    # Name of request header to grab username from.  This will be the key as\n    # used in the request.META dictionary, i.e. the normalization of headers to",
        "detail": "backend.rest_framework.authentication",
        "documentation": {}
    },
    {
        "label": "get_authorization_header",
        "kind": 2,
        "importPath": "backend.rest_framework.authentication",
        "description": "backend.rest_framework.authentication",
        "peekOfCode": "def get_authorization_header(request):\n    \"\"\"\n    Return request's 'Authorization:' header, as a bytestring.\n    Hide some test client ickyness where the header can be unicode.\n    \"\"\"\n    auth = request.META.get('HTTP_AUTHORIZATION', b'')\n    if isinstance(auth, str):\n        # Work around django test client oddness\n        auth = auth.encode(HTTP_HEADER_ENCODING)\n    return auth",
        "detail": "backend.rest_framework.authentication",
        "documentation": {}
    },
    {
        "label": "pagination_system_check",
        "kind": 2,
        "importPath": "backend.rest_framework.checks",
        "description": "backend.rest_framework.checks",
        "peekOfCode": "def pagination_system_check(app_configs, **kwargs):\n    errors = []\n    # Use of default page size setting requires a default Paginator class\n    from rest_framework.settings import api_settings\n    if api_settings.PAGE_SIZE and not api_settings.DEFAULT_PAGINATION_CLASS:\n        errors.append(\n            Warning(\n                \"You have specified a default PAGE_SIZE pagination rest_framework setting, \"\n                \"without specifying also a DEFAULT_PAGINATION_CLASS.\",\n                hint=\"The default for DEFAULT_PAGINATION_CLASS is None. \"",
        "detail": "backend.rest_framework.checks",
        "documentation": {}
    },
    {
        "label": "unicode_http_header",
        "kind": 2,
        "importPath": "backend.rest_framework.compat",
        "description": "backend.rest_framework.compat",
        "peekOfCode": "def unicode_http_header(value):\n    # Coerce HTTP header value to unicode.\n    if isinstance(value, bytes):\n        return value.decode('iso-8859-1')\n    return value\ndef distinct(queryset, base):\n    if settings.DATABASES[queryset.db][\"ENGINE\"] == \"django.db.backends.oracle\":\n        # distinct analogue for Oracle users\n        return base.filter(pk__in=set(queryset.values_list('pk', flat=True)))\n    return queryset.distinct()",
        "detail": "backend.rest_framework.compat",
        "documentation": {}
    },
    {
        "label": "distinct",
        "kind": 2,
        "importPath": "backend.rest_framework.compat",
        "description": "backend.rest_framework.compat",
        "peekOfCode": "def distinct(queryset, base):\n    if settings.DATABASES[queryset.db][\"ENGINE\"] == \"django.db.backends.oracle\":\n        # distinct analogue for Oracle users\n        return base.filter(pk__in=set(queryset.values_list('pk', flat=True)))\n    return queryset.distinct()\n# django.contrib.postgres requires psycopg2\ntry:\n    from django.contrib.postgres import fields as postgres_fields\nexcept ImportError:\n    postgres_fields = None",
        "detail": "backend.rest_framework.compat",
        "documentation": {}
    },
    {
        "label": "SHORT_SEPARATORS",
        "kind": 5,
        "importPath": "backend.rest_framework.compat",
        "description": "backend.rest_framework.compat",
        "peekOfCode": "SHORT_SEPARATORS = (',', ':')\nLONG_SEPARATORS = (', ', ': ')\nINDENT_SEPARATORS = (',', ': ')",
        "detail": "backend.rest_framework.compat",
        "documentation": {}
    },
    {
        "label": "LONG_SEPARATORS",
        "kind": 5,
        "importPath": "backend.rest_framework.compat",
        "description": "backend.rest_framework.compat",
        "peekOfCode": "LONG_SEPARATORS = (', ', ': ')\nINDENT_SEPARATORS = (',', ': ')",
        "detail": "backend.rest_framework.compat",
        "documentation": {}
    },
    {
        "label": "INDENT_SEPARATORS",
        "kind": 5,
        "importPath": "backend.rest_framework.compat",
        "description": "backend.rest_framework.compat",
        "peekOfCode": "INDENT_SEPARATORS = (',', ': ')",
        "detail": "backend.rest_framework.compat",
        "documentation": {}
    },
    {
        "label": "MethodMapper",
        "kind": 6,
        "importPath": "backend.rest_framework.decorators",
        "description": "backend.rest_framework.decorators",
        "peekOfCode": "class MethodMapper(dict):\n    \"\"\"\n    Enables mapping HTTP methods to different ViewSet methods for a single,\n    logical action.\n    Example usage:\n        class MyViewSet(ViewSet):\n            @action(detail=False)\n            def example(self, request, **kwargs):\n                ...\n            @example.mapping.post",
        "detail": "backend.rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "api_view",
        "kind": 2,
        "importPath": "backend.rest_framework.decorators",
        "description": "backend.rest_framework.decorators",
        "peekOfCode": "def api_view(http_method_names=None):\n    \"\"\"\n    Decorator that converts a function-based view into an APIView subclass.\n    Takes a list of allowed methods for the view as an argument.\n    \"\"\"\n    http_method_names = ['GET'] if (http_method_names is None) else http_method_names\n    def decorator(func):\n        WrappedAPIView = type(\n            'WrappedAPIView',\n            (APIView,),",
        "detail": "backend.rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "renderer_classes",
        "kind": 2,
        "importPath": "backend.rest_framework.decorators",
        "description": "backend.rest_framework.decorators",
        "peekOfCode": "def renderer_classes(renderer_classes):\n    def decorator(func):\n        func.renderer_classes = renderer_classes\n        return func\n    return decorator\ndef parser_classes(parser_classes):\n    def decorator(func):\n        func.parser_classes = parser_classes\n        return func\n    return decorator",
        "detail": "backend.rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "parser_classes",
        "kind": 2,
        "importPath": "backend.rest_framework.decorators",
        "description": "backend.rest_framework.decorators",
        "peekOfCode": "def parser_classes(parser_classes):\n    def decorator(func):\n        func.parser_classes = parser_classes\n        return func\n    return decorator\ndef authentication_classes(authentication_classes):\n    def decorator(func):\n        func.authentication_classes = authentication_classes\n        return func\n    return decorator",
        "detail": "backend.rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "authentication_classes",
        "kind": 2,
        "importPath": "backend.rest_framework.decorators",
        "description": "backend.rest_framework.decorators",
        "peekOfCode": "def authentication_classes(authentication_classes):\n    def decorator(func):\n        func.authentication_classes = authentication_classes\n        return func\n    return decorator\ndef throttle_classes(throttle_classes):\n    def decorator(func):\n        func.throttle_classes = throttle_classes\n        return func\n    return decorator",
        "detail": "backend.rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "throttle_classes",
        "kind": 2,
        "importPath": "backend.rest_framework.decorators",
        "description": "backend.rest_framework.decorators",
        "peekOfCode": "def throttle_classes(throttle_classes):\n    def decorator(func):\n        func.throttle_classes = throttle_classes\n        return func\n    return decorator\ndef permission_classes(permission_classes):\n    def decorator(func):\n        func.permission_classes = permission_classes\n        return func\n    return decorator",
        "detail": "backend.rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "permission_classes",
        "kind": 2,
        "importPath": "backend.rest_framework.decorators",
        "description": "backend.rest_framework.decorators",
        "peekOfCode": "def permission_classes(permission_classes):\n    def decorator(func):\n        func.permission_classes = permission_classes\n        return func\n    return decorator\ndef schema(view_inspector):\n    def decorator(func):\n        func.schema = view_inspector\n        return func\n    return decorator",
        "detail": "backend.rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "schema",
        "kind": 2,
        "importPath": "backend.rest_framework.decorators",
        "description": "backend.rest_framework.decorators",
        "peekOfCode": "def schema(view_inspector):\n    def decorator(func):\n        func.schema = view_inspector\n        return func\n    return decorator\ndef action(methods=None, detail=None, url_path=None, url_name=None, **kwargs):\n    \"\"\"\n    Mark a ViewSet method as a routable action.\n    `@action`-decorated functions will be endowed with a `mapping` property,\n    a `MethodMapper` that can be used to add additional method-based behaviors",
        "detail": "backend.rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "action",
        "kind": 2,
        "importPath": "backend.rest_framework.decorators",
        "description": "backend.rest_framework.decorators",
        "peekOfCode": "def action(methods=None, detail=None, url_path=None, url_name=None, **kwargs):\n    \"\"\"\n    Mark a ViewSet method as a routable action.\n    `@action`-decorated functions will be endowed with a `mapping` property,\n    a `MethodMapper` that can be used to add additional method-based behaviors\n    on the routed action.\n    :param methods: A list of HTTP method names this action responds to.\n                    Defaults to GET only.\n    :param detail: Required. Determines whether this action applies to\n                   instance/detail requests or collection/list requests.",
        "detail": "backend.rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "get_docs_view",
        "kind": 2,
        "importPath": "backend.rest_framework.documentation",
        "description": "backend.rest_framework.documentation",
        "peekOfCode": "def get_docs_view(\n        title=None, description=None, schema_url=None, urlconf=None,\n        public=True, patterns=None, generator_class=SchemaGenerator,\n        authentication_classes=api_settings.DEFAULT_AUTHENTICATION_CLASSES,\n        permission_classes=api_settings.DEFAULT_PERMISSION_CLASSES,\n        renderer_classes=None):\n    if renderer_classes is None:\n        renderer_classes = [DocumentationRenderer, CoreJSONRenderer]\n    return get_schema_view(\n        title=title,",
        "detail": "backend.rest_framework.documentation",
        "documentation": {}
    },
    {
        "label": "get_schemajs_view",
        "kind": 2,
        "importPath": "backend.rest_framework.documentation",
        "description": "backend.rest_framework.documentation",
        "peekOfCode": "def get_schemajs_view(\n        title=None, description=None, schema_url=None, urlconf=None,\n        public=True, patterns=None, generator_class=SchemaGenerator,\n        authentication_classes=api_settings.DEFAULT_AUTHENTICATION_CLASSES,\n        permission_classes=api_settings.DEFAULT_PERMISSION_CLASSES):\n    renderer_classes = [SchemaJSRenderer]\n    return get_schema_view(\n        title=title,\n        url=schema_url,\n        urlconf=urlconf,",
        "detail": "backend.rest_framework.documentation",
        "documentation": {}
    },
    {
        "label": "include_docs_urls",
        "kind": 2,
        "importPath": "backend.rest_framework.documentation",
        "description": "backend.rest_framework.documentation",
        "peekOfCode": "def include_docs_urls(\n        title=None, description=None, schema_url=None, urlconf=None,\n        public=True, patterns=None, generator_class=SchemaGenerator,\n        authentication_classes=api_settings.DEFAULT_AUTHENTICATION_CLASSES,\n        permission_classes=api_settings.DEFAULT_PERMISSION_CLASSES,\n        renderer_classes=None):\n    docs_view = get_docs_view(\n        title=title,\n        description=description,\n        schema_url=schema_url,",
        "detail": "backend.rest_framework.documentation",
        "documentation": {}
    },
    {
        "label": "ErrorDetail",
        "kind": 6,
        "importPath": "backend.rest_framework.exceptions",
        "description": "backend.rest_framework.exceptions",
        "peekOfCode": "class ErrorDetail(str):\n    \"\"\"\n    A string-like object that can additionally have a code.\n    \"\"\"\n    code = None\n    def __new__(cls, string, code=None):\n        self = super().__new__(cls, string)\n        self.code = code\n        return self\n    def __eq__(self, other):",
        "detail": "backend.rest_framework.exceptions",
        "documentation": {}
    },
    {
        "label": "APIException",
        "kind": 6,
        "importPath": "backend.rest_framework.exceptions",
        "description": "backend.rest_framework.exceptions",
        "peekOfCode": "class APIException(Exception):\n    \"\"\"\n    Base class for REST framework exceptions.\n    Subclasses should provide `.status_code` and `.default_detail` properties.\n    \"\"\"\n    status_code = status.HTTP_500_INTERNAL_SERVER_ERROR\n    default_detail = _('A server error occurred.')\n    default_code = 'error'\n    def __init__(self, detail=None, code=None):\n        if detail is None:",
        "detail": "backend.rest_framework.exceptions",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "kind": 6,
        "importPath": "backend.rest_framework.exceptions",
        "description": "backend.rest_framework.exceptions",
        "peekOfCode": "class ValidationError(APIException):\n    status_code = status.HTTP_400_BAD_REQUEST\n    default_detail = _('Invalid input.')\n    default_code = 'invalid'\n    def __init__(self, detail=None, code=None):\n        if detail is None:\n            detail = self.default_detail\n        if code is None:\n            code = self.default_code\n        # For validation failures, we may collect many errors together,",
        "detail": "backend.rest_framework.exceptions",
        "documentation": {}
    },
    {
        "label": "ParseError",
        "kind": 6,
        "importPath": "backend.rest_framework.exceptions",
        "description": "backend.rest_framework.exceptions",
        "peekOfCode": "class ParseError(APIException):\n    status_code = status.HTTP_400_BAD_REQUEST\n    default_detail = _('Malformed request.')\n    default_code = 'parse_error'\nclass AuthenticationFailed(APIException):\n    status_code = status.HTTP_401_UNAUTHORIZED\n    default_detail = _('Incorrect authentication credentials.')\n    default_code = 'authentication_failed'\nclass NotAuthenticated(APIException):\n    status_code = status.HTTP_401_UNAUTHORIZED",
        "detail": "backend.rest_framework.exceptions",
        "documentation": {}
    },
    {
        "label": "AuthenticationFailed",
        "kind": 6,
        "importPath": "backend.rest_framework.exceptions",
        "description": "backend.rest_framework.exceptions",
        "peekOfCode": "class AuthenticationFailed(APIException):\n    status_code = status.HTTP_401_UNAUTHORIZED\n    default_detail = _('Incorrect authentication credentials.')\n    default_code = 'authentication_failed'\nclass NotAuthenticated(APIException):\n    status_code = status.HTTP_401_UNAUTHORIZED\n    default_detail = _('Authentication credentials were not provided.')\n    default_code = 'not_authenticated'\nclass PermissionDenied(APIException):\n    status_code = status.HTTP_403_FORBIDDEN",
        "detail": "backend.rest_framework.exceptions",
        "documentation": {}
    },
    {
        "label": "NotAuthenticated",
        "kind": 6,
        "importPath": "backend.rest_framework.exceptions",
        "description": "backend.rest_framework.exceptions",
        "peekOfCode": "class NotAuthenticated(APIException):\n    status_code = status.HTTP_401_UNAUTHORIZED\n    default_detail = _('Authentication credentials were not provided.')\n    default_code = 'not_authenticated'\nclass PermissionDenied(APIException):\n    status_code = status.HTTP_403_FORBIDDEN\n    default_detail = _('You do not have permission to perform this action.')\n    default_code = 'permission_denied'\nclass NotFound(APIException):\n    status_code = status.HTTP_404_NOT_FOUND",
        "detail": "backend.rest_framework.exceptions",
        "documentation": {}
    },
    {
        "label": "PermissionDenied",
        "kind": 6,
        "importPath": "backend.rest_framework.exceptions",
        "description": "backend.rest_framework.exceptions",
        "peekOfCode": "class PermissionDenied(APIException):\n    status_code = status.HTTP_403_FORBIDDEN\n    default_detail = _('You do not have permission to perform this action.')\n    default_code = 'permission_denied'\nclass NotFound(APIException):\n    status_code = status.HTTP_404_NOT_FOUND\n    default_detail = _('Not found.')\n    default_code = 'not_found'\nclass MethodNotAllowed(APIException):\n    status_code = status.HTTP_405_METHOD_NOT_ALLOWED",
        "detail": "backend.rest_framework.exceptions",
        "documentation": {}
    },
    {
        "label": "NotFound",
        "kind": 6,
        "importPath": "backend.rest_framework.exceptions",
        "description": "backend.rest_framework.exceptions",
        "peekOfCode": "class NotFound(APIException):\n    status_code = status.HTTP_404_NOT_FOUND\n    default_detail = _('Not found.')\n    default_code = 'not_found'\nclass MethodNotAllowed(APIException):\n    status_code = status.HTTP_405_METHOD_NOT_ALLOWED\n    default_detail = _('Method \"{method}\" not allowed.')\n    default_code = 'method_not_allowed'\n    def __init__(self, method, detail=None, code=None):\n        if detail is None:",
        "detail": "backend.rest_framework.exceptions",
        "documentation": {}
    },
    {
        "label": "MethodNotAllowed",
        "kind": 6,
        "importPath": "backend.rest_framework.exceptions",
        "description": "backend.rest_framework.exceptions",
        "peekOfCode": "class MethodNotAllowed(APIException):\n    status_code = status.HTTP_405_METHOD_NOT_ALLOWED\n    default_detail = _('Method \"{method}\" not allowed.')\n    default_code = 'method_not_allowed'\n    def __init__(self, method, detail=None, code=None):\n        if detail is None:\n            detail = force_str(self.default_detail).format(method=method)\n        super().__init__(detail, code)\nclass NotAcceptable(APIException):\n    status_code = status.HTTP_406_NOT_ACCEPTABLE",
        "detail": "backend.rest_framework.exceptions",
        "documentation": {}
    },
    {
        "label": "NotAcceptable",
        "kind": 6,
        "importPath": "backend.rest_framework.exceptions",
        "description": "backend.rest_framework.exceptions",
        "peekOfCode": "class NotAcceptable(APIException):\n    status_code = status.HTTP_406_NOT_ACCEPTABLE\n    default_detail = _('Could not satisfy the request Accept header.')\n    default_code = 'not_acceptable'\n    def __init__(self, detail=None, code=None, available_renderers=None):\n        self.available_renderers = available_renderers\n        super().__init__(detail, code)\nclass UnsupportedMediaType(APIException):\n    status_code = status.HTTP_415_UNSUPPORTED_MEDIA_TYPE\n    default_detail = _('Unsupported media type \"{media_type}\" in request.')",
        "detail": "backend.rest_framework.exceptions",
        "documentation": {}
    },
    {
        "label": "UnsupportedMediaType",
        "kind": 6,
        "importPath": "backend.rest_framework.exceptions",
        "description": "backend.rest_framework.exceptions",
        "peekOfCode": "class UnsupportedMediaType(APIException):\n    status_code = status.HTTP_415_UNSUPPORTED_MEDIA_TYPE\n    default_detail = _('Unsupported media type \"{media_type}\" in request.')\n    default_code = 'unsupported_media_type'\n    def __init__(self, media_type, detail=None, code=None):\n        if detail is None:\n            detail = force_str(self.default_detail).format(media_type=media_type)\n        super().__init__(detail, code)\nclass Throttled(APIException):\n    status_code = status.HTTP_429_TOO_MANY_REQUESTS",
        "detail": "backend.rest_framework.exceptions",
        "documentation": {}
    },
    {
        "label": "Throttled",
        "kind": 6,
        "importPath": "backend.rest_framework.exceptions",
        "description": "backend.rest_framework.exceptions",
        "peekOfCode": "class Throttled(APIException):\n    status_code = status.HTTP_429_TOO_MANY_REQUESTS\n    default_detail = _('Request was throttled.')\n    extra_detail_singular = _('Expected available in {wait} second.')\n    extra_detail_plural = _('Expected available in {wait} seconds.')\n    default_code = 'throttled'\n    def __init__(self, wait=None, detail=None, code=None):\n        if detail is None:\n            detail = force_str(self.default_detail)\n        if wait is not None:",
        "detail": "backend.rest_framework.exceptions",
        "documentation": {}
    },
    {
        "label": "server_error",
        "kind": 2,
        "importPath": "backend.rest_framework.exceptions",
        "description": "backend.rest_framework.exceptions",
        "peekOfCode": "def server_error(request, *args, **kwargs):\n    \"\"\"\n    Generic 500 error handler.\n    \"\"\"\n    data = {\n        'error': 'Server Error (500)'\n    }\n    return JsonResponse(data, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\ndef bad_request(request, exception, *args, **kwargs):\n    \"\"\"",
        "detail": "backend.rest_framework.exceptions",
        "documentation": {}
    },
    {
        "label": "bad_request",
        "kind": 2,
        "importPath": "backend.rest_framework.exceptions",
        "description": "backend.rest_framework.exceptions",
        "peekOfCode": "def bad_request(request, exception, *args, **kwargs):\n    \"\"\"\n    Generic 400 error handler.\n    \"\"\"\n    data = {\n        'error': 'Bad Request (400)'\n    }\n    return JsonResponse(data, status=status.HTTP_400_BAD_REQUEST)",
        "detail": "backend.rest_framework.exceptions",
        "documentation": {}
    },
    {
        "label": "empty",
        "kind": 6,
        "importPath": "backend.rest_framework.fields",
        "description": "backend.rest_framework.fields",
        "peekOfCode": "class empty:\n    \"\"\"\n    This class is used to represent no data being provided for a given input\n    or output value.\n    It is required because `None` may be a valid input or output value.\n    \"\"\"\n    pass\nclass BuiltinSignatureError(Exception):\n    \"\"\"\n    Built-in function signatures are not inspectable. This exception is raised",
        "detail": "backend.rest_framework.fields",
        "documentation": {}
    },
    {
        "label": "BuiltinSignatureError",
        "kind": 6,
        "importPath": "backend.rest_framework.fields",
        "description": "backend.rest_framework.fields",
        "peekOfCode": "class BuiltinSignatureError(Exception):\n    \"\"\"\n    Built-in function signatures are not inspectable. This exception is raised\n    so the serializer can raise a helpful error message.\n    \"\"\"\n    pass\ndef is_simple_callable(obj):\n    \"\"\"\n    True if the object is a callable that takes no arguments.\n    \"\"\"",
        "detail": "backend.rest_framework.fields",
        "documentation": {}
    },
    {
        "label": "CreateOnlyDefault",
        "kind": 6,
        "importPath": "backend.rest_framework.fields",
        "description": "backend.rest_framework.fields",
        "peekOfCode": "class CreateOnlyDefault:\n    \"\"\"\n    This class may be used to provide default values that are only used\n    for create operations, but that do not return any value for update\n    operations.\n    \"\"\"\n    requires_context = True\n    def __init__(self, default):\n        self.default = default\n    def __call__(self, serializer_field):",
        "detail": "backend.rest_framework.fields",
        "documentation": {}
    },
    {
        "label": "CurrentUserDefault",
        "kind": 6,
        "importPath": "backend.rest_framework.fields",
        "description": "backend.rest_framework.fields",
        "peekOfCode": "class CurrentUserDefault:\n    requires_context = True\n    def __call__(self, serializer_field):\n        return serializer_field.context['request'].user\n    def __repr__(self):\n        return '%s()' % self.__class__.__name__\nclass SkipField(Exception):\n    pass\nREGEX_TYPE = type(re.compile(''))\nNOT_READ_ONLY_WRITE_ONLY = 'May not set both `read_only` and `write_only`'",
        "detail": "backend.rest_framework.fields",
        "documentation": {}
    },
    {
        "label": "SkipField",
        "kind": 6,
        "importPath": "backend.rest_framework.fields",
        "description": "backend.rest_framework.fields",
        "peekOfCode": "class SkipField(Exception):\n    pass\nREGEX_TYPE = type(re.compile(''))\nNOT_READ_ONLY_WRITE_ONLY = 'May not set both `read_only` and `write_only`'\nNOT_READ_ONLY_REQUIRED = 'May not set both `read_only` and `required`'\nNOT_REQUIRED_DEFAULT = 'May not set both `required` and `default`'\nUSE_READONLYFIELD = 'Field(read_only=True) should be ReadOnlyField'\nMISSING_ERROR_MESSAGE = (\n    'ValidationError raised by `{class_name}`, but error key `{key}` does '\n    'not exist in the `error_messages` dictionary.'",
        "detail": "backend.rest_framework.fields",
        "documentation": {}
    },
    {
        "label": "Field",
        "kind": 6,
        "importPath": "backend.rest_framework.fields",
        "description": "backend.rest_framework.fields",
        "peekOfCode": "class Field:\n    _creation_counter = 0\n    default_error_messages = {\n        'required': _('This field is required.'),\n        'null': _('This field may not be null.')\n    }\n    default_validators = []\n    default_empty_html = empty\n    initial = None\n    def __init__(self, read_only=False, write_only=False,",
        "detail": "backend.rest_framework.fields",
        "documentation": {}
    },
    {
        "label": "BooleanField",
        "kind": 6,
        "importPath": "backend.rest_framework.fields",
        "description": "backend.rest_framework.fields",
        "peekOfCode": "class BooleanField(Field):\n    default_error_messages = {\n        'invalid': _('Must be a valid boolean.')\n    }\n    default_empty_html = False\n    initial = False\n    TRUE_VALUES = {\n        't', 'T',\n        'y', 'Y', 'yes', 'Yes', 'YES',\n        'true', 'True', 'TRUE',",
        "detail": "backend.rest_framework.fields",
        "documentation": {}
    },
    {
        "label": "NullBooleanField",
        "kind": 6,
        "importPath": "backend.rest_framework.fields",
        "description": "backend.rest_framework.fields",
        "peekOfCode": "class NullBooleanField(BooleanField):\n    initial = None\n    def __init__(self, **kwargs):\n        warnings.warn(\n            \"The `NullBooleanField` is deprecated and will be removed starting \"\n            \"with 3.14. Instead use the `BooleanField` field and set \"\n            \"`allow_null=True` which does the same thing.\",\n            RemovedInDRF314Warning, stacklevel=2\n        )\n        assert 'allow_null' not in kwargs, '`allow_null` is not a valid option.'",
        "detail": "backend.rest_framework.fields",
        "documentation": {}
    },
    {
        "label": "CharField",
        "kind": 6,
        "importPath": "backend.rest_framework.fields",
        "description": "backend.rest_framework.fields",
        "peekOfCode": "class CharField(Field):\n    default_error_messages = {\n        'invalid': _('Not a valid string.'),\n        'blank': _('This field may not be blank.'),\n        'max_length': _('Ensure this field has no more than {max_length} characters.'),\n        'min_length': _('Ensure this field has at least {min_length} characters.'),\n    }\n    initial = ''\n    def __init__(self, **kwargs):\n        self.allow_blank = kwargs.pop('allow_blank', False)",
        "detail": "backend.rest_framework.fields",
        "documentation": {}
    },
    {
        "label": "EmailField",
        "kind": 6,
        "importPath": "backend.rest_framework.fields",
        "description": "backend.rest_framework.fields",
        "peekOfCode": "class EmailField(CharField):\n    default_error_messages = {\n        'invalid': _('Enter a valid email address.')\n    }\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        validator = EmailValidator(message=self.error_messages['invalid'])\n        self.validators.append(validator)\nclass RegexField(CharField):\n    default_error_messages = {",
        "detail": "backend.rest_framework.fields",
        "documentation": {}
    },
    {
        "label": "RegexField",
        "kind": 6,
        "importPath": "backend.rest_framework.fields",
        "description": "backend.rest_framework.fields",
        "peekOfCode": "class RegexField(CharField):\n    default_error_messages = {\n        'invalid': _('This value does not match the required pattern.')\n    }\n    def __init__(self, regex, **kwargs):\n        super().__init__(**kwargs)\n        validator = RegexValidator(regex, message=self.error_messages['invalid'])\n        self.validators.append(validator)\nclass SlugField(CharField):\n    default_error_messages = {",
        "detail": "backend.rest_framework.fields",
        "documentation": {}
    },
    {
        "label": "SlugField",
        "kind": 6,
        "importPath": "backend.rest_framework.fields",
        "description": "backend.rest_framework.fields",
        "peekOfCode": "class SlugField(CharField):\n    default_error_messages = {\n        'invalid': _('Enter a valid \"slug\" consisting of letters, numbers, underscores or hyphens.'),\n        'invalid_unicode': _('Enter a valid \"slug\" consisting of Unicode letters, numbers, underscores, or hyphens.')\n    }\n    def __init__(self, allow_unicode=False, **kwargs):\n        super().__init__(**kwargs)\n        self.allow_unicode = allow_unicode\n        if self.allow_unicode:\n            validator = RegexValidator(re.compile(r'^[-\\w]+\\Z', re.UNICODE), message=self.error_messages['invalid_unicode'])",
        "detail": "backend.rest_framework.fields",
        "documentation": {}
    },
    {
        "label": "URLField",
        "kind": 6,
        "importPath": "backend.rest_framework.fields",
        "description": "backend.rest_framework.fields",
        "peekOfCode": "class URLField(CharField):\n    default_error_messages = {\n        'invalid': _('Enter a valid URL.')\n    }\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        validator = URLValidator(message=self.error_messages['invalid'])\n        self.validators.append(validator)\nclass UUIDField(Field):\n    valid_formats = ('hex_verbose', 'hex', 'int', 'urn')",
        "detail": "backend.rest_framework.fields",
        "documentation": {}
    },
    {
        "label": "UUIDField",
        "kind": 6,
        "importPath": "backend.rest_framework.fields",
        "description": "backend.rest_framework.fields",
        "peekOfCode": "class UUIDField(Field):\n    valid_formats = ('hex_verbose', 'hex', 'int', 'urn')\n    default_error_messages = {\n        'invalid': _('Must be a valid UUID.'),\n    }\n    def __init__(self, **kwargs):\n        self.uuid_format = kwargs.pop('format', 'hex_verbose')\n        if self.uuid_format not in self.valid_formats:\n            raise ValueError(\n                'Invalid format for uuid representation. '",
        "detail": "backend.rest_framework.fields",
        "documentation": {}
    },
    {
        "label": "IPAddressField",
        "kind": 6,
        "importPath": "backend.rest_framework.fields",
        "description": "backend.rest_framework.fields",
        "peekOfCode": "class IPAddressField(CharField):\n    \"\"\"Support both IPAddressField and GenericIPAddressField\"\"\"\n    default_error_messages = {\n        'invalid': _('Enter a valid IPv4 or IPv6 address.'),\n    }\n    def __init__(self, protocol='both', **kwargs):\n        self.protocol = protocol.lower()\n        self.unpack_ipv4 = (self.protocol == 'both')\n        super().__init__(**kwargs)\n        validators, error_message = ip_address_validators(protocol, self.unpack_ipv4)",
        "detail": "backend.rest_framework.fields",
        "documentation": {}
    },
    {
        "label": "IntegerField",
        "kind": 6,
        "importPath": "backend.rest_framework.fields",
        "description": "backend.rest_framework.fields",
        "peekOfCode": "class IntegerField(Field):\n    default_error_messages = {\n        'invalid': _('A valid integer is required.'),\n        'max_value': _('Ensure this value is less than or equal to {max_value}.'),\n        'min_value': _('Ensure this value is greater than or equal to {min_value}.'),\n        'max_string_length': _('String value too large.')\n    }\n    MAX_STRING_LENGTH = 1000  # Guard against malicious string inputs.\n    re_decimal = re.compile(r'\\.0*\\s*$')  # allow e.g. '1.0' as an int, but not '1.2'\n    def __init__(self, **kwargs):",
        "detail": "backend.rest_framework.fields",
        "documentation": {}
    },
    {
        "label": "FloatField",
        "kind": 6,
        "importPath": "backend.rest_framework.fields",
        "description": "backend.rest_framework.fields",
        "peekOfCode": "class FloatField(Field):\n    default_error_messages = {\n        'invalid': _('A valid number is required.'),\n        'max_value': _('Ensure this value is less than or equal to {max_value}.'),\n        'min_value': _('Ensure this value is greater than or equal to {min_value}.'),\n        'max_string_length': _('String value too large.')\n    }\n    MAX_STRING_LENGTH = 1000  # Guard against malicious string inputs.\n    def __init__(self, **kwargs):\n        self.max_value = kwargs.pop('max_value', None)",
        "detail": "backend.rest_framework.fields",
        "documentation": {}
    },
    {
        "label": "DecimalField",
        "kind": 6,
        "importPath": "backend.rest_framework.fields",
        "description": "backend.rest_framework.fields",
        "peekOfCode": "class DecimalField(Field):\n    default_error_messages = {\n        'invalid': _('A valid number is required.'),\n        'max_value': _('Ensure this value is less than or equal to {max_value}.'),\n        'min_value': _('Ensure this value is greater than or equal to {min_value}.'),\n        'max_digits': _('Ensure that there are no more than {max_digits} digits in total.'),\n        'max_decimal_places': _('Ensure that there are no more than {max_decimal_places} decimal places.'),\n        'max_whole_digits': _('Ensure that there are no more than {max_whole_digits} digits before the decimal point.'),\n        'max_string_length': _('String value too large.')\n    }",
        "detail": "backend.rest_framework.fields",
        "documentation": {}
    },
    {
        "label": "DateTimeField",
        "kind": 6,
        "importPath": "backend.rest_framework.fields",
        "description": "backend.rest_framework.fields",
        "peekOfCode": "class DateTimeField(Field):\n    default_error_messages = {\n        'invalid': _('Datetime has wrong format. Use one of these formats instead: {format}.'),\n        'date': _('Expected a datetime but got a date.'),\n        'make_aware': _('Invalid datetime for the timezone \"{timezone}\".'),\n        'overflow': _('Datetime value out of range.')\n    }\n    datetime_parser = datetime.datetime.strptime\n    def __init__(self, format=empty, input_formats=None, default_timezone=None, *args, **kwargs):\n        if format is not empty:",
        "detail": "backend.rest_framework.fields",
        "documentation": {}
    },
    {
        "label": "DateField",
        "kind": 6,
        "importPath": "backend.rest_framework.fields",
        "description": "backend.rest_framework.fields",
        "peekOfCode": "class DateField(Field):\n    default_error_messages = {\n        'invalid': _('Date has wrong format. Use one of these formats instead: {format}.'),\n        'datetime': _('Expected a date but got a datetime.'),\n    }\n    datetime_parser = datetime.datetime.strptime\n    def __init__(self, format=empty, input_formats=None, *args, **kwargs):\n        if format is not empty:\n            self.format = format\n        if input_formats is not None:",
        "detail": "backend.rest_framework.fields",
        "documentation": {}
    },
    {
        "label": "TimeField",
        "kind": 6,
        "importPath": "backend.rest_framework.fields",
        "description": "backend.rest_framework.fields",
        "peekOfCode": "class TimeField(Field):\n    default_error_messages = {\n        'invalid': _('Time has wrong format. Use one of these formats instead: {format}.'),\n    }\n    datetime_parser = datetime.datetime.strptime\n    def __init__(self, format=empty, input_formats=None, *args, **kwargs):\n        if format is not empty:\n            self.format = format\n        if input_formats is not None:\n            self.input_formats = input_formats",
        "detail": "backend.rest_framework.fields",
        "documentation": {}
    },
    {
        "label": "DurationField",
        "kind": 6,
        "importPath": "backend.rest_framework.fields",
        "description": "backend.rest_framework.fields",
        "peekOfCode": "class DurationField(Field):\n    default_error_messages = {\n        'invalid': _('Duration has wrong format. Use one of these formats instead: {format}.'),\n        'max_value': _('Ensure this value is less than or equal to {max_value}.'),\n        'min_value': _('Ensure this value is greater than or equal to {min_value}.'),\n    }\n    def __init__(self, **kwargs):\n        self.max_value = kwargs.pop('max_value', None)\n        self.min_value = kwargs.pop('min_value', None)\n        super().__init__(**kwargs)",
        "detail": "backend.rest_framework.fields",
        "documentation": {}
    },
    {
        "label": "ChoiceField",
        "kind": 6,
        "importPath": "backend.rest_framework.fields",
        "description": "backend.rest_framework.fields",
        "peekOfCode": "class ChoiceField(Field):\n    default_error_messages = {\n        'invalid_choice': _('\"{input}\" is not a valid choice.')\n    }\n    html_cutoff = None\n    html_cutoff_text = _('More than {count} items...')\n    def __init__(self, choices, **kwargs):\n        self.choices = choices\n        self.html_cutoff = kwargs.pop('html_cutoff', self.html_cutoff)\n        self.html_cutoff_text = kwargs.pop('html_cutoff_text', self.html_cutoff_text)",
        "detail": "backend.rest_framework.fields",
        "documentation": {}
    },
    {
        "label": "MultipleChoiceField",
        "kind": 6,
        "importPath": "backend.rest_framework.fields",
        "description": "backend.rest_framework.fields",
        "peekOfCode": "class MultipleChoiceField(ChoiceField):\n    default_error_messages = {\n        'invalid_choice': _('\"{input}\" is not a valid choice.'),\n        'not_a_list': _('Expected a list of items but got type \"{input_type}\".'),\n        'empty': _('This selection may not be empty.')\n    }\n    default_empty_html = []\n    def __init__(self, *args, **kwargs):\n        self.allow_empty = kwargs.pop('allow_empty', True)\n        super().__init__(*args, **kwargs)",
        "detail": "backend.rest_framework.fields",
        "documentation": {}
    },
    {
        "label": "FilePathField",
        "kind": 6,
        "importPath": "backend.rest_framework.fields",
        "description": "backend.rest_framework.fields",
        "peekOfCode": "class FilePathField(ChoiceField):\n    default_error_messages = {\n        'invalid_choice': _('\"{input}\" is not a valid path choice.')\n    }\n    def __init__(self, path, match=None, recursive=False, allow_files=True,\n                 allow_folders=False, required=None, **kwargs):\n        # Defer to Django's FilePathField implementation to get the\n        # valid set of choices.\n        field = DjangoFilePathField(\n            path, match=match, recursive=recursive, allow_files=allow_files,",
        "detail": "backend.rest_framework.fields",
        "documentation": {}
    },
    {
        "label": "FileField",
        "kind": 6,
        "importPath": "backend.rest_framework.fields",
        "description": "backend.rest_framework.fields",
        "peekOfCode": "class FileField(Field):\n    default_error_messages = {\n        'required': _('No file was submitted.'),\n        'invalid': _('The submitted data was not a file. Check the encoding type on the form.'),\n        'no_name': _('No filename could be determined.'),\n        'empty': _('The submitted file is empty.'),\n        'max_length': _('Ensure this filename has at most {max_length} characters (it has {length}).'),\n    }\n    def __init__(self, *args, **kwargs):\n        self.max_length = kwargs.pop('max_length', None)",
        "detail": "backend.rest_framework.fields",
        "documentation": {}
    },
    {
        "label": "ImageField",
        "kind": 6,
        "importPath": "backend.rest_framework.fields",
        "description": "backend.rest_framework.fields",
        "peekOfCode": "class ImageField(FileField):\n    default_error_messages = {\n        'invalid_image': _(\n            'Upload a valid image. The file you uploaded was either not an image or a corrupted image.'\n        ),\n    }\n    def __init__(self, *args, **kwargs):\n        self._DjangoImageField = kwargs.pop('_DjangoImageField', DjangoImageField)\n        super().__init__(*args, **kwargs)\n    def to_internal_value(self, data):",
        "detail": "backend.rest_framework.fields",
        "documentation": {}
    },
    {
        "label": "_UnvalidatedField",
        "kind": 6,
        "importPath": "backend.rest_framework.fields",
        "description": "backend.rest_framework.fields",
        "peekOfCode": "class _UnvalidatedField(Field):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.allow_blank = True\n        self.allow_null = True\n    def to_internal_value(self, data):\n        return data\n    def to_representation(self, value):\n        return value\nclass ListField(Field):",
        "detail": "backend.rest_framework.fields",
        "documentation": {}
    },
    {
        "label": "ListField",
        "kind": 6,
        "importPath": "backend.rest_framework.fields",
        "description": "backend.rest_framework.fields",
        "peekOfCode": "class ListField(Field):\n    child = _UnvalidatedField()\n    initial = []\n    default_error_messages = {\n        'not_a_list': _('Expected a list of items but got type \"{input_type}\".'),\n        'empty': _('This list may not be empty.'),\n        'min_length': _('Ensure this field has at least {min_length} elements.'),\n        'max_length': _('Ensure this field has no more than {max_length} elements.')\n    }\n    def __init__(self, *args, **kwargs):",
        "detail": "backend.rest_framework.fields",
        "documentation": {}
    },
    {
        "label": "DictField",
        "kind": 6,
        "importPath": "backend.rest_framework.fields",
        "description": "backend.rest_framework.fields",
        "peekOfCode": "class DictField(Field):\n    child = _UnvalidatedField()\n    initial = {}\n    default_error_messages = {\n        'not_a_dict': _('Expected a dictionary of items but got type \"{input_type}\".'),\n        'empty': _('This dictionary may not be empty.'),\n    }\n    def __init__(self, *args, **kwargs):\n        self.child = kwargs.pop('child', copy.deepcopy(self.child))\n        self.allow_empty = kwargs.pop('allow_empty', True)",
        "detail": "backend.rest_framework.fields",
        "documentation": {}
    },
    {
        "label": "HStoreField",
        "kind": 6,
        "importPath": "backend.rest_framework.fields",
        "description": "backend.rest_framework.fields",
        "peekOfCode": "class HStoreField(DictField):\n    child = CharField(allow_blank=True, allow_null=True)\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        assert isinstance(self.child, CharField), (\n            \"The `child` argument must be an instance of `CharField`, \"\n            \"as the hstore extension stores values as strings.\"\n        )\nclass JSONField(Field):\n    default_error_messages = {",
        "detail": "backend.rest_framework.fields",
        "documentation": {}
    },
    {
        "label": "JSONField",
        "kind": 6,
        "importPath": "backend.rest_framework.fields",
        "description": "backend.rest_framework.fields",
        "peekOfCode": "class JSONField(Field):\n    default_error_messages = {\n        'invalid': _('Value must be valid JSON.')\n    }\n    # Workaround for isinstance calls when importing the field isn't possible\n    _is_jsonfield = True\n    def __init__(self, *args, **kwargs):\n        self.binary = kwargs.pop('binary', False)\n        self.encoder = kwargs.pop('encoder', None)\n        self.decoder = kwargs.pop('decoder', None)",
        "detail": "backend.rest_framework.fields",
        "documentation": {}
    },
    {
        "label": "ReadOnlyField",
        "kind": 6,
        "importPath": "backend.rest_framework.fields",
        "description": "backend.rest_framework.fields",
        "peekOfCode": "class ReadOnlyField(Field):\n    \"\"\"\n    A read-only field that simply returns the field value.\n    If the field is a method with no parameters, the method will be called\n    and its return value used as the representation.\n    For example, the following would call `get_expiry_date()` on the object:\n    class ExampleSerializer(Serializer):\n        expiry_date = ReadOnlyField(source='get_expiry_date')\n    \"\"\"\n    def __init__(self, **kwargs):",
        "detail": "backend.rest_framework.fields",
        "documentation": {}
    },
    {
        "label": "HiddenField",
        "kind": 6,
        "importPath": "backend.rest_framework.fields",
        "description": "backend.rest_framework.fields",
        "peekOfCode": "class HiddenField(Field):\n    \"\"\"\n    A hidden field does not take input from the user, or present any output,\n    but it does populate a field in `validated_data`, based on its default\n    value. This is particularly useful when we have a `unique_for_date`\n    constraint on a pair of fields, as we need some way to include the date in\n    the validated data.\n    \"\"\"\n    def __init__(self, **kwargs):\n        assert 'default' in kwargs, 'default is a required argument.'",
        "detail": "backend.rest_framework.fields",
        "documentation": {}
    },
    {
        "label": "SerializerMethodField",
        "kind": 6,
        "importPath": "backend.rest_framework.fields",
        "description": "backend.rest_framework.fields",
        "peekOfCode": "class SerializerMethodField(Field):\n    \"\"\"\n    A read-only field that get its representation from calling a method on the\n    parent serializer class. The method called will be of the form\n    \"get_{field_name}\", and should take a single argument, which is the\n    object being serialized.\n    For example:\n    class ExampleSerializer(self):\n        extra_info = SerializerMethodField()\n        def get_extra_info(self, obj):",
        "detail": "backend.rest_framework.fields",
        "documentation": {}
    },
    {
        "label": "ModelField",
        "kind": 6,
        "importPath": "backend.rest_framework.fields",
        "description": "backend.rest_framework.fields",
        "peekOfCode": "class ModelField(Field):\n    \"\"\"\n    A generic field that can be used against an arbitrary model field.\n    This is used by `ModelSerializer` when dealing with custom model fields,\n    that do not have a serializer field to be mapped to.\n    \"\"\"\n    default_error_messages = {\n        'max_length': _('Ensure this field has no more than {max_length} characters.'),\n    }\n    def __init__(self, model_field, **kwargs):",
        "detail": "backend.rest_framework.fields",
        "documentation": {}
    },
    {
        "label": "is_simple_callable",
        "kind": 2,
        "importPath": "backend.rest_framework.fields",
        "description": "backend.rest_framework.fields",
        "peekOfCode": "def is_simple_callable(obj):\n    \"\"\"\n    True if the object is a callable that takes no arguments.\n    \"\"\"\n    # Bail early since we cannot inspect built-in function signatures.\n    if inspect.isbuiltin(obj):\n        raise BuiltinSignatureError(\n            'Built-in function signatures are not inspectable. '\n            'Wrap the function call in a simple, pure Python function.')\n    if not (inspect.isfunction(obj) or inspect.ismethod(obj) or isinstance(obj, functools.partial)):",
        "detail": "backend.rest_framework.fields",
        "documentation": {}
    },
    {
        "label": "get_attribute",
        "kind": 2,
        "importPath": "backend.rest_framework.fields",
        "description": "backend.rest_framework.fields",
        "peekOfCode": "def get_attribute(instance, attrs):\n    \"\"\"\n    Similar to Python's built in `getattr(instance, attr)`,\n    but takes a list of nested attributes, instead of a single attribute.\n    Also accepts either attribute lookup on objects or dictionary lookups.\n    \"\"\"\n    for attr in attrs:\n        try:\n            if isinstance(instance, Mapping):\n                instance = instance[attr]",
        "detail": "backend.rest_framework.fields",
        "documentation": {}
    },
    {
        "label": "set_value",
        "kind": 2,
        "importPath": "backend.rest_framework.fields",
        "description": "backend.rest_framework.fields",
        "peekOfCode": "def set_value(dictionary, keys, value):\n    \"\"\"\n    Similar to Python's built in `dictionary[key] = value`,\n    but takes a list of nested keys instead of a single key.\n    set_value({'a': 1}, [], {'b': 2}) -> {'a': 1, 'b': 2}\n    set_value({'a': 1}, ['x'], 2) -> {'a': 1, 'x': 2}\n    set_value({'a': 1}, ['x', 'y'], 2) -> {'a': 1, 'x': {'y': 2}}\n    \"\"\"\n    if not keys:\n        dictionary.update(value)",
        "detail": "backend.rest_framework.fields",
        "documentation": {}
    },
    {
        "label": "to_choices_dict",
        "kind": 2,
        "importPath": "backend.rest_framework.fields",
        "description": "backend.rest_framework.fields",
        "peekOfCode": "def to_choices_dict(choices):\n    \"\"\"\n    Convert choices into key/value dicts.\n    to_choices_dict([1]) -> {1: 1}\n    to_choices_dict([(1, '1st'), (2, '2nd')]) -> {1: '1st', 2: '2nd'}\n    to_choices_dict([('Group', ((1, '1st'), 2))]) -> {'Group': {1: '1st', 2: '2'}}\n    \"\"\"\n    # Allow single, paired or grouped choices style:\n    # choices = [1, 2, 3]\n    # choices = [(1, 'First'), (2, 'Second'), (3, 'Third')]",
        "detail": "backend.rest_framework.fields",
        "documentation": {}
    },
    {
        "label": "flatten_choices_dict",
        "kind": 2,
        "importPath": "backend.rest_framework.fields",
        "description": "backend.rest_framework.fields",
        "peekOfCode": "def flatten_choices_dict(choices):\n    \"\"\"\n    Convert a group choices dict into a flat dict of choices.\n    flatten_choices_dict({1: '1st', 2: '2nd'}) -> {1: '1st', 2: '2nd'}\n    flatten_choices_dict({'Group': {1: '1st', 2: '2nd'}}) -> {1: '1st', 2: '2nd'}\n    \"\"\"\n    ret = OrderedDict()\n    for key, value in choices.items():\n        if isinstance(value, dict):\n            # grouped choices (category, sub choices)",
        "detail": "backend.rest_framework.fields",
        "documentation": {}
    },
    {
        "label": "iter_options",
        "kind": 2,
        "importPath": "backend.rest_framework.fields",
        "description": "backend.rest_framework.fields",
        "peekOfCode": "def iter_options(grouped_choices, cutoff=None, cutoff_text=None):\n    \"\"\"\n    Helper function for options and option groups in templates.\n    \"\"\"\n    class StartOptionGroup:\n        start_option_group = True\n        end_option_group = False\n        def __init__(self, label):\n            self.label = label\n    class EndOptionGroup:",
        "detail": "backend.rest_framework.fields",
        "documentation": {}
    },
    {
        "label": "get_error_detail",
        "kind": 2,
        "importPath": "backend.rest_framework.fields",
        "description": "backend.rest_framework.fields",
        "peekOfCode": "def get_error_detail(exc_info):\n    \"\"\"\n    Given a Django ValidationError, return a list of ErrorDetail,\n    with the `code` populated.\n    \"\"\"\n    code = getattr(exc_info, 'code', None) or 'invalid'\n    try:\n        error_dict = exc_info.error_dict\n    except AttributeError:\n        return [",
        "detail": "backend.rest_framework.fields",
        "documentation": {}
    },
    {
        "label": "REGEX_TYPE",
        "kind": 5,
        "importPath": "backend.rest_framework.fields",
        "description": "backend.rest_framework.fields",
        "peekOfCode": "REGEX_TYPE = type(re.compile(''))\nNOT_READ_ONLY_WRITE_ONLY = 'May not set both `read_only` and `write_only`'\nNOT_READ_ONLY_REQUIRED = 'May not set both `read_only` and `required`'\nNOT_REQUIRED_DEFAULT = 'May not set both `required` and `default`'\nUSE_READONLYFIELD = 'Field(read_only=True) should be ReadOnlyField'\nMISSING_ERROR_MESSAGE = (\n    'ValidationError raised by `{class_name}`, but error key `{key}` does '\n    'not exist in the `error_messages` dictionary.'\n)\nclass Field:",
        "detail": "backend.rest_framework.fields",
        "documentation": {}
    },
    {
        "label": "NOT_READ_ONLY_WRITE_ONLY",
        "kind": 5,
        "importPath": "backend.rest_framework.fields",
        "description": "backend.rest_framework.fields",
        "peekOfCode": "NOT_READ_ONLY_WRITE_ONLY = 'May not set both `read_only` and `write_only`'\nNOT_READ_ONLY_REQUIRED = 'May not set both `read_only` and `required`'\nNOT_REQUIRED_DEFAULT = 'May not set both `required` and `default`'\nUSE_READONLYFIELD = 'Field(read_only=True) should be ReadOnlyField'\nMISSING_ERROR_MESSAGE = (\n    'ValidationError raised by `{class_name}`, but error key `{key}` does '\n    'not exist in the `error_messages` dictionary.'\n)\nclass Field:\n    _creation_counter = 0",
        "detail": "backend.rest_framework.fields",
        "documentation": {}
    },
    {
        "label": "NOT_READ_ONLY_REQUIRED",
        "kind": 5,
        "importPath": "backend.rest_framework.fields",
        "description": "backend.rest_framework.fields",
        "peekOfCode": "NOT_READ_ONLY_REQUIRED = 'May not set both `read_only` and `required`'\nNOT_REQUIRED_DEFAULT = 'May not set both `required` and `default`'\nUSE_READONLYFIELD = 'Field(read_only=True) should be ReadOnlyField'\nMISSING_ERROR_MESSAGE = (\n    'ValidationError raised by `{class_name}`, but error key `{key}` does '\n    'not exist in the `error_messages` dictionary.'\n)\nclass Field:\n    _creation_counter = 0\n    default_error_messages = {",
        "detail": "backend.rest_framework.fields",
        "documentation": {}
    },
    {
        "label": "NOT_REQUIRED_DEFAULT",
        "kind": 5,
        "importPath": "backend.rest_framework.fields",
        "description": "backend.rest_framework.fields",
        "peekOfCode": "NOT_REQUIRED_DEFAULT = 'May not set both `required` and `default`'\nUSE_READONLYFIELD = 'Field(read_only=True) should be ReadOnlyField'\nMISSING_ERROR_MESSAGE = (\n    'ValidationError raised by `{class_name}`, but error key `{key}` does '\n    'not exist in the `error_messages` dictionary.'\n)\nclass Field:\n    _creation_counter = 0\n    default_error_messages = {\n        'required': _('This field is required.'),",
        "detail": "backend.rest_framework.fields",
        "documentation": {}
    },
    {
        "label": "USE_READONLYFIELD",
        "kind": 5,
        "importPath": "backend.rest_framework.fields",
        "description": "backend.rest_framework.fields",
        "peekOfCode": "USE_READONLYFIELD = 'Field(read_only=True) should be ReadOnlyField'\nMISSING_ERROR_MESSAGE = (\n    'ValidationError raised by `{class_name}`, but error key `{key}` does '\n    'not exist in the `error_messages` dictionary.'\n)\nclass Field:\n    _creation_counter = 0\n    default_error_messages = {\n        'required': _('This field is required.'),\n        'null': _('This field may not be null.')",
        "detail": "backend.rest_framework.fields",
        "documentation": {}
    },
    {
        "label": "MISSING_ERROR_MESSAGE",
        "kind": 5,
        "importPath": "backend.rest_framework.fields",
        "description": "backend.rest_framework.fields",
        "peekOfCode": "MISSING_ERROR_MESSAGE = (\n    'ValidationError raised by `{class_name}`, but error key `{key}` does '\n    'not exist in the `error_messages` dictionary.'\n)\nclass Field:\n    _creation_counter = 0\n    default_error_messages = {\n        'required': _('This field is required.'),\n        'null': _('This field may not be null.')\n    }",
        "detail": "backend.rest_framework.fields",
        "documentation": {}
    },
    {
        "label": "BaseFilterBackend",
        "kind": 6,
        "importPath": "backend.rest_framework.filters",
        "description": "backend.rest_framework.filters",
        "peekOfCode": "class BaseFilterBackend:\n    \"\"\"\n    A base class from which all filter backend classes should inherit.\n    \"\"\"\n    def filter_queryset(self, request, queryset, view):\n        \"\"\"\n        Return a filtered queryset.\n        \"\"\"\n        raise NotImplementedError(\".filter_queryset() must be overridden.\")\n    def get_schema_fields(self, view):",
        "detail": "backend.rest_framework.filters",
        "documentation": {}
    },
    {
        "label": "SearchFilter",
        "kind": 6,
        "importPath": "backend.rest_framework.filters",
        "description": "backend.rest_framework.filters",
        "peekOfCode": "class SearchFilter(BaseFilterBackend):\n    # The URL query parameter used for the search.\n    search_param = api_settings.SEARCH_PARAM\n    template = 'rest_framework/filters/search.html'\n    lookup_prefixes = {\n        '^': 'istartswith',\n        '=': 'iexact',\n        '@': 'search',\n        '$': 'iregex',\n    }",
        "detail": "backend.rest_framework.filters",
        "documentation": {}
    },
    {
        "label": "OrderingFilter",
        "kind": 6,
        "importPath": "backend.rest_framework.filters",
        "description": "backend.rest_framework.filters",
        "peekOfCode": "class OrderingFilter(BaseFilterBackend):\n    # The URL query parameter used for the ordering.\n    ordering_param = api_settings.ORDERING_PARAM\n    ordering_fields = None\n    ordering_title = _('Ordering')\n    ordering_description = _('Which field to use when ordering the results.')\n    template = 'rest_framework/filters/ordering.html'\n    def get_ordering(self, request, queryset, view):\n        \"\"\"\n        Ordering is set by a comma delimited ?ordering=... query parameter.",
        "detail": "backend.rest_framework.filters",
        "documentation": {}
    },
    {
        "label": "GenericAPIView",
        "kind": 6,
        "importPath": "backend.rest_framework.generics",
        "description": "backend.rest_framework.generics",
        "peekOfCode": "class GenericAPIView(views.APIView):\n    \"\"\"\n    Base class for all other generic views.\n    \"\"\"\n    # You'll need to either set these attributes,\n    # or override `get_queryset()`/`get_serializer_class()`.\n    # If you are overriding a view method, it is important that you call\n    # `get_queryset()` instead of accessing the `queryset` property directly,\n    # as `queryset` will get evaluated only once, and those results are cached\n    # for all subsequent requests.",
        "detail": "backend.rest_framework.generics",
        "documentation": {}
    },
    {
        "label": "CreateAPIView",
        "kind": 6,
        "importPath": "backend.rest_framework.generics",
        "description": "backend.rest_framework.generics",
        "peekOfCode": "class CreateAPIView(mixins.CreateModelMixin,\n                    GenericAPIView):\n    \"\"\"\n    Concrete view for creating a model instance.\n    \"\"\"\n    def post(self, request, *args, **kwargs):\n        return self.create(request, *args, **kwargs)\nclass ListAPIView(mixins.ListModelMixin,\n                  GenericAPIView):\n    \"\"\"",
        "detail": "backend.rest_framework.generics",
        "documentation": {}
    },
    {
        "label": "ListAPIView",
        "kind": 6,
        "importPath": "backend.rest_framework.generics",
        "description": "backend.rest_framework.generics",
        "peekOfCode": "class ListAPIView(mixins.ListModelMixin,\n                  GenericAPIView):\n    \"\"\"\n    Concrete view for listing a queryset.\n    \"\"\"\n    def get(self, request, *args, **kwargs):\n        return self.list(request, *args, **kwargs)\nclass RetrieveAPIView(mixins.RetrieveModelMixin,\n                      GenericAPIView):\n    \"\"\"",
        "detail": "backend.rest_framework.generics",
        "documentation": {}
    },
    {
        "label": "RetrieveAPIView",
        "kind": 6,
        "importPath": "backend.rest_framework.generics",
        "description": "backend.rest_framework.generics",
        "peekOfCode": "class RetrieveAPIView(mixins.RetrieveModelMixin,\n                      GenericAPIView):\n    \"\"\"\n    Concrete view for retrieving a model instance.\n    \"\"\"\n    def get(self, request, *args, **kwargs):\n        return self.retrieve(request, *args, **kwargs)\nclass DestroyAPIView(mixins.DestroyModelMixin,\n                     GenericAPIView):\n    \"\"\"",
        "detail": "backend.rest_framework.generics",
        "documentation": {}
    },
    {
        "label": "DestroyAPIView",
        "kind": 6,
        "importPath": "backend.rest_framework.generics",
        "description": "backend.rest_framework.generics",
        "peekOfCode": "class DestroyAPIView(mixins.DestroyModelMixin,\n                     GenericAPIView):\n    \"\"\"\n    Concrete view for deleting a model instance.\n    \"\"\"\n    def delete(self, request, *args, **kwargs):\n        return self.destroy(request, *args, **kwargs)\nclass UpdateAPIView(mixins.UpdateModelMixin,\n                    GenericAPIView):\n    \"\"\"",
        "detail": "backend.rest_framework.generics",
        "documentation": {}
    },
    {
        "label": "UpdateAPIView",
        "kind": 6,
        "importPath": "backend.rest_framework.generics",
        "description": "backend.rest_framework.generics",
        "peekOfCode": "class UpdateAPIView(mixins.UpdateModelMixin,\n                    GenericAPIView):\n    \"\"\"\n    Concrete view for updating a model instance.\n    \"\"\"\n    def put(self, request, *args, **kwargs):\n        return self.update(request, *args, **kwargs)\n    def patch(self, request, *args, **kwargs):\n        return self.partial_update(request, *args, **kwargs)\nclass ListCreateAPIView(mixins.ListModelMixin,",
        "detail": "backend.rest_framework.generics",
        "documentation": {}
    },
    {
        "label": "ListCreateAPIView",
        "kind": 6,
        "importPath": "backend.rest_framework.generics",
        "description": "backend.rest_framework.generics",
        "peekOfCode": "class ListCreateAPIView(mixins.ListModelMixin,\n                        mixins.CreateModelMixin,\n                        GenericAPIView):\n    \"\"\"\n    Concrete view for listing a queryset or creating a model instance.\n    \"\"\"\n    def get(self, request, *args, **kwargs):\n        return self.list(request, *args, **kwargs)\n    def post(self, request, *args, **kwargs):\n        return self.create(request, *args, **kwargs)",
        "detail": "backend.rest_framework.generics",
        "documentation": {}
    },
    {
        "label": "RetrieveUpdateAPIView",
        "kind": 6,
        "importPath": "backend.rest_framework.generics",
        "description": "backend.rest_framework.generics",
        "peekOfCode": "class RetrieveUpdateAPIView(mixins.RetrieveModelMixin,\n                            mixins.UpdateModelMixin,\n                            GenericAPIView):\n    \"\"\"\n    Concrete view for retrieving, updating a model instance.\n    \"\"\"\n    def get(self, request, *args, **kwargs):\n        return self.retrieve(request, *args, **kwargs)\n    def put(self, request, *args, **kwargs):\n        return self.update(request, *args, **kwargs)",
        "detail": "backend.rest_framework.generics",
        "documentation": {}
    },
    {
        "label": "RetrieveDestroyAPIView",
        "kind": 6,
        "importPath": "backend.rest_framework.generics",
        "description": "backend.rest_framework.generics",
        "peekOfCode": "class RetrieveDestroyAPIView(mixins.RetrieveModelMixin,\n                             mixins.DestroyModelMixin,\n                             GenericAPIView):\n    \"\"\"\n    Concrete view for retrieving or deleting a model instance.\n    \"\"\"\n    def get(self, request, *args, **kwargs):\n        return self.retrieve(request, *args, **kwargs)\n    def delete(self, request, *args, **kwargs):\n        return self.destroy(request, *args, **kwargs)",
        "detail": "backend.rest_framework.generics",
        "documentation": {}
    },
    {
        "label": "RetrieveUpdateDestroyAPIView",
        "kind": 6,
        "importPath": "backend.rest_framework.generics",
        "description": "backend.rest_framework.generics",
        "peekOfCode": "class RetrieveUpdateDestroyAPIView(mixins.RetrieveModelMixin,\n                                   mixins.UpdateModelMixin,\n                                   mixins.DestroyModelMixin,\n                                   GenericAPIView):\n    \"\"\"\n    Concrete view for retrieving, updating or deleting a model instance.\n    \"\"\"\n    def get(self, request, *args, **kwargs):\n        return self.retrieve(request, *args, **kwargs)\n    def put(self, request, *args, **kwargs):",
        "detail": "backend.rest_framework.generics",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "kind": 2,
        "importPath": "backend.rest_framework.generics",
        "description": "backend.rest_framework.generics",
        "peekOfCode": "def get_object_or_404(queryset, *filter_args, **filter_kwargs):\n    \"\"\"\n    Same as Django's standard shortcut, but make sure to also raise 404\n    if the filter_kwargs don't match the required types.\n    \"\"\"\n    try:\n        return _get_object_or_404(queryset, *filter_args, **filter_kwargs)\n    except (TypeError, ValueError, ValidationError):\n        raise Http404\nclass GenericAPIView(views.APIView):",
        "detail": "backend.rest_framework.generics",
        "documentation": {}
    },
    {
        "label": "BaseMetadata",
        "kind": 6,
        "importPath": "backend.rest_framework.metadata",
        "description": "backend.rest_framework.metadata",
        "peekOfCode": "class BaseMetadata:\n    def determine_metadata(self, request, view):\n        \"\"\"\n        Return a dictionary of metadata about the view.\n        Used to return responses for OPTIONS requests.\n        \"\"\"\n        raise NotImplementedError(\".determine_metadata() must be overridden.\")\nclass SimpleMetadata(BaseMetadata):\n    \"\"\"\n    This is the default metadata implementation.",
        "detail": "backend.rest_framework.metadata",
        "documentation": {}
    },
    {
        "label": "SimpleMetadata",
        "kind": 6,
        "importPath": "backend.rest_framework.metadata",
        "description": "backend.rest_framework.metadata",
        "peekOfCode": "class SimpleMetadata(BaseMetadata):\n    \"\"\"\n    This is the default metadata implementation.\n    It returns an ad-hoc set of information about the view.\n    There are not any formalized standards for `OPTIONS` responses\n    for us to base this on.\n    \"\"\"\n    label_lookup = ClassLookupDict({\n        serializers.Field: 'field',\n        serializers.BooleanField: 'boolean',",
        "detail": "backend.rest_framework.metadata",
        "documentation": {}
    },
    {
        "label": "CreateModelMixin",
        "kind": 6,
        "importPath": "backend.rest_framework.mixins",
        "description": "backend.rest_framework.mixins",
        "peekOfCode": "class CreateModelMixin:\n    \"\"\"\n    Create a model instance.\n    \"\"\"\n    def create(self, request, *args, **kwargs):\n        serializer = self.get_serializer(data=request.data)\n        serializer.is_valid(raise_exception=True)\n        self.perform_create(serializer)\n        headers = self.get_success_headers(serializer.data)\n        return Response(serializer.data, status=status.HTTP_201_CREATED, headers=headers)",
        "detail": "backend.rest_framework.mixins",
        "documentation": {}
    },
    {
        "label": "ListModelMixin",
        "kind": 6,
        "importPath": "backend.rest_framework.mixins",
        "description": "backend.rest_framework.mixins",
        "peekOfCode": "class ListModelMixin:\n    \"\"\"\n    List a queryset.\n    \"\"\"\n    def list(self, request, *args, **kwargs):\n        queryset = self.filter_queryset(self.get_queryset())\n        page = self.paginate_queryset(queryset)\n        if page is not None:\n            serializer = self.get_serializer(page, many=True)\n            return self.get_paginated_response(serializer.data)",
        "detail": "backend.rest_framework.mixins",
        "documentation": {}
    },
    {
        "label": "RetrieveModelMixin",
        "kind": 6,
        "importPath": "backend.rest_framework.mixins",
        "description": "backend.rest_framework.mixins",
        "peekOfCode": "class RetrieveModelMixin:\n    \"\"\"\n    Retrieve a model instance.\n    \"\"\"\n    def retrieve(self, request, *args, **kwargs):\n        instance = self.get_object()\n        serializer = self.get_serializer(instance)\n        return Response(serializer.data)\nclass UpdateModelMixin:\n    \"\"\"",
        "detail": "backend.rest_framework.mixins",
        "documentation": {}
    },
    {
        "label": "UpdateModelMixin",
        "kind": 6,
        "importPath": "backend.rest_framework.mixins",
        "description": "backend.rest_framework.mixins",
        "peekOfCode": "class UpdateModelMixin:\n    \"\"\"\n    Update a model instance.\n    \"\"\"\n    def update(self, request, *args, **kwargs):\n        partial = kwargs.pop('partial', False)\n        instance = self.get_object()\n        serializer = self.get_serializer(instance, data=request.data, partial=partial)\n        serializer.is_valid(raise_exception=True)\n        self.perform_update(serializer)",
        "detail": "backend.rest_framework.mixins",
        "documentation": {}
    },
    {
        "label": "DestroyModelMixin",
        "kind": 6,
        "importPath": "backend.rest_framework.mixins",
        "description": "backend.rest_framework.mixins",
        "peekOfCode": "class DestroyModelMixin:\n    \"\"\"\n    Destroy a model instance.\n    \"\"\"\n    def destroy(self, request, *args, **kwargs):\n        instance = self.get_object()\n        self.perform_destroy(instance)\n        return Response(status=status.HTTP_204_NO_CONTENT)\n    def perform_destroy(self, instance):\n        instance.delete()",
        "detail": "backend.rest_framework.mixins",
        "documentation": {}
    },
    {
        "label": "BaseContentNegotiation",
        "kind": 6,
        "importPath": "backend.rest_framework.negotiation",
        "description": "backend.rest_framework.negotiation",
        "peekOfCode": "class BaseContentNegotiation:\n    def select_parser(self, request, parsers):\n        raise NotImplementedError('.select_parser() must be implemented')\n    def select_renderer(self, request, renderers, format_suffix=None):\n        raise NotImplementedError('.select_renderer() must be implemented')\nclass DefaultContentNegotiation(BaseContentNegotiation):\n    settings = api_settings\n    def select_parser(self, request, parsers):\n        \"\"\"\n        Given a list of parsers and a media type, return the appropriate",
        "detail": "backend.rest_framework.negotiation",
        "documentation": {}
    },
    {
        "label": "DefaultContentNegotiation",
        "kind": 6,
        "importPath": "backend.rest_framework.negotiation",
        "description": "backend.rest_framework.negotiation",
        "peekOfCode": "class DefaultContentNegotiation(BaseContentNegotiation):\n    settings = api_settings\n    def select_parser(self, request, parsers):\n        \"\"\"\n        Given a list of parsers and a media type, return the appropriate\n        parser to handle the incoming request.\n        \"\"\"\n        for parser in parsers:\n            if media_type_matches(parser.media_type, request.content_type):\n                return parser",
        "detail": "backend.rest_framework.negotiation",
        "documentation": {}
    },
    {
        "label": "BasePagination",
        "kind": 6,
        "importPath": "backend.rest_framework.pagination",
        "description": "backend.rest_framework.pagination",
        "peekOfCode": "class BasePagination:\n    display_page_controls = False\n    def paginate_queryset(self, queryset, request, view=None):  # pragma: no cover\n        raise NotImplementedError('paginate_queryset() must be implemented.')\n    def get_paginated_response(self, data):  # pragma: no cover\n        raise NotImplementedError('get_paginated_response() must be implemented.')\n    def get_paginated_response_schema(self, schema):\n        return schema\n    def to_html(self):  # pragma: no cover\n        raise NotImplementedError('to_html() must be implemented to display page controls.')",
        "detail": "backend.rest_framework.pagination",
        "documentation": {}
    },
    {
        "label": "PageNumberPagination",
        "kind": 6,
        "importPath": "backend.rest_framework.pagination",
        "description": "backend.rest_framework.pagination",
        "peekOfCode": "class PageNumberPagination(BasePagination):\n    \"\"\"\n    A simple page number based style that supports page numbers as\n    query parameters. For example:\n    http://api.example.org/accounts/?page=4\n    http://api.example.org/accounts/?page=4&page_size=100\n    \"\"\"\n    # The default page size.\n    # Defaults to `None`, meaning pagination is disabled.\n    page_size = api_settings.PAGE_SIZE",
        "detail": "backend.rest_framework.pagination",
        "documentation": {}
    },
    {
        "label": "LimitOffsetPagination",
        "kind": 6,
        "importPath": "backend.rest_framework.pagination",
        "description": "backend.rest_framework.pagination",
        "peekOfCode": "class LimitOffsetPagination(BasePagination):\n    \"\"\"\n    A limit/offset based style. For example:\n    http://api.example.org/accounts/?limit=100\n    http://api.example.org/accounts/?offset=400&limit=100\n    \"\"\"\n    default_limit = api_settings.PAGE_SIZE\n    limit_query_param = 'limit'\n    limit_query_description = _('Number of results to return per page.')\n    offset_query_param = 'offset'",
        "detail": "backend.rest_framework.pagination",
        "documentation": {}
    },
    {
        "label": "CursorPagination",
        "kind": 6,
        "importPath": "backend.rest_framework.pagination",
        "description": "backend.rest_framework.pagination",
        "peekOfCode": "class CursorPagination(BasePagination):\n    \"\"\"\n    The cursor pagination implementation is necessarily complex.\n    For an overview of the position/offset style we use, see this post:\n    https://cra.mr/2011/03/08/building-cursors-for-the-disqus-api\n    \"\"\"\n    cursor_query_param = 'cursor'\n    cursor_query_description = _('The pagination cursor value.')\n    page_size = api_settings.PAGE_SIZE\n    invalid_cursor_message = _('Invalid cursor')",
        "detail": "backend.rest_framework.pagination",
        "documentation": {}
    },
    {
        "label": "Cursor",
        "kind": 5,
        "importPath": "backend.rest_framework.pagination",
        "description": "backend.rest_framework.pagination",
        "peekOfCode": "Cursor = namedtuple('Cursor', ['offset', 'reverse', 'position'])\nPageLink = namedtuple('PageLink', ['url', 'number', 'is_active', 'is_break'])\nPAGE_BREAK = PageLink(url=None, number=None, is_active=False, is_break=True)\nclass BasePagination:\n    display_page_controls = False\n    def paginate_queryset(self, queryset, request, view=None):  # pragma: no cover\n        raise NotImplementedError('paginate_queryset() must be implemented.')\n    def get_paginated_response(self, data):  # pragma: no cover\n        raise NotImplementedError('get_paginated_response() must be implemented.')\n    def get_paginated_response_schema(self, schema):",
        "detail": "backend.rest_framework.pagination",
        "documentation": {}
    },
    {
        "label": "PageLink",
        "kind": 5,
        "importPath": "backend.rest_framework.pagination",
        "description": "backend.rest_framework.pagination",
        "peekOfCode": "PageLink = namedtuple('PageLink', ['url', 'number', 'is_active', 'is_break'])\nPAGE_BREAK = PageLink(url=None, number=None, is_active=False, is_break=True)\nclass BasePagination:\n    display_page_controls = False\n    def paginate_queryset(self, queryset, request, view=None):  # pragma: no cover\n        raise NotImplementedError('paginate_queryset() must be implemented.')\n    def get_paginated_response(self, data):  # pragma: no cover\n        raise NotImplementedError('get_paginated_response() must be implemented.')\n    def get_paginated_response_schema(self, schema):\n        return schema",
        "detail": "backend.rest_framework.pagination",
        "documentation": {}
    },
    {
        "label": "PAGE_BREAK",
        "kind": 5,
        "importPath": "backend.rest_framework.pagination",
        "description": "backend.rest_framework.pagination",
        "peekOfCode": "PAGE_BREAK = PageLink(url=None, number=None, is_active=False, is_break=True)\nclass BasePagination:\n    display_page_controls = False\n    def paginate_queryset(self, queryset, request, view=None):  # pragma: no cover\n        raise NotImplementedError('paginate_queryset() must be implemented.')\n    def get_paginated_response(self, data):  # pragma: no cover\n        raise NotImplementedError('get_paginated_response() must be implemented.')\n    def get_paginated_response_schema(self, schema):\n        return schema\n    def to_html(self):  # pragma: no cover",
        "detail": "backend.rest_framework.pagination",
        "documentation": {}
    },
    {
        "label": "DataAndFiles",
        "kind": 6,
        "importPath": "backend.rest_framework.parsers",
        "description": "backend.rest_framework.parsers",
        "peekOfCode": "class DataAndFiles:\n    def __init__(self, data, files):\n        self.data = data\n        self.files = files\nclass BaseParser:\n    \"\"\"\n    All parsers should extend `BaseParser`, specifying a `media_type`\n    attribute, and overriding the `.parse()` method.\n    \"\"\"\n    media_type = None",
        "detail": "backend.rest_framework.parsers",
        "documentation": {}
    },
    {
        "label": "BaseParser",
        "kind": 6,
        "importPath": "backend.rest_framework.parsers",
        "description": "backend.rest_framework.parsers",
        "peekOfCode": "class BaseParser:\n    \"\"\"\n    All parsers should extend `BaseParser`, specifying a `media_type`\n    attribute, and overriding the `.parse()` method.\n    \"\"\"\n    media_type = None\n    def parse(self, stream, media_type=None, parser_context=None):\n        \"\"\"\n        Given a stream to read from, return the parsed representation.\n        Should return parsed data, or a `DataAndFiles` object consisting of the",
        "detail": "backend.rest_framework.parsers",
        "documentation": {}
    },
    {
        "label": "JSONParser",
        "kind": 6,
        "importPath": "backend.rest_framework.parsers",
        "description": "backend.rest_framework.parsers",
        "peekOfCode": "class JSONParser(BaseParser):\n    \"\"\"\n    Parses JSON-serialized data.\n    \"\"\"\n    media_type = 'application/json'\n    renderer_class = renderers.JSONRenderer\n    strict = api_settings.STRICT_JSON\n    def parse(self, stream, media_type=None, parser_context=None):\n        \"\"\"\n        Parses the incoming bytestream as JSON and returns the resulting data.",
        "detail": "backend.rest_framework.parsers",
        "documentation": {}
    },
    {
        "label": "FormParser",
        "kind": 6,
        "importPath": "backend.rest_framework.parsers",
        "description": "backend.rest_framework.parsers",
        "peekOfCode": "class FormParser(BaseParser):\n    \"\"\"\n    Parser for form data.\n    \"\"\"\n    media_type = 'application/x-www-form-urlencoded'\n    def parse(self, stream, media_type=None, parser_context=None):\n        \"\"\"\n        Parses the incoming bytestream as a URL encoded form,\n        and returns the resulting QueryDict.\n        \"\"\"",
        "detail": "backend.rest_framework.parsers",
        "documentation": {}
    },
    {
        "label": "MultiPartParser",
        "kind": 6,
        "importPath": "backend.rest_framework.parsers",
        "description": "backend.rest_framework.parsers",
        "peekOfCode": "class MultiPartParser(BaseParser):\n    \"\"\"\n    Parser for multipart form data, which may include file data.\n    \"\"\"\n    media_type = 'multipart/form-data'\n    def parse(self, stream, media_type=None, parser_context=None):\n        \"\"\"\n        Parses the incoming bytestream as a multipart encoded form,\n        and returns a DataAndFiles object.\n        `.data` will be a `QueryDict` containing all the form parameters.",
        "detail": "backend.rest_framework.parsers",
        "documentation": {}
    },
    {
        "label": "FileUploadParser",
        "kind": 6,
        "importPath": "backend.rest_framework.parsers",
        "description": "backend.rest_framework.parsers",
        "peekOfCode": "class FileUploadParser(BaseParser):\n    \"\"\"\n    Parser for file upload data.\n    \"\"\"\n    media_type = '*/*'\n    errors = {\n        'unhandled': 'FileUpload parse error - none of upload handlers can handle the stream',\n        'no_filename': 'Missing filename. Request should include a Content-Disposition header with a filename parameter.',\n    }\n    def parse(self, stream, media_type=None, parser_context=None):",
        "detail": "backend.rest_framework.parsers",
        "documentation": {}
    },
    {
        "label": "OperationHolderMixin",
        "kind": 6,
        "importPath": "backend.rest_framework.permissions",
        "description": "backend.rest_framework.permissions",
        "peekOfCode": "class OperationHolderMixin:\n    def __and__(self, other):\n        return OperandHolder(AND, self, other)\n    def __or__(self, other):\n        return OperandHolder(OR, self, other)\n    def __rand__(self, other):\n        return OperandHolder(AND, other, self)\n    def __ror__(self, other):\n        return OperandHolder(OR, other, self)\n    def __invert__(self):",
        "detail": "backend.rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "SingleOperandHolder",
        "kind": 6,
        "importPath": "backend.rest_framework.permissions",
        "description": "backend.rest_framework.permissions",
        "peekOfCode": "class SingleOperandHolder(OperationHolderMixin):\n    def __init__(self, operator_class, op1_class):\n        self.operator_class = operator_class\n        self.op1_class = op1_class\n    def __call__(self, *args, **kwargs):\n        op1 = self.op1_class(*args, **kwargs)\n        return self.operator_class(op1)\nclass OperandHolder(OperationHolderMixin):\n    def __init__(self, operator_class, op1_class, op2_class):\n        self.operator_class = operator_class",
        "detail": "backend.rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "OperandHolder",
        "kind": 6,
        "importPath": "backend.rest_framework.permissions",
        "description": "backend.rest_framework.permissions",
        "peekOfCode": "class OperandHolder(OperationHolderMixin):\n    def __init__(self, operator_class, op1_class, op2_class):\n        self.operator_class = operator_class\n        self.op1_class = op1_class\n        self.op2_class = op2_class\n    def __call__(self, *args, **kwargs):\n        op1 = self.op1_class(*args, **kwargs)\n        op2 = self.op2_class(*args, **kwargs)\n        return self.operator_class(op1, op2)\nclass AND:",
        "detail": "backend.rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "AND",
        "kind": 6,
        "importPath": "backend.rest_framework.permissions",
        "description": "backend.rest_framework.permissions",
        "peekOfCode": "class AND:\n    def __init__(self, op1, op2):\n        self.op1 = op1\n        self.op2 = op2\n    def has_permission(self, request, view):\n        return (\n            self.op1.has_permission(request, view) and\n            self.op2.has_permission(request, view)\n        )\n    def has_object_permission(self, request, view, obj):",
        "detail": "backend.rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "OR",
        "kind": 6,
        "importPath": "backend.rest_framework.permissions",
        "description": "backend.rest_framework.permissions",
        "peekOfCode": "class OR:\n    def __init__(self, op1, op2):\n        self.op1 = op1\n        self.op2 = op2\n    def has_permission(self, request, view):\n        return (\n            self.op1.has_permission(request, view) or\n            self.op2.has_permission(request, view)\n        )\n    def has_object_permission(self, request, view, obj):",
        "detail": "backend.rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "NOT",
        "kind": 6,
        "importPath": "backend.rest_framework.permissions",
        "description": "backend.rest_framework.permissions",
        "peekOfCode": "class NOT:\n    def __init__(self, op1):\n        self.op1 = op1\n    def has_permission(self, request, view):\n        return not self.op1.has_permission(request, view)\n    def has_object_permission(self, request, view, obj):\n        return not self.op1.has_object_permission(request, view, obj)\nclass BasePermissionMetaclass(OperationHolderMixin, type):\n    pass\nclass BasePermission(metaclass=BasePermissionMetaclass):",
        "detail": "backend.rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "BasePermissionMetaclass",
        "kind": 6,
        "importPath": "backend.rest_framework.permissions",
        "description": "backend.rest_framework.permissions",
        "peekOfCode": "class BasePermissionMetaclass(OperationHolderMixin, type):\n    pass\nclass BasePermission(metaclass=BasePermissionMetaclass):\n    \"\"\"\n    A base class from which all permission classes should inherit.\n    \"\"\"\n    def has_permission(self, request, view):\n        \"\"\"\n        Return `True` if permission is granted, `False` otherwise.\n        \"\"\"",
        "detail": "backend.rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "BasePermission",
        "kind": 6,
        "importPath": "backend.rest_framework.permissions",
        "description": "backend.rest_framework.permissions",
        "peekOfCode": "class BasePermission(metaclass=BasePermissionMetaclass):\n    \"\"\"\n    A base class from which all permission classes should inherit.\n    \"\"\"\n    def has_permission(self, request, view):\n        \"\"\"\n        Return `True` if permission is granted, `False` otherwise.\n        \"\"\"\n        return True\n    def has_object_permission(self, request, view, obj):",
        "detail": "backend.rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "AllowAny",
        "kind": 6,
        "importPath": "backend.rest_framework.permissions",
        "description": "backend.rest_framework.permissions",
        "peekOfCode": "class AllowAny(BasePermission):\n    \"\"\"\n    Allow any access.\n    This isn't strictly required, since you could use an empty\n    permission_classes list, but it's useful because it makes the intention\n    more explicit.\n    \"\"\"\n    def has_permission(self, request, view):\n        return True\nclass IsAuthenticated(BasePermission):",
        "detail": "backend.rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "kind": 6,
        "importPath": "backend.rest_framework.permissions",
        "description": "backend.rest_framework.permissions",
        "peekOfCode": "class IsAuthenticated(BasePermission):\n    \"\"\"\n    Allows access only to authenticated users.\n    \"\"\"\n    def has_permission(self, request, view):\n        return bool(request.user and request.user.is_authenticated)\nclass IsAdminUser(BasePermission):\n    \"\"\"\n    Allows access only to admin users.\n    \"\"\"",
        "detail": "backend.rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "IsAdminUser",
        "kind": 6,
        "importPath": "backend.rest_framework.permissions",
        "description": "backend.rest_framework.permissions",
        "peekOfCode": "class IsAdminUser(BasePermission):\n    \"\"\"\n    Allows access only to admin users.\n    \"\"\"\n    def has_permission(self, request, view):\n        return bool(request.user and request.user.is_staff)\nclass IsAuthenticatedOrReadOnly(BasePermission):\n    \"\"\"\n    The request is authenticated as a user, or is a read-only request.\n    \"\"\"",
        "detail": "backend.rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "IsAuthenticatedOrReadOnly",
        "kind": 6,
        "importPath": "backend.rest_framework.permissions",
        "description": "backend.rest_framework.permissions",
        "peekOfCode": "class IsAuthenticatedOrReadOnly(BasePermission):\n    \"\"\"\n    The request is authenticated as a user, or is a read-only request.\n    \"\"\"\n    def has_permission(self, request, view):\n        return bool(\n            request.method in SAFE_METHODS or\n            request.user and\n            request.user.is_authenticated\n        )",
        "detail": "backend.rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "DjangoModelPermissions",
        "kind": 6,
        "importPath": "backend.rest_framework.permissions",
        "description": "backend.rest_framework.permissions",
        "peekOfCode": "class DjangoModelPermissions(BasePermission):\n    \"\"\"\n    The request is authenticated using `django.contrib.auth` permissions.\n    See: https://docs.djangoproject.com/en/dev/topics/auth/#permissions\n    It ensures that the user is authenticated, and has the appropriate\n    `add`/`change`/`delete` permissions on the model.\n    This permission can only be applied against view classes that\n    provide a `.queryset` attribute.\n    \"\"\"\n    # Map methods into required permission codes.",
        "detail": "backend.rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "DjangoModelPermissionsOrAnonReadOnly",
        "kind": 6,
        "importPath": "backend.rest_framework.permissions",
        "description": "backend.rest_framework.permissions",
        "peekOfCode": "class DjangoModelPermissionsOrAnonReadOnly(DjangoModelPermissions):\n    \"\"\"\n    Similar to DjangoModelPermissions, except that anonymous users are\n    allowed read-only access.\n    \"\"\"\n    authenticated_users_only = False\nclass DjangoObjectPermissions(DjangoModelPermissions):\n    \"\"\"\n    The request is authenticated using Django's object-level permissions.\n    It requires an object-permissions-enabled backend, such as Django Guardian.",
        "detail": "backend.rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "DjangoObjectPermissions",
        "kind": 6,
        "importPath": "backend.rest_framework.permissions",
        "description": "backend.rest_framework.permissions",
        "peekOfCode": "class DjangoObjectPermissions(DjangoModelPermissions):\n    \"\"\"\n    The request is authenticated using Django's object-level permissions.\n    It requires an object-permissions-enabled backend, such as Django Guardian.\n    It ensures that the user is authenticated, and has the appropriate\n    `add`/`change`/`delete` permissions on the object using .has_perms.\n    This permission can only be applied against view classes that\n    provide a `.queryset` attribute.\n    \"\"\"\n    perms_map = {",
        "detail": "backend.rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "SAFE_METHODS",
        "kind": 5,
        "importPath": "backend.rest_framework.permissions",
        "description": "backend.rest_framework.permissions",
        "peekOfCode": "SAFE_METHODS = ('GET', 'HEAD', 'OPTIONS')\nclass OperationHolderMixin:\n    def __and__(self, other):\n        return OperandHolder(AND, self, other)\n    def __or__(self, other):\n        return OperandHolder(OR, self, other)\n    def __rand__(self, other):\n        return OperandHolder(AND, other, self)\n    def __ror__(self, other):\n        return OperandHolder(OR, other, self)",
        "detail": "backend.rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "ObjectValueError",
        "kind": 6,
        "importPath": "backend.rest_framework.relations",
        "description": "backend.rest_framework.relations",
        "peekOfCode": "class ObjectValueError(ValueError):\n    \"\"\"\n    Raised when `queryset.get()` failed due to an underlying `ValueError`.\n    Wrapping prevents calling code conflating this with unrelated errors.\n    \"\"\"\nclass ObjectTypeError(TypeError):\n    \"\"\"\n    Raised when `queryset.get()` failed due to an underlying `TypeError`.\n    Wrapping prevents calling code conflating this with unrelated errors.\n    \"\"\"",
        "detail": "backend.rest_framework.relations",
        "documentation": {}
    },
    {
        "label": "ObjectTypeError",
        "kind": 6,
        "importPath": "backend.rest_framework.relations",
        "description": "backend.rest_framework.relations",
        "peekOfCode": "class ObjectTypeError(TypeError):\n    \"\"\"\n    Raised when `queryset.get()` failed due to an underlying `TypeError`.\n    Wrapping prevents calling code conflating this with unrelated errors.\n    \"\"\"\nclass Hyperlink(str):\n    \"\"\"\n    A string like object that additionally has an associated name.\n    We use this for hyperlinked URLs that may render as a named link\n    in some contexts, or render as a plain URL in others.",
        "detail": "backend.rest_framework.relations",
        "documentation": {}
    },
    {
        "label": "Hyperlink",
        "kind": 6,
        "importPath": "backend.rest_framework.relations",
        "description": "backend.rest_framework.relations",
        "peekOfCode": "class Hyperlink(str):\n    \"\"\"\n    A string like object that additionally has an associated name.\n    We use this for hyperlinked URLs that may render as a named link\n    in some contexts, or render as a plain URL in others.\n    \"\"\"\n    def __new__(cls, url, obj):\n        ret = super().__new__(cls, url)\n        ret.obj = obj\n        return ret",
        "detail": "backend.rest_framework.relations",
        "documentation": {}
    },
    {
        "label": "PKOnlyObject",
        "kind": 6,
        "importPath": "backend.rest_framework.relations",
        "description": "backend.rest_framework.relations",
        "peekOfCode": "class PKOnlyObject:\n    \"\"\"\n    This is a mock object, used for when we only need the pk of the object\n    instance, but still want to return an object with a .pk attribute,\n    in order to keep the same interface as a regular model instance.\n    \"\"\"\n    def __init__(self, pk):\n        self.pk = pk\n    def __str__(self):\n        return \"%s\" % self.pk",
        "detail": "backend.rest_framework.relations",
        "documentation": {}
    },
    {
        "label": "RelatedField",
        "kind": 6,
        "importPath": "backend.rest_framework.relations",
        "description": "backend.rest_framework.relations",
        "peekOfCode": "class RelatedField(Field):\n    queryset = None\n    html_cutoff = None\n    html_cutoff_text = None\n    def __init__(self, **kwargs):\n        self.queryset = kwargs.pop('queryset', self.queryset)\n        cutoff_from_settings = api_settings.HTML_SELECT_CUTOFF\n        if cutoff_from_settings is not None:\n            cutoff_from_settings = int(cutoff_from_settings)\n        self.html_cutoff = kwargs.pop('html_cutoff', cutoff_from_settings)",
        "detail": "backend.rest_framework.relations",
        "documentation": {}
    },
    {
        "label": "StringRelatedField",
        "kind": 6,
        "importPath": "backend.rest_framework.relations",
        "description": "backend.rest_framework.relations",
        "peekOfCode": "class StringRelatedField(RelatedField):\n    \"\"\"\n    A read only field that represents its targets using their\n    plain string representation.\n    \"\"\"\n    def __init__(self, **kwargs):\n        kwargs['read_only'] = True\n        super().__init__(**kwargs)\n    def to_representation(self, value):\n        return str(value)",
        "detail": "backend.rest_framework.relations",
        "documentation": {}
    },
    {
        "label": "PrimaryKeyRelatedField",
        "kind": 6,
        "importPath": "backend.rest_framework.relations",
        "description": "backend.rest_framework.relations",
        "peekOfCode": "class PrimaryKeyRelatedField(RelatedField):\n    default_error_messages = {\n        'required': _('This field is required.'),\n        'does_not_exist': _('Invalid pk \"{pk_value}\" - object does not exist.'),\n        'incorrect_type': _('Incorrect type. Expected pk value, received {data_type}.'),\n    }\n    def __init__(self, **kwargs):\n        self.pk_field = kwargs.pop('pk_field', None)\n        super().__init__(**kwargs)\n    def use_pk_only_optimization(self):",
        "detail": "backend.rest_framework.relations",
        "documentation": {}
    },
    {
        "label": "HyperlinkedRelatedField",
        "kind": 6,
        "importPath": "backend.rest_framework.relations",
        "description": "backend.rest_framework.relations",
        "peekOfCode": "class HyperlinkedRelatedField(RelatedField):\n    lookup_field = 'pk'\n    view_name = None\n    default_error_messages = {\n        'required': _('This field is required.'),\n        'no_match': _('Invalid hyperlink - No URL match.'),\n        'incorrect_match': _('Invalid hyperlink - Incorrect URL match.'),\n        'does_not_exist': _('Invalid hyperlink - Object does not exist.'),\n        'incorrect_type': _('Incorrect type. Expected URL string, received {data_type}.'),\n    }",
        "detail": "backend.rest_framework.relations",
        "documentation": {}
    },
    {
        "label": "HyperlinkedIdentityField",
        "kind": 6,
        "importPath": "backend.rest_framework.relations",
        "description": "backend.rest_framework.relations",
        "peekOfCode": "class HyperlinkedIdentityField(HyperlinkedRelatedField):\n    \"\"\"\n    A read-only field that represents the identity URL for an object, itself.\n    This is in contrast to `HyperlinkedRelatedField` which represents the\n    URL of relationships to other objects.\n    \"\"\"\n    def __init__(self, view_name=None, **kwargs):\n        assert view_name is not None, 'The `view_name` argument is required.'\n        kwargs['read_only'] = True\n        kwargs['source'] = '*'",
        "detail": "backend.rest_framework.relations",
        "documentation": {}
    },
    {
        "label": "SlugRelatedField",
        "kind": 6,
        "importPath": "backend.rest_framework.relations",
        "description": "backend.rest_framework.relations",
        "peekOfCode": "class SlugRelatedField(RelatedField):\n    \"\"\"\n    A read-write field that represents the target of the relationship\n    by a unique 'slug' attribute.\n    \"\"\"\n    default_error_messages = {\n        'does_not_exist': _('Object with {slug_name}={value} does not exist.'),\n        'invalid': _('Invalid value.'),\n    }\n    def __init__(self, slug_field=None, **kwargs):",
        "detail": "backend.rest_framework.relations",
        "documentation": {}
    },
    {
        "label": "ManyRelatedField",
        "kind": 6,
        "importPath": "backend.rest_framework.relations",
        "description": "backend.rest_framework.relations",
        "peekOfCode": "class ManyRelatedField(Field):\n    \"\"\"\n    Relationships with `many=True` transparently get coerced into instead being\n    a ManyRelatedField with a child relationship.\n    The `ManyRelatedField` class is responsible for handling iterating through\n    the values and passing each one to the child relationship.\n    This class is treated as private API.\n    You shouldn't generally need to be using this class directly yourself,\n    and should instead simply set 'many=True' on the relationship.\n    \"\"\"",
        "detail": "backend.rest_framework.relations",
        "documentation": {}
    },
    {
        "label": "method_overridden",
        "kind": 2,
        "importPath": "backend.rest_framework.relations",
        "description": "backend.rest_framework.relations",
        "peekOfCode": "def method_overridden(method_name, klass, instance):\n    \"\"\"\n    Determine if a method has been overridden.\n    \"\"\"\n    method = getattr(klass, method_name)\n    default_method = getattr(method, '__func__', method)  # Python 3 compat\n    return default_method is not getattr(instance, method_name).__func__\nclass ObjectValueError(ValueError):\n    \"\"\"\n    Raised when `queryset.get()` failed due to an underlying `ValueError`.",
        "detail": "backend.rest_framework.relations",
        "documentation": {}
    },
    {
        "label": "MANY_RELATION_KWARGS",
        "kind": 5,
        "importPath": "backend.rest_framework.relations",
        "description": "backend.rest_framework.relations",
        "peekOfCode": "MANY_RELATION_KWARGS = (\n    'read_only', 'write_only', 'required', 'default', 'initial', 'source',\n    'label', 'help_text', 'style', 'error_messages', 'allow_empty',\n    'html_cutoff', 'html_cutoff_text'\n)\nclass RelatedField(Field):\n    queryset = None\n    html_cutoff = None\n    html_cutoff_text = None\n    def __init__(self, **kwargs):",
        "detail": "backend.rest_framework.relations",
        "documentation": {}
    },
    {
        "label": "BaseRenderer",
        "kind": 6,
        "importPath": "backend.rest_framework.renderers",
        "description": "backend.rest_framework.renderers",
        "peekOfCode": "class BaseRenderer:\n    \"\"\"\n    All renderers should extend this class, setting the `media_type`\n    and `format` attributes, and override the `.render()` method.\n    \"\"\"\n    media_type = None\n    format = None\n    charset = 'utf-8'\n    render_style = 'text'\n    def render(self, data, accepted_media_type=None, renderer_context=None):",
        "detail": "backend.rest_framework.renderers",
        "documentation": {}
    },
    {
        "label": "JSONRenderer",
        "kind": 6,
        "importPath": "backend.rest_framework.renderers",
        "description": "backend.rest_framework.renderers",
        "peekOfCode": "class JSONRenderer(BaseRenderer):\n    \"\"\"\n    Renderer which serializes to JSON.\n    \"\"\"\n    media_type = 'application/json'\n    format = 'json'\n    encoder_class = encoders.JSONEncoder\n    ensure_ascii = not api_settings.UNICODE_JSON\n    compact = api_settings.COMPACT_JSON\n    strict = api_settings.STRICT_JSON",
        "detail": "backend.rest_framework.renderers",
        "documentation": {}
    },
    {
        "label": "TemplateHTMLRenderer",
        "kind": 6,
        "importPath": "backend.rest_framework.renderers",
        "description": "backend.rest_framework.renderers",
        "peekOfCode": "class TemplateHTMLRenderer(BaseRenderer):\n    \"\"\"\n    An HTML renderer for use with templates.\n    The data supplied to the Response object should be a dictionary that will\n    be used as context for the template.\n    The template name is determined by (in order of preference):\n    1. An explicit `.template_name` attribute set on the response.\n    2. An explicit `.template_name` attribute set on this class.\n    3. The return result of calling `view.get_template_names()`.\n    For example:",
        "detail": "backend.rest_framework.renderers",
        "documentation": {}
    },
    {
        "label": "StaticHTMLRenderer",
        "kind": 6,
        "importPath": "backend.rest_framework.renderers",
        "description": "backend.rest_framework.renderers",
        "peekOfCode": "class StaticHTMLRenderer(TemplateHTMLRenderer):\n    \"\"\"\n    An HTML renderer class that simply returns pre-rendered HTML.\n    The data supplied to the Response object should be a string representing\n    the pre-rendered HTML content.\n    For example:\n        data = '<html><body>example</body></html>'\n        return Response(data)\n    For template rendered HTML, see TemplateHTMLRenderer.\n    \"\"\"",
        "detail": "backend.rest_framework.renderers",
        "documentation": {}
    },
    {
        "label": "HTMLFormRenderer",
        "kind": 6,
        "importPath": "backend.rest_framework.renderers",
        "description": "backend.rest_framework.renderers",
        "peekOfCode": "class HTMLFormRenderer(BaseRenderer):\n    \"\"\"\n    Renderers serializer data into an HTML form.\n    If the serializer was instantiated without an object then this will\n    return an HTML form not bound to any object,\n    otherwise it will return an HTML form with the appropriate initial data\n    populated from the object.\n    Note that rendering of field and form errors is not currently supported.\n    \"\"\"\n    media_type = 'text/html'",
        "detail": "backend.rest_framework.renderers",
        "documentation": {}
    },
    {
        "label": "BrowsableAPIRenderer",
        "kind": 6,
        "importPath": "backend.rest_framework.renderers",
        "description": "backend.rest_framework.renderers",
        "peekOfCode": "class BrowsableAPIRenderer(BaseRenderer):\n    \"\"\"\n    HTML renderer used to self-document the API.\n    \"\"\"\n    media_type = 'text/html'\n    format = 'api'\n    template = 'rest_framework/api.html'\n    filter_template = 'rest_framework/filters/base.html'\n    code_style = 'emacs'\n    charset = 'utf-8'",
        "detail": "backend.rest_framework.renderers",
        "documentation": {}
    },
    {
        "label": "AdminRenderer",
        "kind": 6,
        "importPath": "backend.rest_framework.renderers",
        "description": "backend.rest_framework.renderers",
        "peekOfCode": "class AdminRenderer(BrowsableAPIRenderer):\n    template = 'rest_framework/admin.html'\n    format = 'admin'\n    def render(self, data, accepted_media_type=None, renderer_context=None):\n        self.accepted_media_type = accepted_media_type or ''\n        self.renderer_context = renderer_context or {}\n        response = renderer_context['response']\n        request = renderer_context['request']\n        view = self.renderer_context['view']\n        if response.status_code == status.HTTP_400_BAD_REQUEST:",
        "detail": "backend.rest_framework.renderers",
        "documentation": {}
    },
    {
        "label": "DocumentationRenderer",
        "kind": 6,
        "importPath": "backend.rest_framework.renderers",
        "description": "backend.rest_framework.renderers",
        "peekOfCode": "class DocumentationRenderer(BaseRenderer):\n    media_type = 'text/html'\n    format = 'html'\n    charset = 'utf-8'\n    template = 'rest_framework/docs/index.html'\n    error_template = 'rest_framework/docs/error.html'\n    code_style = 'emacs'\n    languages = ['shell', 'javascript', 'python']\n    def get_context(self, data, request):\n        return {",
        "detail": "backend.rest_framework.renderers",
        "documentation": {}
    },
    {
        "label": "SchemaJSRenderer",
        "kind": 6,
        "importPath": "backend.rest_framework.renderers",
        "description": "backend.rest_framework.renderers",
        "peekOfCode": "class SchemaJSRenderer(BaseRenderer):\n    media_type = 'application/javascript'\n    format = 'javascript'\n    charset = 'utf-8'\n    template = 'rest_framework/schema.js'\n    def render(self, data, accepted_media_type=None, renderer_context=None):\n        codec = coreapi.codecs.CoreJSONCodec()\n        schema = base64.b64encode(codec.encode(data)).decode('ascii')\n        template = loader.get_template(self.template)\n        context = {'schema': mark_safe(schema)}",
        "detail": "backend.rest_framework.renderers",
        "documentation": {}
    },
    {
        "label": "MultiPartRenderer",
        "kind": 6,
        "importPath": "backend.rest_framework.renderers",
        "description": "backend.rest_framework.renderers",
        "peekOfCode": "class MultiPartRenderer(BaseRenderer):\n    media_type = 'multipart/form-data; boundary=BoUnDaRyStRiNg'\n    format = 'multipart'\n    charset = 'utf-8'\n    BOUNDARY = 'BoUnDaRyStRiNg'\n    def render(self, data, accepted_media_type=None, renderer_context=None):\n        from django.test.client import encode_multipart\n        if hasattr(data, 'items'):\n            for key, value in data.items():\n                assert not isinstance(value, dict), (",
        "detail": "backend.rest_framework.renderers",
        "documentation": {}
    },
    {
        "label": "CoreJSONRenderer",
        "kind": 6,
        "importPath": "backend.rest_framework.renderers",
        "description": "backend.rest_framework.renderers",
        "peekOfCode": "class CoreJSONRenderer(BaseRenderer):\n    media_type = 'application/coreapi+json'\n    charset = None\n    format = 'corejson'\n    def __init__(self):\n        assert coreapi, 'Using CoreJSONRenderer, but `coreapi` is not installed.'\n    def render(self, data, media_type=None, renderer_context=None):\n        indent = bool(renderer_context.get('indent', 0))\n        codec = coreapi.codecs.CoreJSONCodec()\n        return codec.dump(data, indent=indent)",
        "detail": "backend.rest_framework.renderers",
        "documentation": {}
    },
    {
        "label": "_BaseOpenAPIRenderer",
        "kind": 6,
        "importPath": "backend.rest_framework.renderers",
        "description": "backend.rest_framework.renderers",
        "peekOfCode": "class _BaseOpenAPIRenderer:\n    def get_schema(self, instance):\n        CLASS_TO_TYPENAME = {\n            coreschema.Object: 'object',\n            coreschema.Array: 'array',\n            coreschema.Number: 'number',\n            coreschema.Integer: 'integer',\n            coreschema.String: 'string',\n            coreschema.Boolean: 'boolean',\n        }",
        "detail": "backend.rest_framework.renderers",
        "documentation": {}
    },
    {
        "label": "CoreAPIOpenAPIRenderer",
        "kind": 6,
        "importPath": "backend.rest_framework.renderers",
        "description": "backend.rest_framework.renderers",
        "peekOfCode": "class CoreAPIOpenAPIRenderer(_BaseOpenAPIRenderer):\n    media_type = 'application/vnd.oai.openapi'\n    charset = None\n    format = 'openapi'\n    def __init__(self):\n        assert coreapi, 'Using CoreAPIOpenAPIRenderer, but `coreapi` is not installed.'\n        assert yaml, 'Using CoreAPIOpenAPIRenderer, but `pyyaml` is not installed.'\n    def render(self, data, media_type=None, renderer_context=None):\n        structure = self.get_structure(data)\n        return yaml.dump(structure, default_flow_style=False).encode()",
        "detail": "backend.rest_framework.renderers",
        "documentation": {}
    },
    {
        "label": "CoreAPIJSONOpenAPIRenderer",
        "kind": 6,
        "importPath": "backend.rest_framework.renderers",
        "description": "backend.rest_framework.renderers",
        "peekOfCode": "class CoreAPIJSONOpenAPIRenderer(_BaseOpenAPIRenderer):\n    media_type = 'application/vnd.oai.openapi+json'\n    charset = None\n    format = 'openapi-json'\n    def __init__(self):\n        assert coreapi, 'Using CoreAPIJSONOpenAPIRenderer, but `coreapi` is not installed.'\n    def render(self, data, media_type=None, renderer_context=None):\n        structure = self.get_structure(data)\n        return json.dumps(structure, indent=4).encode('utf-8')\nclass OpenAPIRenderer(BaseRenderer):",
        "detail": "backend.rest_framework.renderers",
        "documentation": {}
    },
    {
        "label": "OpenAPIRenderer",
        "kind": 6,
        "importPath": "backend.rest_framework.renderers",
        "description": "backend.rest_framework.renderers",
        "peekOfCode": "class OpenAPIRenderer(BaseRenderer):\n    media_type = 'application/vnd.oai.openapi'\n    charset = None\n    format = 'openapi'\n    def __init__(self):\n        assert yaml, 'Using OpenAPIRenderer, but `pyyaml` is not installed.'\n    def render(self, data, media_type=None, renderer_context=None):\n        # disable yaml advanced feature 'alias' for clean, portable, and readable output\n        class Dumper(yaml.Dumper):\n            def ignore_aliases(self, data):",
        "detail": "backend.rest_framework.renderers",
        "documentation": {}
    },
    {
        "label": "JSONOpenAPIRenderer",
        "kind": 6,
        "importPath": "backend.rest_framework.renderers",
        "description": "backend.rest_framework.renderers",
        "peekOfCode": "class JSONOpenAPIRenderer(BaseRenderer):\n    media_type = 'application/vnd.oai.openapi+json'\n    charset = None\n    encoder_class = encoders.JSONEncoder\n    format = 'openapi-json'\n    def render(self, data, media_type=None, renderer_context=None):\n        return json.dumps(data, cls=self.encoder_class, indent=2).encode('utf-8')",
        "detail": "backend.rest_framework.renderers",
        "documentation": {}
    },
    {
        "label": "zero_as_none",
        "kind": 2,
        "importPath": "backend.rest_framework.renderers",
        "description": "backend.rest_framework.renderers",
        "peekOfCode": "def zero_as_none(value):\n    return None if value == 0 else value\nclass BaseRenderer:\n    \"\"\"\n    All renderers should extend this class, setting the `media_type`\n    and `format` attributes, and override the `.render()` method.\n    \"\"\"\n    media_type = None\n    format = None\n    charset = 'utf-8'",
        "detail": "backend.rest_framework.renderers",
        "documentation": {}
    },
    {
        "label": "override_method",
        "kind": 6,
        "importPath": "backend.rest_framework.request",
        "description": "backend.rest_framework.request",
        "peekOfCode": "class override_method:\n    \"\"\"\n    A context manager that temporarily overrides the method on a request,\n    additionally setting the `view.request` attribute.\n    Usage:\n        with override_method(view, request, 'POST') as request:\n            ... # Do stuff with `view` and `request`\n    \"\"\"\n    def __init__(self, view, request, method):\n        self.view = view",
        "detail": "backend.rest_framework.request",
        "documentation": {}
    },
    {
        "label": "WrappedAttributeError",
        "kind": 6,
        "importPath": "backend.rest_framework.request",
        "description": "backend.rest_framework.request",
        "peekOfCode": "class WrappedAttributeError(Exception):\n    pass\n@contextmanager\ndef wrap_attributeerrors():\n    \"\"\"\n    Used to re-raise AttributeErrors caught during authentication, preventing\n    these errors from otherwise being handled by the attribute access protocol.\n    \"\"\"\n    try:\n        yield",
        "detail": "backend.rest_framework.request",
        "documentation": {}
    },
    {
        "label": "Empty",
        "kind": 6,
        "importPath": "backend.rest_framework.request",
        "description": "backend.rest_framework.request",
        "peekOfCode": "class Empty:\n    \"\"\"\n    Placeholder for unset attributes.\n    Cannot use `None`, as that may be a valid value.\n    \"\"\"\n    pass\ndef _hasattr(obj, name):\n    return not getattr(obj, name) is Empty\ndef clone_request(request, method):\n    \"\"\"",
        "detail": "backend.rest_framework.request",
        "documentation": {}
    },
    {
        "label": "ForcedAuthentication",
        "kind": 6,
        "importPath": "backend.rest_framework.request",
        "description": "backend.rest_framework.request",
        "peekOfCode": "class ForcedAuthentication:\n    \"\"\"\n    This authentication class is used if the test client or request factory\n    forcibly authenticated the request.\n    \"\"\"\n    def __init__(self, force_user, force_token):\n        self.force_user = force_user\n        self.force_token = force_token\n    def authenticate(self, request):\n        return (self.force_user, self.force_token)",
        "detail": "backend.rest_framework.request",
        "documentation": {}
    },
    {
        "label": "Request",
        "kind": 6,
        "importPath": "backend.rest_framework.request",
        "description": "backend.rest_framework.request",
        "peekOfCode": "class Request:\n    \"\"\"\n    Wrapper allowing to enhance a standard `HttpRequest` instance.\n    Kwargs:\n        - request(HttpRequest). The original request instance.\n        - parsers(list/tuple). The parsers to use for parsing the\n          request content.\n        - authenticators(list/tuple). The authenticators used to try\n          authenticating the request's user.\n    \"\"\"",
        "detail": "backend.rest_framework.request",
        "documentation": {}
    },
    {
        "label": "is_form_media_type",
        "kind": 2,
        "importPath": "backend.rest_framework.request",
        "description": "backend.rest_framework.request",
        "peekOfCode": "def is_form_media_type(media_type):\n    \"\"\"\n    Return True if the media type is a valid form media type.\n    \"\"\"\n    base_media_type, params = parse_header(media_type.encode(HTTP_HEADER_ENCODING))\n    return (base_media_type == 'application/x-www-form-urlencoded' or\n            base_media_type == 'multipart/form-data')\nclass override_method:\n    \"\"\"\n    A context manager that temporarily overrides the method on a request,",
        "detail": "backend.rest_framework.request",
        "documentation": {}
    },
    {
        "label": "wrap_attributeerrors",
        "kind": 2,
        "importPath": "backend.rest_framework.request",
        "description": "backend.rest_framework.request",
        "peekOfCode": "def wrap_attributeerrors():\n    \"\"\"\n    Used to re-raise AttributeErrors caught during authentication, preventing\n    these errors from otherwise being handled by the attribute access protocol.\n    \"\"\"\n    try:\n        yield\n    except AttributeError:\n        info = sys.exc_info()\n        exc = WrappedAttributeError(str(info[1]))",
        "detail": "backend.rest_framework.request",
        "documentation": {}
    },
    {
        "label": "clone_request",
        "kind": 2,
        "importPath": "backend.rest_framework.request",
        "description": "backend.rest_framework.request",
        "peekOfCode": "def clone_request(request, method):\n    \"\"\"\n    Internal helper method to clone a request, replacing with a different\n    HTTP method.  Used for checking permissions against other methods.\n    \"\"\"\n    ret = Request(request=request._request,\n                  parsers=request.parsers,\n                  authenticators=request.authenticators,\n                  negotiator=request.negotiator,\n                  parser_context=request.parser_context)",
        "detail": "backend.rest_framework.request",
        "documentation": {}
    },
    {
        "label": "Response",
        "kind": 6,
        "importPath": "backend.rest_framework.response",
        "description": "backend.rest_framework.response",
        "peekOfCode": "class Response(SimpleTemplateResponse):\n    \"\"\"\n    An HttpResponse that allows its data to be rendered into\n    arbitrary media types.\n    \"\"\"\n    def __init__(self, data=None, status=None,\n                 template_name=None, headers=None,\n                 exception=False, content_type=None):\n        \"\"\"\n        Alters the init arguments slightly.",
        "detail": "backend.rest_framework.response",
        "documentation": {}
    },
    {
        "label": "preserve_builtin_query_params",
        "kind": 2,
        "importPath": "backend.rest_framework.reverse",
        "description": "backend.rest_framework.reverse",
        "peekOfCode": "def preserve_builtin_query_params(url, request=None):\n    \"\"\"\n    Given an incoming request, and an outgoing URL representation,\n    append the value of any built-in query parameters.\n    \"\"\"\n    if request is None:\n        return url\n    overrides = [\n        api_settings.URL_FORMAT_OVERRIDE,\n    ]",
        "detail": "backend.rest_framework.reverse",
        "documentation": {}
    },
    {
        "label": "reverse",
        "kind": 2,
        "importPath": "backend.rest_framework.reverse",
        "description": "backend.rest_framework.reverse",
        "peekOfCode": "def reverse(viewname, args=None, kwargs=None, request=None, format=None, **extra):\n    \"\"\"\n    If versioning is being used then we pass any `reverse` calls through\n    to the versioning scheme instance, so that the resulting URL\n    can be modified if needed.\n    \"\"\"\n    scheme = getattr(request, 'versioning_scheme', None)\n    if scheme is not None:\n        try:\n            url = scheme.reverse(viewname, args, kwargs, request, format, **extra)",
        "detail": "backend.rest_framework.reverse",
        "documentation": {}
    },
    {
        "label": "reverse_lazy",
        "kind": 5,
        "importPath": "backend.rest_framework.reverse",
        "description": "backend.rest_framework.reverse",
        "peekOfCode": "reverse_lazy = lazy(reverse, str)",
        "detail": "backend.rest_framework.reverse",
        "documentation": {}
    },
    {
        "label": "BaseRouter",
        "kind": 6,
        "importPath": "backend.rest_framework.routers",
        "description": "backend.rest_framework.routers",
        "peekOfCode": "class BaseRouter:\n    def __init__(self):\n        self.registry = []\n    def register(self, prefix, viewset, basename=None):\n        if basename is None:\n            basename = self.get_default_basename(viewset)\n        self.registry.append((prefix, viewset, basename))\n        # invalidate the urls cache\n        if hasattr(self, '_urls'):\n            del self._urls",
        "detail": "backend.rest_framework.routers",
        "documentation": {}
    },
    {
        "label": "SimpleRouter",
        "kind": 6,
        "importPath": "backend.rest_framework.routers",
        "description": "backend.rest_framework.routers",
        "peekOfCode": "class SimpleRouter(BaseRouter):\n    routes = [\n        # List route.\n        Route(\n            url=r'^{prefix}{trailing_slash}$',\n            mapping={\n                'get': 'list',\n                'post': 'create'\n            },\n            name='{basename}-list',",
        "detail": "backend.rest_framework.routers",
        "documentation": {}
    },
    {
        "label": "APIRootView",
        "kind": 6,
        "importPath": "backend.rest_framework.routers",
        "description": "backend.rest_framework.routers",
        "peekOfCode": "class APIRootView(views.APIView):\n    \"\"\"\n    The default basic root view for DefaultRouter\n    \"\"\"\n    _ignore_model_permissions = True\n    schema = None  # exclude from schema\n    api_root_dict = None\n    def get(self, request, *args, **kwargs):\n        # Return a plain {\"name\": \"hyperlink\"} response.\n        ret = OrderedDict()",
        "detail": "backend.rest_framework.routers",
        "documentation": {}
    },
    {
        "label": "DefaultRouter",
        "kind": 6,
        "importPath": "backend.rest_framework.routers",
        "description": "backend.rest_framework.routers",
        "peekOfCode": "class DefaultRouter(SimpleRouter):\n    \"\"\"\n    The default router extends the SimpleRouter, but also adds in a default\n    API root view, and adds format suffix patterns to the URLs.\n    \"\"\"\n    include_root_view = True\n    include_format_suffixes = True\n    root_view_name = 'api-root'\n    default_schema_renderers = None\n    APIRootView = APIRootView",
        "detail": "backend.rest_framework.routers",
        "documentation": {}
    },
    {
        "label": "escape_curly_brackets",
        "kind": 2,
        "importPath": "backend.rest_framework.routers",
        "description": "backend.rest_framework.routers",
        "peekOfCode": "def escape_curly_brackets(url_path):\n    \"\"\"\n    Double brackets in regex of url_path for escape string formatting\n    \"\"\"\n    return url_path.replace('{', '{{').replace('}', '}}')\ndef flatten(list_of_lists):\n    \"\"\"\n    Takes an iterable of iterables, returns a single iterable containing all items\n    \"\"\"\n    return itertools.chain(*list_of_lists)",
        "detail": "backend.rest_framework.routers",
        "documentation": {}
    },
    {
        "label": "flatten",
        "kind": 2,
        "importPath": "backend.rest_framework.routers",
        "description": "backend.rest_framework.routers",
        "peekOfCode": "def flatten(list_of_lists):\n    \"\"\"\n    Takes an iterable of iterables, returns a single iterable containing all items\n    \"\"\"\n    return itertools.chain(*list_of_lists)\nclass BaseRouter:\n    def __init__(self):\n        self.registry = []\n    def register(self, prefix, viewset, basename=None):\n        if basename is None:",
        "detail": "backend.rest_framework.routers",
        "documentation": {}
    },
    {
        "label": "Route",
        "kind": 5,
        "importPath": "backend.rest_framework.routers",
        "description": "backend.rest_framework.routers",
        "peekOfCode": "Route = namedtuple('Route', ['url', 'mapping', 'name', 'detail', 'initkwargs'])\nDynamicRoute = namedtuple('DynamicRoute', ['url', 'name', 'detail', 'initkwargs'])\ndef escape_curly_brackets(url_path):\n    \"\"\"\n    Double brackets in regex of url_path for escape string formatting\n    \"\"\"\n    return url_path.replace('{', '{{').replace('}', '}}')\ndef flatten(list_of_lists):\n    \"\"\"\n    Takes an iterable of iterables, returns a single iterable containing all items",
        "detail": "backend.rest_framework.routers",
        "documentation": {}
    },
    {
        "label": "DynamicRoute",
        "kind": 5,
        "importPath": "backend.rest_framework.routers",
        "description": "backend.rest_framework.routers",
        "peekOfCode": "DynamicRoute = namedtuple('DynamicRoute', ['url', 'name', 'detail', 'initkwargs'])\ndef escape_curly_brackets(url_path):\n    \"\"\"\n    Double brackets in regex of url_path for escape string formatting\n    \"\"\"\n    return url_path.replace('{', '{{').replace('}', '}}')\ndef flatten(list_of_lists):\n    \"\"\"\n    Takes an iterable of iterables, returns a single iterable containing all items\n    \"\"\"",
        "detail": "backend.rest_framework.routers",
        "documentation": {}
    },
    {
        "label": "BaseSerializer",
        "kind": 6,
        "importPath": "backend.rest_framework.serializers",
        "description": "backend.rest_framework.serializers",
        "peekOfCode": "class BaseSerializer(Field):\n    \"\"\"\n    The BaseSerializer class provides a minimal class which may be used\n    for writing custom serializer implementations.\n    Note that we strongly restrict the ordering of operations/properties\n    that may be used on the serializer in order to enforce correct usage.\n    In particular, if a `data=` argument is passed then:\n    .is_valid() - Available.\n    .initial_data - Available.\n    .validated_data - Only available after calling `is_valid()`",
        "detail": "backend.rest_framework.serializers",
        "documentation": {}
    },
    {
        "label": "SerializerMetaclass",
        "kind": 6,
        "importPath": "backend.rest_framework.serializers",
        "description": "backend.rest_framework.serializers",
        "peekOfCode": "class SerializerMetaclass(type):\n    \"\"\"\n    This metaclass sets a dictionary named `_declared_fields` on the class.\n    Any instances of `Field` included as attributes on either the class\n    or on any of its superclasses will be include in the\n    `_declared_fields` dictionary.\n    \"\"\"\n    @classmethod\n    def _get_declared_fields(cls, bases, attrs):\n        fields = [(field_name, attrs.pop(field_name))",
        "detail": "backend.rest_framework.serializers",
        "documentation": {}
    },
    {
        "label": "Serializer",
        "kind": 6,
        "importPath": "backend.rest_framework.serializers",
        "description": "backend.rest_framework.serializers",
        "peekOfCode": "class Serializer(BaseSerializer, metaclass=SerializerMetaclass):\n    default_error_messages = {\n        'invalid': _('Invalid data. Expected a dictionary, but got {datatype}.')\n    }\n    @cached_property\n    def fields(self):\n        \"\"\"\n        A dictionary of {field_name: field_instance}.\n        \"\"\"\n        # `fields` is evaluated lazily. We do this to ensure that we don't",
        "detail": "backend.rest_framework.serializers",
        "documentation": {}
    },
    {
        "label": "ListSerializer",
        "kind": 6,
        "importPath": "backend.rest_framework.serializers",
        "description": "backend.rest_framework.serializers",
        "peekOfCode": "class ListSerializer(BaseSerializer):\n    child = None\n    many = True\n    default_error_messages = {\n        'not_a_list': _('Expected a list of items but got type \"{input_type}\".'),\n        'empty': _('This list may not be empty.')\n    }\n    def __init__(self, *args, **kwargs):\n        self.child = kwargs.pop('child', copy.deepcopy(self.child))\n        self.allow_empty = kwargs.pop('allow_empty', True)",
        "detail": "backend.rest_framework.serializers",
        "documentation": {}
    },
    {
        "label": "ModelSerializer",
        "kind": 6,
        "importPath": "backend.rest_framework.serializers",
        "description": "backend.rest_framework.serializers",
        "peekOfCode": "class ModelSerializer(Serializer):\n    \"\"\"\n    A `ModelSerializer` is just a regular `Serializer`, except that:\n    * A set of default fields are automatically populated.\n    * A set of default validators are automatically populated.\n    * Default `.create()` and `.update()` implementations are provided.\n    The process of automatically determining a set of serializer fields\n    based on the model fields is reasonably complex, but you almost certainly\n    don't need to dig into the implementation.\n    If the `ModelSerializer` class *doesn't* generate the set of fields that",
        "detail": "backend.rest_framework.serializers",
        "documentation": {}
    },
    {
        "label": "HyperlinkedModelSerializer",
        "kind": 6,
        "importPath": "backend.rest_framework.serializers",
        "description": "backend.rest_framework.serializers",
        "peekOfCode": "class HyperlinkedModelSerializer(ModelSerializer):\n    \"\"\"\n    A type of `ModelSerializer` that uses hyperlinked relationships instead\n    of primary key relationships. Specifically:\n    * A 'url' field is included instead of the 'id' field.\n    * Relationships to other instances are hyperlinks, instead of primary keys.\n    \"\"\"\n    serializer_related_field = HyperlinkedRelatedField\n    def get_default_field_names(self, declared_fields, model_info):\n        \"\"\"",
        "detail": "backend.rest_framework.serializers",
        "documentation": {}
    },
    {
        "label": "as_serializer_error",
        "kind": 2,
        "importPath": "backend.rest_framework.serializers",
        "description": "backend.rest_framework.serializers",
        "peekOfCode": "def as_serializer_error(exc):\n    assert isinstance(exc, (ValidationError, DjangoValidationError))\n    if isinstance(exc, DjangoValidationError):\n        detail = get_error_detail(exc)\n    else:\n        detail = exc.detail\n    if isinstance(detail, Mapping):\n        # If errors may be a dict we use the standard {key: list of values}.\n        # Here we ensure that all the values are *lists* of errors.\n        return {",
        "detail": "backend.rest_framework.serializers",
        "documentation": {}
    },
    {
        "label": "raise_errors_on_nested_writes",
        "kind": 2,
        "importPath": "backend.rest_framework.serializers",
        "description": "backend.rest_framework.serializers",
        "peekOfCode": "def raise_errors_on_nested_writes(method_name, serializer, validated_data):\n    \"\"\"\n    Give explicit errors when users attempt to pass writable nested data.\n    If we don't do this explicitly they'd get a less helpful error when\n    calling `.save()` on the serializer.\n    We don't *automatically* support these sorts of nested writes because\n    there are too many ambiguities to define a default behavior.\n    Eg. Suppose we have a `UserSerializer` with a nested profile. How should\n    we handle the case of an update, where the `profile` relationship does\n    not exist? Any of the following might be valid:",
        "detail": "backend.rest_framework.serializers",
        "documentation": {}
    },
    {
        "label": "LIST_SERIALIZER_KWARGS",
        "kind": 5,
        "importPath": "backend.rest_framework.serializers",
        "description": "backend.rest_framework.serializers",
        "peekOfCode": "LIST_SERIALIZER_KWARGS = (\n    'read_only', 'write_only', 'required', 'default', 'initial', 'source',\n    'label', 'help_text', 'style', 'error_messages', 'allow_empty',\n    'instance', 'data', 'partial', 'context', 'allow_null'\n)\nALL_FIELDS = '__all__'\n# BaseSerializer\n# --------------\nclass BaseSerializer(Field):\n    \"\"\"",
        "detail": "backend.rest_framework.serializers",
        "documentation": {}
    },
    {
        "label": "ALL_FIELDS",
        "kind": 5,
        "importPath": "backend.rest_framework.serializers",
        "description": "backend.rest_framework.serializers",
        "peekOfCode": "ALL_FIELDS = '__all__'\n# BaseSerializer\n# --------------\nclass BaseSerializer(Field):\n    \"\"\"\n    The BaseSerializer class provides a minimal class which may be used\n    for writing custom serializer implementations.\n    Note that we strongly restrict the ordering of operations/properties\n    that may be used on the serializer in order to enforce correct usage.\n    In particular, if a `data=` argument is passed then:",
        "detail": "backend.rest_framework.serializers",
        "documentation": {}
    },
    {
        "label": "APISettings",
        "kind": 6,
        "importPath": "backend.rest_framework.settings",
        "description": "backend.rest_framework.settings",
        "peekOfCode": "class APISettings:\n    \"\"\"\n    A settings object that allows REST Framework settings to be accessed as\n    properties. For example:\n        from rest_framework.settings import api_settings\n        print(api_settings.DEFAULT_RENDERER_CLASSES)\n    Any setting with string import paths will be automatically resolved\n    and return the class, rather than the string literal.\n    Note:\n    This is an internal class that is only compatible with settings namespaced",
        "detail": "backend.rest_framework.settings",
        "documentation": {}
    },
    {
        "label": "perform_import",
        "kind": 2,
        "importPath": "backend.rest_framework.settings",
        "description": "backend.rest_framework.settings",
        "peekOfCode": "def perform_import(val, setting_name):\n    \"\"\"\n    If the given setting is a string import notation,\n    then perform the necessary import or imports.\n    \"\"\"\n    if val is None:\n        return None\n    elif isinstance(val, str):\n        return import_from_string(val, setting_name)\n    elif isinstance(val, (list, tuple)):",
        "detail": "backend.rest_framework.settings",
        "documentation": {}
    },
    {
        "label": "import_from_string",
        "kind": 2,
        "importPath": "backend.rest_framework.settings",
        "description": "backend.rest_framework.settings",
        "peekOfCode": "def import_from_string(val, setting_name):\n    \"\"\"\n    Attempt to import a class from a string representation.\n    \"\"\"\n    try:\n        return import_string(val)\n    except ImportError as e:\n        msg = \"Could not import '%s' for API setting '%s'. %s: %s.\" % (val, setting_name, e.__class__.__name__, e)\n        raise ImportError(msg)\nclass APISettings:",
        "detail": "backend.rest_framework.settings",
        "documentation": {}
    },
    {
        "label": "reload_api_settings",
        "kind": 2,
        "importPath": "backend.rest_framework.settings",
        "description": "backend.rest_framework.settings",
        "peekOfCode": "def reload_api_settings(*args, **kwargs):\n    setting = kwargs['setting']\n    if setting == 'REST_FRAMEWORK':\n        api_settings.reload()\nsetting_changed.connect(reload_api_settings)",
        "detail": "backend.rest_framework.settings",
        "documentation": {}
    },
    {
        "label": "REST_FRAMEWORK",
        "kind": 5,
        "importPath": "backend.rest_framework.settings",
        "description": "backend.rest_framework.settings",
        "peekOfCode": "REST_FRAMEWORK = {\n    'DEFAULT_RENDERER_CLASSES': [\n        'rest_framework.renderers.JSONRenderer',\n        'rest_framework.renderers.TemplateHTMLRenderer',\n    ],\n    'DEFAULT_PARSER_CLASSES': [\n        'rest_framework.parsers.JSONParser',\n        'rest_framework.parsers.FormParser',\n        'rest_framework.parsers.MultiPartParser',\n    ],",
        "detail": "backend.rest_framework.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULTS",
        "kind": 5,
        "importPath": "backend.rest_framework.settings",
        "description": "backend.rest_framework.settings",
        "peekOfCode": "DEFAULTS = {\n    # Base API policies\n    'DEFAULT_RENDERER_CLASSES': [\n        'rest_framework.renderers.JSONRenderer',\n        'rest_framework.renderers.BrowsableAPIRenderer',\n    ],\n    'DEFAULT_PARSER_CLASSES': [\n        'rest_framework.parsers.JSONParser',\n        'rest_framework.parsers.FormParser',\n        'rest_framework.parsers.MultiPartParser'",
        "detail": "backend.rest_framework.settings",
        "documentation": {}
    },
    {
        "label": "IMPORT_STRINGS",
        "kind": 5,
        "importPath": "backend.rest_framework.settings",
        "description": "backend.rest_framework.settings",
        "peekOfCode": "IMPORT_STRINGS = [\n    'DEFAULT_RENDERER_CLASSES',\n    'DEFAULT_PARSER_CLASSES',\n    'DEFAULT_AUTHENTICATION_CLASSES',\n    'DEFAULT_PERMISSION_CLASSES',\n    'DEFAULT_THROTTLE_CLASSES',\n    'DEFAULT_CONTENT_NEGOTIATION_CLASS',\n    'DEFAULT_METADATA_CLASS',\n    'DEFAULT_VERSIONING_CLASS',\n    'DEFAULT_PAGINATION_CLASS',",
        "detail": "backend.rest_framework.settings",
        "documentation": {}
    },
    {
        "label": "REMOVED_SETTINGS",
        "kind": 5,
        "importPath": "backend.rest_framework.settings",
        "description": "backend.rest_framework.settings",
        "peekOfCode": "REMOVED_SETTINGS = [\n    'PAGINATE_BY', 'PAGINATE_BY_PARAM', 'MAX_PAGINATE_BY',\n]\ndef perform_import(val, setting_name):\n    \"\"\"\n    If the given setting is a string import notation,\n    then perform the necessary import or imports.\n    \"\"\"\n    if val is None:\n        return None",
        "detail": "backend.rest_framework.settings",
        "documentation": {}
    },
    {
        "label": "api_settings",
        "kind": 5,
        "importPath": "backend.rest_framework.settings",
        "description": "backend.rest_framework.settings",
        "peekOfCode": "api_settings = APISettings(None, DEFAULTS, IMPORT_STRINGS)\ndef reload_api_settings(*args, **kwargs):\n    setting = kwargs['setting']\n    if setting == 'REST_FRAMEWORK':\n        api_settings.reload()\nsetting_changed.connect(reload_api_settings)",
        "detail": "backend.rest_framework.settings",
        "documentation": {}
    },
    {
        "label": "is_informational",
        "kind": 2,
        "importPath": "backend.rest_framework.status",
        "description": "backend.rest_framework.status",
        "peekOfCode": "def is_informational(code):\n    return 100 <= code <= 199\ndef is_success(code):\n    return 200 <= code <= 299\ndef is_redirect(code):\n    return 300 <= code <= 399\ndef is_client_error(code):\n    return 400 <= code <= 499\ndef is_server_error(code):\n    return 500 <= code <= 599",
        "detail": "backend.rest_framework.status",
        "documentation": {}
    },
    {
        "label": "is_success",
        "kind": 2,
        "importPath": "backend.rest_framework.status",
        "description": "backend.rest_framework.status",
        "peekOfCode": "def is_success(code):\n    return 200 <= code <= 299\ndef is_redirect(code):\n    return 300 <= code <= 399\ndef is_client_error(code):\n    return 400 <= code <= 499\ndef is_server_error(code):\n    return 500 <= code <= 599\nHTTP_100_CONTINUE = 100\nHTTP_101_SWITCHING_PROTOCOLS = 101",
        "detail": "backend.rest_framework.status",
        "documentation": {}
    },
    {
        "label": "is_redirect",
        "kind": 2,
        "importPath": "backend.rest_framework.status",
        "description": "backend.rest_framework.status",
        "peekOfCode": "def is_redirect(code):\n    return 300 <= code <= 399\ndef is_client_error(code):\n    return 400 <= code <= 499\ndef is_server_error(code):\n    return 500 <= code <= 599\nHTTP_100_CONTINUE = 100\nHTTP_101_SWITCHING_PROTOCOLS = 101\nHTTP_200_OK = 200\nHTTP_201_CREATED = 201",
        "detail": "backend.rest_framework.status",
        "documentation": {}
    },
    {
        "label": "is_client_error",
        "kind": 2,
        "importPath": "backend.rest_framework.status",
        "description": "backend.rest_framework.status",
        "peekOfCode": "def is_client_error(code):\n    return 400 <= code <= 499\ndef is_server_error(code):\n    return 500 <= code <= 599\nHTTP_100_CONTINUE = 100\nHTTP_101_SWITCHING_PROTOCOLS = 101\nHTTP_200_OK = 200\nHTTP_201_CREATED = 201\nHTTP_202_ACCEPTED = 202\nHTTP_203_NON_AUTHORITATIVE_INFORMATION = 203",
        "detail": "backend.rest_framework.status",
        "documentation": {}
    },
    {
        "label": "is_server_error",
        "kind": 2,
        "importPath": "backend.rest_framework.status",
        "description": "backend.rest_framework.status",
        "peekOfCode": "def is_server_error(code):\n    return 500 <= code <= 599\nHTTP_100_CONTINUE = 100\nHTTP_101_SWITCHING_PROTOCOLS = 101\nHTTP_200_OK = 200\nHTTP_201_CREATED = 201\nHTTP_202_ACCEPTED = 202\nHTTP_203_NON_AUTHORITATIVE_INFORMATION = 203\nHTTP_204_NO_CONTENT = 204\nHTTP_205_RESET_CONTENT = 205",
        "detail": "backend.rest_framework.status",
        "documentation": {}
    },
    {
        "label": "HTTP_100_CONTINUE",
        "kind": 5,
        "importPath": "backend.rest_framework.status",
        "description": "backend.rest_framework.status",
        "peekOfCode": "HTTP_100_CONTINUE = 100\nHTTP_101_SWITCHING_PROTOCOLS = 101\nHTTP_200_OK = 200\nHTTP_201_CREATED = 201\nHTTP_202_ACCEPTED = 202\nHTTP_203_NON_AUTHORITATIVE_INFORMATION = 203\nHTTP_204_NO_CONTENT = 204\nHTTP_205_RESET_CONTENT = 205\nHTTP_206_PARTIAL_CONTENT = 206\nHTTP_207_MULTI_STATUS = 207",
        "detail": "backend.rest_framework.status",
        "documentation": {}
    },
    {
        "label": "HTTP_101_SWITCHING_PROTOCOLS",
        "kind": 5,
        "importPath": "backend.rest_framework.status",
        "description": "backend.rest_framework.status",
        "peekOfCode": "HTTP_101_SWITCHING_PROTOCOLS = 101\nHTTP_200_OK = 200\nHTTP_201_CREATED = 201\nHTTP_202_ACCEPTED = 202\nHTTP_203_NON_AUTHORITATIVE_INFORMATION = 203\nHTTP_204_NO_CONTENT = 204\nHTTP_205_RESET_CONTENT = 205\nHTTP_206_PARTIAL_CONTENT = 206\nHTTP_207_MULTI_STATUS = 207\nHTTP_208_ALREADY_REPORTED = 208",
        "detail": "backend.rest_framework.status",
        "documentation": {}
    },
    {
        "label": "HTTP_200_OK",
        "kind": 5,
        "importPath": "backend.rest_framework.status",
        "description": "backend.rest_framework.status",
        "peekOfCode": "HTTP_200_OK = 200\nHTTP_201_CREATED = 201\nHTTP_202_ACCEPTED = 202\nHTTP_203_NON_AUTHORITATIVE_INFORMATION = 203\nHTTP_204_NO_CONTENT = 204\nHTTP_205_RESET_CONTENT = 205\nHTTP_206_PARTIAL_CONTENT = 206\nHTTP_207_MULTI_STATUS = 207\nHTTP_208_ALREADY_REPORTED = 208\nHTTP_226_IM_USED = 226",
        "detail": "backend.rest_framework.status",
        "documentation": {}
    },
    {
        "label": "HTTP_201_CREATED",
        "kind": 5,
        "importPath": "backend.rest_framework.status",
        "description": "backend.rest_framework.status",
        "peekOfCode": "HTTP_201_CREATED = 201\nHTTP_202_ACCEPTED = 202\nHTTP_203_NON_AUTHORITATIVE_INFORMATION = 203\nHTTP_204_NO_CONTENT = 204\nHTTP_205_RESET_CONTENT = 205\nHTTP_206_PARTIAL_CONTENT = 206\nHTTP_207_MULTI_STATUS = 207\nHTTP_208_ALREADY_REPORTED = 208\nHTTP_226_IM_USED = 226\nHTTP_300_MULTIPLE_CHOICES = 300",
        "detail": "backend.rest_framework.status",
        "documentation": {}
    },
    {
        "label": "HTTP_202_ACCEPTED",
        "kind": 5,
        "importPath": "backend.rest_framework.status",
        "description": "backend.rest_framework.status",
        "peekOfCode": "HTTP_202_ACCEPTED = 202\nHTTP_203_NON_AUTHORITATIVE_INFORMATION = 203\nHTTP_204_NO_CONTENT = 204\nHTTP_205_RESET_CONTENT = 205\nHTTP_206_PARTIAL_CONTENT = 206\nHTTP_207_MULTI_STATUS = 207\nHTTP_208_ALREADY_REPORTED = 208\nHTTP_226_IM_USED = 226\nHTTP_300_MULTIPLE_CHOICES = 300\nHTTP_301_MOVED_PERMANENTLY = 301",
        "detail": "backend.rest_framework.status",
        "documentation": {}
    },
    {
        "label": "HTTP_203_NON_AUTHORITATIVE_INFORMATION",
        "kind": 5,
        "importPath": "backend.rest_framework.status",
        "description": "backend.rest_framework.status",
        "peekOfCode": "HTTP_203_NON_AUTHORITATIVE_INFORMATION = 203\nHTTP_204_NO_CONTENT = 204\nHTTP_205_RESET_CONTENT = 205\nHTTP_206_PARTIAL_CONTENT = 206\nHTTP_207_MULTI_STATUS = 207\nHTTP_208_ALREADY_REPORTED = 208\nHTTP_226_IM_USED = 226\nHTTP_300_MULTIPLE_CHOICES = 300\nHTTP_301_MOVED_PERMANENTLY = 301\nHTTP_302_FOUND = 302",
        "detail": "backend.rest_framework.status",
        "documentation": {}
    },
    {
        "label": "HTTP_204_NO_CONTENT",
        "kind": 5,
        "importPath": "backend.rest_framework.status",
        "description": "backend.rest_framework.status",
        "peekOfCode": "HTTP_204_NO_CONTENT = 204\nHTTP_205_RESET_CONTENT = 205\nHTTP_206_PARTIAL_CONTENT = 206\nHTTP_207_MULTI_STATUS = 207\nHTTP_208_ALREADY_REPORTED = 208\nHTTP_226_IM_USED = 226\nHTTP_300_MULTIPLE_CHOICES = 300\nHTTP_301_MOVED_PERMANENTLY = 301\nHTTP_302_FOUND = 302\nHTTP_303_SEE_OTHER = 303",
        "detail": "backend.rest_framework.status",
        "documentation": {}
    },
    {
        "label": "HTTP_205_RESET_CONTENT",
        "kind": 5,
        "importPath": "backend.rest_framework.status",
        "description": "backend.rest_framework.status",
        "peekOfCode": "HTTP_205_RESET_CONTENT = 205\nHTTP_206_PARTIAL_CONTENT = 206\nHTTP_207_MULTI_STATUS = 207\nHTTP_208_ALREADY_REPORTED = 208\nHTTP_226_IM_USED = 226\nHTTP_300_MULTIPLE_CHOICES = 300\nHTTP_301_MOVED_PERMANENTLY = 301\nHTTP_302_FOUND = 302\nHTTP_303_SEE_OTHER = 303\nHTTP_304_NOT_MODIFIED = 304",
        "detail": "backend.rest_framework.status",
        "documentation": {}
    },
    {
        "label": "HTTP_206_PARTIAL_CONTENT",
        "kind": 5,
        "importPath": "backend.rest_framework.status",
        "description": "backend.rest_framework.status",
        "peekOfCode": "HTTP_206_PARTIAL_CONTENT = 206\nHTTP_207_MULTI_STATUS = 207\nHTTP_208_ALREADY_REPORTED = 208\nHTTP_226_IM_USED = 226\nHTTP_300_MULTIPLE_CHOICES = 300\nHTTP_301_MOVED_PERMANENTLY = 301\nHTTP_302_FOUND = 302\nHTTP_303_SEE_OTHER = 303\nHTTP_304_NOT_MODIFIED = 304\nHTTP_305_USE_PROXY = 305",
        "detail": "backend.rest_framework.status",
        "documentation": {}
    },
    {
        "label": "HTTP_207_MULTI_STATUS",
        "kind": 5,
        "importPath": "backend.rest_framework.status",
        "description": "backend.rest_framework.status",
        "peekOfCode": "HTTP_207_MULTI_STATUS = 207\nHTTP_208_ALREADY_REPORTED = 208\nHTTP_226_IM_USED = 226\nHTTP_300_MULTIPLE_CHOICES = 300\nHTTP_301_MOVED_PERMANENTLY = 301\nHTTP_302_FOUND = 302\nHTTP_303_SEE_OTHER = 303\nHTTP_304_NOT_MODIFIED = 304\nHTTP_305_USE_PROXY = 305\nHTTP_306_RESERVED = 306",
        "detail": "backend.rest_framework.status",
        "documentation": {}
    },
    {
        "label": "HTTP_208_ALREADY_REPORTED",
        "kind": 5,
        "importPath": "backend.rest_framework.status",
        "description": "backend.rest_framework.status",
        "peekOfCode": "HTTP_208_ALREADY_REPORTED = 208\nHTTP_226_IM_USED = 226\nHTTP_300_MULTIPLE_CHOICES = 300\nHTTP_301_MOVED_PERMANENTLY = 301\nHTTP_302_FOUND = 302\nHTTP_303_SEE_OTHER = 303\nHTTP_304_NOT_MODIFIED = 304\nHTTP_305_USE_PROXY = 305\nHTTP_306_RESERVED = 306\nHTTP_307_TEMPORARY_REDIRECT = 307",
        "detail": "backend.rest_framework.status",
        "documentation": {}
    },
    {
        "label": "HTTP_226_IM_USED",
        "kind": 5,
        "importPath": "backend.rest_framework.status",
        "description": "backend.rest_framework.status",
        "peekOfCode": "HTTP_226_IM_USED = 226\nHTTP_300_MULTIPLE_CHOICES = 300\nHTTP_301_MOVED_PERMANENTLY = 301\nHTTP_302_FOUND = 302\nHTTP_303_SEE_OTHER = 303\nHTTP_304_NOT_MODIFIED = 304\nHTTP_305_USE_PROXY = 305\nHTTP_306_RESERVED = 306\nHTTP_307_TEMPORARY_REDIRECT = 307\nHTTP_308_PERMANENT_REDIRECT = 308",
        "detail": "backend.rest_framework.status",
        "documentation": {}
    },
    {
        "label": "HTTP_300_MULTIPLE_CHOICES",
        "kind": 5,
        "importPath": "backend.rest_framework.status",
        "description": "backend.rest_framework.status",
        "peekOfCode": "HTTP_300_MULTIPLE_CHOICES = 300\nHTTP_301_MOVED_PERMANENTLY = 301\nHTTP_302_FOUND = 302\nHTTP_303_SEE_OTHER = 303\nHTTP_304_NOT_MODIFIED = 304\nHTTP_305_USE_PROXY = 305\nHTTP_306_RESERVED = 306\nHTTP_307_TEMPORARY_REDIRECT = 307\nHTTP_308_PERMANENT_REDIRECT = 308\nHTTP_400_BAD_REQUEST = 400",
        "detail": "backend.rest_framework.status",
        "documentation": {}
    },
    {
        "label": "HTTP_301_MOVED_PERMANENTLY",
        "kind": 5,
        "importPath": "backend.rest_framework.status",
        "description": "backend.rest_framework.status",
        "peekOfCode": "HTTP_301_MOVED_PERMANENTLY = 301\nHTTP_302_FOUND = 302\nHTTP_303_SEE_OTHER = 303\nHTTP_304_NOT_MODIFIED = 304\nHTTP_305_USE_PROXY = 305\nHTTP_306_RESERVED = 306\nHTTP_307_TEMPORARY_REDIRECT = 307\nHTTP_308_PERMANENT_REDIRECT = 308\nHTTP_400_BAD_REQUEST = 400\nHTTP_401_UNAUTHORIZED = 401",
        "detail": "backend.rest_framework.status",
        "documentation": {}
    },
    {
        "label": "HTTP_302_FOUND",
        "kind": 5,
        "importPath": "backend.rest_framework.status",
        "description": "backend.rest_framework.status",
        "peekOfCode": "HTTP_302_FOUND = 302\nHTTP_303_SEE_OTHER = 303\nHTTP_304_NOT_MODIFIED = 304\nHTTP_305_USE_PROXY = 305\nHTTP_306_RESERVED = 306\nHTTP_307_TEMPORARY_REDIRECT = 307\nHTTP_308_PERMANENT_REDIRECT = 308\nHTTP_400_BAD_REQUEST = 400\nHTTP_401_UNAUTHORIZED = 401\nHTTP_402_PAYMENT_REQUIRED = 402",
        "detail": "backend.rest_framework.status",
        "documentation": {}
    },
    {
        "label": "HTTP_303_SEE_OTHER",
        "kind": 5,
        "importPath": "backend.rest_framework.status",
        "description": "backend.rest_framework.status",
        "peekOfCode": "HTTP_303_SEE_OTHER = 303\nHTTP_304_NOT_MODIFIED = 304\nHTTP_305_USE_PROXY = 305\nHTTP_306_RESERVED = 306\nHTTP_307_TEMPORARY_REDIRECT = 307\nHTTP_308_PERMANENT_REDIRECT = 308\nHTTP_400_BAD_REQUEST = 400\nHTTP_401_UNAUTHORIZED = 401\nHTTP_402_PAYMENT_REQUIRED = 402\nHTTP_403_FORBIDDEN = 403",
        "detail": "backend.rest_framework.status",
        "documentation": {}
    },
    {
        "label": "HTTP_304_NOT_MODIFIED",
        "kind": 5,
        "importPath": "backend.rest_framework.status",
        "description": "backend.rest_framework.status",
        "peekOfCode": "HTTP_304_NOT_MODIFIED = 304\nHTTP_305_USE_PROXY = 305\nHTTP_306_RESERVED = 306\nHTTP_307_TEMPORARY_REDIRECT = 307\nHTTP_308_PERMANENT_REDIRECT = 308\nHTTP_400_BAD_REQUEST = 400\nHTTP_401_UNAUTHORIZED = 401\nHTTP_402_PAYMENT_REQUIRED = 402\nHTTP_403_FORBIDDEN = 403\nHTTP_404_NOT_FOUND = 404",
        "detail": "backend.rest_framework.status",
        "documentation": {}
    },
    {
        "label": "HTTP_305_USE_PROXY",
        "kind": 5,
        "importPath": "backend.rest_framework.status",
        "description": "backend.rest_framework.status",
        "peekOfCode": "HTTP_305_USE_PROXY = 305\nHTTP_306_RESERVED = 306\nHTTP_307_TEMPORARY_REDIRECT = 307\nHTTP_308_PERMANENT_REDIRECT = 308\nHTTP_400_BAD_REQUEST = 400\nHTTP_401_UNAUTHORIZED = 401\nHTTP_402_PAYMENT_REQUIRED = 402\nHTTP_403_FORBIDDEN = 403\nHTTP_404_NOT_FOUND = 404\nHTTP_405_METHOD_NOT_ALLOWED = 405",
        "detail": "backend.rest_framework.status",
        "documentation": {}
    },
    {
        "label": "HTTP_306_RESERVED",
        "kind": 5,
        "importPath": "backend.rest_framework.status",
        "description": "backend.rest_framework.status",
        "peekOfCode": "HTTP_306_RESERVED = 306\nHTTP_307_TEMPORARY_REDIRECT = 307\nHTTP_308_PERMANENT_REDIRECT = 308\nHTTP_400_BAD_REQUEST = 400\nHTTP_401_UNAUTHORIZED = 401\nHTTP_402_PAYMENT_REQUIRED = 402\nHTTP_403_FORBIDDEN = 403\nHTTP_404_NOT_FOUND = 404\nHTTP_405_METHOD_NOT_ALLOWED = 405\nHTTP_406_NOT_ACCEPTABLE = 406",
        "detail": "backend.rest_framework.status",
        "documentation": {}
    },
    {
        "label": "HTTP_307_TEMPORARY_REDIRECT",
        "kind": 5,
        "importPath": "backend.rest_framework.status",
        "description": "backend.rest_framework.status",
        "peekOfCode": "HTTP_307_TEMPORARY_REDIRECT = 307\nHTTP_308_PERMANENT_REDIRECT = 308\nHTTP_400_BAD_REQUEST = 400\nHTTP_401_UNAUTHORIZED = 401\nHTTP_402_PAYMENT_REQUIRED = 402\nHTTP_403_FORBIDDEN = 403\nHTTP_404_NOT_FOUND = 404\nHTTP_405_METHOD_NOT_ALLOWED = 405\nHTTP_406_NOT_ACCEPTABLE = 406\nHTTP_407_PROXY_AUTHENTICATION_REQUIRED = 407",
        "detail": "backend.rest_framework.status",
        "documentation": {}
    },
    {
        "label": "HTTP_308_PERMANENT_REDIRECT",
        "kind": 5,
        "importPath": "backend.rest_framework.status",
        "description": "backend.rest_framework.status",
        "peekOfCode": "HTTP_308_PERMANENT_REDIRECT = 308\nHTTP_400_BAD_REQUEST = 400\nHTTP_401_UNAUTHORIZED = 401\nHTTP_402_PAYMENT_REQUIRED = 402\nHTTP_403_FORBIDDEN = 403\nHTTP_404_NOT_FOUND = 404\nHTTP_405_METHOD_NOT_ALLOWED = 405\nHTTP_406_NOT_ACCEPTABLE = 406\nHTTP_407_PROXY_AUTHENTICATION_REQUIRED = 407\nHTTP_408_REQUEST_TIMEOUT = 408",
        "detail": "backend.rest_framework.status",
        "documentation": {}
    },
    {
        "label": "HTTP_400_BAD_REQUEST",
        "kind": 5,
        "importPath": "backend.rest_framework.status",
        "description": "backend.rest_framework.status",
        "peekOfCode": "HTTP_400_BAD_REQUEST = 400\nHTTP_401_UNAUTHORIZED = 401\nHTTP_402_PAYMENT_REQUIRED = 402\nHTTP_403_FORBIDDEN = 403\nHTTP_404_NOT_FOUND = 404\nHTTP_405_METHOD_NOT_ALLOWED = 405\nHTTP_406_NOT_ACCEPTABLE = 406\nHTTP_407_PROXY_AUTHENTICATION_REQUIRED = 407\nHTTP_408_REQUEST_TIMEOUT = 408\nHTTP_409_CONFLICT = 409",
        "detail": "backend.rest_framework.status",
        "documentation": {}
    },
    {
        "label": "HTTP_401_UNAUTHORIZED",
        "kind": 5,
        "importPath": "backend.rest_framework.status",
        "description": "backend.rest_framework.status",
        "peekOfCode": "HTTP_401_UNAUTHORIZED = 401\nHTTP_402_PAYMENT_REQUIRED = 402\nHTTP_403_FORBIDDEN = 403\nHTTP_404_NOT_FOUND = 404\nHTTP_405_METHOD_NOT_ALLOWED = 405\nHTTP_406_NOT_ACCEPTABLE = 406\nHTTP_407_PROXY_AUTHENTICATION_REQUIRED = 407\nHTTP_408_REQUEST_TIMEOUT = 408\nHTTP_409_CONFLICT = 409\nHTTP_410_GONE = 410",
        "detail": "backend.rest_framework.status",
        "documentation": {}
    },
    {
        "label": "HTTP_402_PAYMENT_REQUIRED",
        "kind": 5,
        "importPath": "backend.rest_framework.status",
        "description": "backend.rest_framework.status",
        "peekOfCode": "HTTP_402_PAYMENT_REQUIRED = 402\nHTTP_403_FORBIDDEN = 403\nHTTP_404_NOT_FOUND = 404\nHTTP_405_METHOD_NOT_ALLOWED = 405\nHTTP_406_NOT_ACCEPTABLE = 406\nHTTP_407_PROXY_AUTHENTICATION_REQUIRED = 407\nHTTP_408_REQUEST_TIMEOUT = 408\nHTTP_409_CONFLICT = 409\nHTTP_410_GONE = 410\nHTTP_411_LENGTH_REQUIRED = 411",
        "detail": "backend.rest_framework.status",
        "documentation": {}
    },
    {
        "label": "HTTP_403_FORBIDDEN",
        "kind": 5,
        "importPath": "backend.rest_framework.status",
        "description": "backend.rest_framework.status",
        "peekOfCode": "HTTP_403_FORBIDDEN = 403\nHTTP_404_NOT_FOUND = 404\nHTTP_405_METHOD_NOT_ALLOWED = 405\nHTTP_406_NOT_ACCEPTABLE = 406\nHTTP_407_PROXY_AUTHENTICATION_REQUIRED = 407\nHTTP_408_REQUEST_TIMEOUT = 408\nHTTP_409_CONFLICT = 409\nHTTP_410_GONE = 410\nHTTP_411_LENGTH_REQUIRED = 411\nHTTP_412_PRECONDITION_FAILED = 412",
        "detail": "backend.rest_framework.status",
        "documentation": {}
    },
    {
        "label": "HTTP_404_NOT_FOUND",
        "kind": 5,
        "importPath": "backend.rest_framework.status",
        "description": "backend.rest_framework.status",
        "peekOfCode": "HTTP_404_NOT_FOUND = 404\nHTTP_405_METHOD_NOT_ALLOWED = 405\nHTTP_406_NOT_ACCEPTABLE = 406\nHTTP_407_PROXY_AUTHENTICATION_REQUIRED = 407\nHTTP_408_REQUEST_TIMEOUT = 408\nHTTP_409_CONFLICT = 409\nHTTP_410_GONE = 410\nHTTP_411_LENGTH_REQUIRED = 411\nHTTP_412_PRECONDITION_FAILED = 412\nHTTP_413_REQUEST_ENTITY_TOO_LARGE = 413",
        "detail": "backend.rest_framework.status",
        "documentation": {}
    },
    {
        "label": "HTTP_405_METHOD_NOT_ALLOWED",
        "kind": 5,
        "importPath": "backend.rest_framework.status",
        "description": "backend.rest_framework.status",
        "peekOfCode": "HTTP_405_METHOD_NOT_ALLOWED = 405\nHTTP_406_NOT_ACCEPTABLE = 406\nHTTP_407_PROXY_AUTHENTICATION_REQUIRED = 407\nHTTP_408_REQUEST_TIMEOUT = 408\nHTTP_409_CONFLICT = 409\nHTTP_410_GONE = 410\nHTTP_411_LENGTH_REQUIRED = 411\nHTTP_412_PRECONDITION_FAILED = 412\nHTTP_413_REQUEST_ENTITY_TOO_LARGE = 413\nHTTP_414_REQUEST_URI_TOO_LONG = 414",
        "detail": "backend.rest_framework.status",
        "documentation": {}
    },
    {
        "label": "HTTP_406_NOT_ACCEPTABLE",
        "kind": 5,
        "importPath": "backend.rest_framework.status",
        "description": "backend.rest_framework.status",
        "peekOfCode": "HTTP_406_NOT_ACCEPTABLE = 406\nHTTP_407_PROXY_AUTHENTICATION_REQUIRED = 407\nHTTP_408_REQUEST_TIMEOUT = 408\nHTTP_409_CONFLICT = 409\nHTTP_410_GONE = 410\nHTTP_411_LENGTH_REQUIRED = 411\nHTTP_412_PRECONDITION_FAILED = 412\nHTTP_413_REQUEST_ENTITY_TOO_LARGE = 413\nHTTP_414_REQUEST_URI_TOO_LONG = 414\nHTTP_415_UNSUPPORTED_MEDIA_TYPE = 415",
        "detail": "backend.rest_framework.status",
        "documentation": {}
    },
    {
        "label": "HTTP_407_PROXY_AUTHENTICATION_REQUIRED",
        "kind": 5,
        "importPath": "backend.rest_framework.status",
        "description": "backend.rest_framework.status",
        "peekOfCode": "HTTP_407_PROXY_AUTHENTICATION_REQUIRED = 407\nHTTP_408_REQUEST_TIMEOUT = 408\nHTTP_409_CONFLICT = 409\nHTTP_410_GONE = 410\nHTTP_411_LENGTH_REQUIRED = 411\nHTTP_412_PRECONDITION_FAILED = 412\nHTTP_413_REQUEST_ENTITY_TOO_LARGE = 413\nHTTP_414_REQUEST_URI_TOO_LONG = 414\nHTTP_415_UNSUPPORTED_MEDIA_TYPE = 415\nHTTP_416_REQUESTED_RANGE_NOT_SATISFIABLE = 416",
        "detail": "backend.rest_framework.status",
        "documentation": {}
    },
    {
        "label": "HTTP_408_REQUEST_TIMEOUT",
        "kind": 5,
        "importPath": "backend.rest_framework.status",
        "description": "backend.rest_framework.status",
        "peekOfCode": "HTTP_408_REQUEST_TIMEOUT = 408\nHTTP_409_CONFLICT = 409\nHTTP_410_GONE = 410\nHTTP_411_LENGTH_REQUIRED = 411\nHTTP_412_PRECONDITION_FAILED = 412\nHTTP_413_REQUEST_ENTITY_TOO_LARGE = 413\nHTTP_414_REQUEST_URI_TOO_LONG = 414\nHTTP_415_UNSUPPORTED_MEDIA_TYPE = 415\nHTTP_416_REQUESTED_RANGE_NOT_SATISFIABLE = 416\nHTTP_417_EXPECTATION_FAILED = 417",
        "detail": "backend.rest_framework.status",
        "documentation": {}
    },
    {
        "label": "HTTP_409_CONFLICT",
        "kind": 5,
        "importPath": "backend.rest_framework.status",
        "description": "backend.rest_framework.status",
        "peekOfCode": "HTTP_409_CONFLICT = 409\nHTTP_410_GONE = 410\nHTTP_411_LENGTH_REQUIRED = 411\nHTTP_412_PRECONDITION_FAILED = 412\nHTTP_413_REQUEST_ENTITY_TOO_LARGE = 413\nHTTP_414_REQUEST_URI_TOO_LONG = 414\nHTTP_415_UNSUPPORTED_MEDIA_TYPE = 415\nHTTP_416_REQUESTED_RANGE_NOT_SATISFIABLE = 416\nHTTP_417_EXPECTATION_FAILED = 417\nHTTP_418_IM_A_TEAPOT = 418",
        "detail": "backend.rest_framework.status",
        "documentation": {}
    },
    {
        "label": "HTTP_410_GONE",
        "kind": 5,
        "importPath": "backend.rest_framework.status",
        "description": "backend.rest_framework.status",
        "peekOfCode": "HTTP_410_GONE = 410\nHTTP_411_LENGTH_REQUIRED = 411\nHTTP_412_PRECONDITION_FAILED = 412\nHTTP_413_REQUEST_ENTITY_TOO_LARGE = 413\nHTTP_414_REQUEST_URI_TOO_LONG = 414\nHTTP_415_UNSUPPORTED_MEDIA_TYPE = 415\nHTTP_416_REQUESTED_RANGE_NOT_SATISFIABLE = 416\nHTTP_417_EXPECTATION_FAILED = 417\nHTTP_418_IM_A_TEAPOT = 418\nHTTP_422_UNPROCESSABLE_ENTITY = 422",
        "detail": "backend.rest_framework.status",
        "documentation": {}
    },
    {
        "label": "HTTP_411_LENGTH_REQUIRED",
        "kind": 5,
        "importPath": "backend.rest_framework.status",
        "description": "backend.rest_framework.status",
        "peekOfCode": "HTTP_411_LENGTH_REQUIRED = 411\nHTTP_412_PRECONDITION_FAILED = 412\nHTTP_413_REQUEST_ENTITY_TOO_LARGE = 413\nHTTP_414_REQUEST_URI_TOO_LONG = 414\nHTTP_415_UNSUPPORTED_MEDIA_TYPE = 415\nHTTP_416_REQUESTED_RANGE_NOT_SATISFIABLE = 416\nHTTP_417_EXPECTATION_FAILED = 417\nHTTP_418_IM_A_TEAPOT = 418\nHTTP_422_UNPROCESSABLE_ENTITY = 422\nHTTP_423_LOCKED = 423",
        "detail": "backend.rest_framework.status",
        "documentation": {}
    },
    {
        "label": "HTTP_412_PRECONDITION_FAILED",
        "kind": 5,
        "importPath": "backend.rest_framework.status",
        "description": "backend.rest_framework.status",
        "peekOfCode": "HTTP_412_PRECONDITION_FAILED = 412\nHTTP_413_REQUEST_ENTITY_TOO_LARGE = 413\nHTTP_414_REQUEST_URI_TOO_LONG = 414\nHTTP_415_UNSUPPORTED_MEDIA_TYPE = 415\nHTTP_416_REQUESTED_RANGE_NOT_SATISFIABLE = 416\nHTTP_417_EXPECTATION_FAILED = 417\nHTTP_418_IM_A_TEAPOT = 418\nHTTP_422_UNPROCESSABLE_ENTITY = 422\nHTTP_423_LOCKED = 423\nHTTP_424_FAILED_DEPENDENCY = 424",
        "detail": "backend.rest_framework.status",
        "documentation": {}
    },
    {
        "label": "HTTP_413_REQUEST_ENTITY_TOO_LARGE",
        "kind": 5,
        "importPath": "backend.rest_framework.status",
        "description": "backend.rest_framework.status",
        "peekOfCode": "HTTP_413_REQUEST_ENTITY_TOO_LARGE = 413\nHTTP_414_REQUEST_URI_TOO_LONG = 414\nHTTP_415_UNSUPPORTED_MEDIA_TYPE = 415\nHTTP_416_REQUESTED_RANGE_NOT_SATISFIABLE = 416\nHTTP_417_EXPECTATION_FAILED = 417\nHTTP_418_IM_A_TEAPOT = 418\nHTTP_422_UNPROCESSABLE_ENTITY = 422\nHTTP_423_LOCKED = 423\nHTTP_424_FAILED_DEPENDENCY = 424\nHTTP_426_UPGRADE_REQUIRED = 426",
        "detail": "backend.rest_framework.status",
        "documentation": {}
    },
    {
        "label": "HTTP_414_REQUEST_URI_TOO_LONG",
        "kind": 5,
        "importPath": "backend.rest_framework.status",
        "description": "backend.rest_framework.status",
        "peekOfCode": "HTTP_414_REQUEST_URI_TOO_LONG = 414\nHTTP_415_UNSUPPORTED_MEDIA_TYPE = 415\nHTTP_416_REQUESTED_RANGE_NOT_SATISFIABLE = 416\nHTTP_417_EXPECTATION_FAILED = 417\nHTTP_418_IM_A_TEAPOT = 418\nHTTP_422_UNPROCESSABLE_ENTITY = 422\nHTTP_423_LOCKED = 423\nHTTP_424_FAILED_DEPENDENCY = 424\nHTTP_426_UPGRADE_REQUIRED = 426\nHTTP_428_PRECONDITION_REQUIRED = 428",
        "detail": "backend.rest_framework.status",
        "documentation": {}
    },
    {
        "label": "HTTP_415_UNSUPPORTED_MEDIA_TYPE",
        "kind": 5,
        "importPath": "backend.rest_framework.status",
        "description": "backend.rest_framework.status",
        "peekOfCode": "HTTP_415_UNSUPPORTED_MEDIA_TYPE = 415\nHTTP_416_REQUESTED_RANGE_NOT_SATISFIABLE = 416\nHTTP_417_EXPECTATION_FAILED = 417\nHTTP_418_IM_A_TEAPOT = 418\nHTTP_422_UNPROCESSABLE_ENTITY = 422\nHTTP_423_LOCKED = 423\nHTTP_424_FAILED_DEPENDENCY = 424\nHTTP_426_UPGRADE_REQUIRED = 426\nHTTP_428_PRECONDITION_REQUIRED = 428\nHTTP_429_TOO_MANY_REQUESTS = 429",
        "detail": "backend.rest_framework.status",
        "documentation": {}
    },
    {
        "label": "HTTP_416_REQUESTED_RANGE_NOT_SATISFIABLE",
        "kind": 5,
        "importPath": "backend.rest_framework.status",
        "description": "backend.rest_framework.status",
        "peekOfCode": "HTTP_416_REQUESTED_RANGE_NOT_SATISFIABLE = 416\nHTTP_417_EXPECTATION_FAILED = 417\nHTTP_418_IM_A_TEAPOT = 418\nHTTP_422_UNPROCESSABLE_ENTITY = 422\nHTTP_423_LOCKED = 423\nHTTP_424_FAILED_DEPENDENCY = 424\nHTTP_426_UPGRADE_REQUIRED = 426\nHTTP_428_PRECONDITION_REQUIRED = 428\nHTTP_429_TOO_MANY_REQUESTS = 429\nHTTP_431_REQUEST_HEADER_FIELDS_TOO_LARGE = 431",
        "detail": "backend.rest_framework.status",
        "documentation": {}
    },
    {
        "label": "HTTP_417_EXPECTATION_FAILED",
        "kind": 5,
        "importPath": "backend.rest_framework.status",
        "description": "backend.rest_framework.status",
        "peekOfCode": "HTTP_417_EXPECTATION_FAILED = 417\nHTTP_418_IM_A_TEAPOT = 418\nHTTP_422_UNPROCESSABLE_ENTITY = 422\nHTTP_423_LOCKED = 423\nHTTP_424_FAILED_DEPENDENCY = 424\nHTTP_426_UPGRADE_REQUIRED = 426\nHTTP_428_PRECONDITION_REQUIRED = 428\nHTTP_429_TOO_MANY_REQUESTS = 429\nHTTP_431_REQUEST_HEADER_FIELDS_TOO_LARGE = 431\nHTTP_451_UNAVAILABLE_FOR_LEGAL_REASONS = 451",
        "detail": "backend.rest_framework.status",
        "documentation": {}
    },
    {
        "label": "HTTP_418_IM_A_TEAPOT",
        "kind": 5,
        "importPath": "backend.rest_framework.status",
        "description": "backend.rest_framework.status",
        "peekOfCode": "HTTP_418_IM_A_TEAPOT = 418\nHTTP_422_UNPROCESSABLE_ENTITY = 422\nHTTP_423_LOCKED = 423\nHTTP_424_FAILED_DEPENDENCY = 424\nHTTP_426_UPGRADE_REQUIRED = 426\nHTTP_428_PRECONDITION_REQUIRED = 428\nHTTP_429_TOO_MANY_REQUESTS = 429\nHTTP_431_REQUEST_HEADER_FIELDS_TOO_LARGE = 431\nHTTP_451_UNAVAILABLE_FOR_LEGAL_REASONS = 451\nHTTP_500_INTERNAL_SERVER_ERROR = 500",
        "detail": "backend.rest_framework.status",
        "documentation": {}
    },
    {
        "label": "HTTP_422_UNPROCESSABLE_ENTITY",
        "kind": 5,
        "importPath": "backend.rest_framework.status",
        "description": "backend.rest_framework.status",
        "peekOfCode": "HTTP_422_UNPROCESSABLE_ENTITY = 422\nHTTP_423_LOCKED = 423\nHTTP_424_FAILED_DEPENDENCY = 424\nHTTP_426_UPGRADE_REQUIRED = 426\nHTTP_428_PRECONDITION_REQUIRED = 428\nHTTP_429_TOO_MANY_REQUESTS = 429\nHTTP_431_REQUEST_HEADER_FIELDS_TOO_LARGE = 431\nHTTP_451_UNAVAILABLE_FOR_LEGAL_REASONS = 451\nHTTP_500_INTERNAL_SERVER_ERROR = 500\nHTTP_501_NOT_IMPLEMENTED = 501",
        "detail": "backend.rest_framework.status",
        "documentation": {}
    },
    {
        "label": "HTTP_423_LOCKED",
        "kind": 5,
        "importPath": "backend.rest_framework.status",
        "description": "backend.rest_framework.status",
        "peekOfCode": "HTTP_423_LOCKED = 423\nHTTP_424_FAILED_DEPENDENCY = 424\nHTTP_426_UPGRADE_REQUIRED = 426\nHTTP_428_PRECONDITION_REQUIRED = 428\nHTTP_429_TOO_MANY_REQUESTS = 429\nHTTP_431_REQUEST_HEADER_FIELDS_TOO_LARGE = 431\nHTTP_451_UNAVAILABLE_FOR_LEGAL_REASONS = 451\nHTTP_500_INTERNAL_SERVER_ERROR = 500\nHTTP_501_NOT_IMPLEMENTED = 501\nHTTP_502_BAD_GATEWAY = 502",
        "detail": "backend.rest_framework.status",
        "documentation": {}
    },
    {
        "label": "HTTP_424_FAILED_DEPENDENCY",
        "kind": 5,
        "importPath": "backend.rest_framework.status",
        "description": "backend.rest_framework.status",
        "peekOfCode": "HTTP_424_FAILED_DEPENDENCY = 424\nHTTP_426_UPGRADE_REQUIRED = 426\nHTTP_428_PRECONDITION_REQUIRED = 428\nHTTP_429_TOO_MANY_REQUESTS = 429\nHTTP_431_REQUEST_HEADER_FIELDS_TOO_LARGE = 431\nHTTP_451_UNAVAILABLE_FOR_LEGAL_REASONS = 451\nHTTP_500_INTERNAL_SERVER_ERROR = 500\nHTTP_501_NOT_IMPLEMENTED = 501\nHTTP_502_BAD_GATEWAY = 502\nHTTP_503_SERVICE_UNAVAILABLE = 503",
        "detail": "backend.rest_framework.status",
        "documentation": {}
    },
    {
        "label": "HTTP_426_UPGRADE_REQUIRED",
        "kind": 5,
        "importPath": "backend.rest_framework.status",
        "description": "backend.rest_framework.status",
        "peekOfCode": "HTTP_426_UPGRADE_REQUIRED = 426\nHTTP_428_PRECONDITION_REQUIRED = 428\nHTTP_429_TOO_MANY_REQUESTS = 429\nHTTP_431_REQUEST_HEADER_FIELDS_TOO_LARGE = 431\nHTTP_451_UNAVAILABLE_FOR_LEGAL_REASONS = 451\nHTTP_500_INTERNAL_SERVER_ERROR = 500\nHTTP_501_NOT_IMPLEMENTED = 501\nHTTP_502_BAD_GATEWAY = 502\nHTTP_503_SERVICE_UNAVAILABLE = 503\nHTTP_504_GATEWAY_TIMEOUT = 504",
        "detail": "backend.rest_framework.status",
        "documentation": {}
    },
    {
        "label": "HTTP_428_PRECONDITION_REQUIRED",
        "kind": 5,
        "importPath": "backend.rest_framework.status",
        "description": "backend.rest_framework.status",
        "peekOfCode": "HTTP_428_PRECONDITION_REQUIRED = 428\nHTTP_429_TOO_MANY_REQUESTS = 429\nHTTP_431_REQUEST_HEADER_FIELDS_TOO_LARGE = 431\nHTTP_451_UNAVAILABLE_FOR_LEGAL_REASONS = 451\nHTTP_500_INTERNAL_SERVER_ERROR = 500\nHTTP_501_NOT_IMPLEMENTED = 501\nHTTP_502_BAD_GATEWAY = 502\nHTTP_503_SERVICE_UNAVAILABLE = 503\nHTTP_504_GATEWAY_TIMEOUT = 504\nHTTP_505_HTTP_VERSION_NOT_SUPPORTED = 505",
        "detail": "backend.rest_framework.status",
        "documentation": {}
    },
    {
        "label": "HTTP_429_TOO_MANY_REQUESTS",
        "kind": 5,
        "importPath": "backend.rest_framework.status",
        "description": "backend.rest_framework.status",
        "peekOfCode": "HTTP_429_TOO_MANY_REQUESTS = 429\nHTTP_431_REQUEST_HEADER_FIELDS_TOO_LARGE = 431\nHTTP_451_UNAVAILABLE_FOR_LEGAL_REASONS = 451\nHTTP_500_INTERNAL_SERVER_ERROR = 500\nHTTP_501_NOT_IMPLEMENTED = 501\nHTTP_502_BAD_GATEWAY = 502\nHTTP_503_SERVICE_UNAVAILABLE = 503\nHTTP_504_GATEWAY_TIMEOUT = 504\nHTTP_505_HTTP_VERSION_NOT_SUPPORTED = 505\nHTTP_506_VARIANT_ALSO_NEGOTIATES = 506",
        "detail": "backend.rest_framework.status",
        "documentation": {}
    },
    {
        "label": "HTTP_431_REQUEST_HEADER_FIELDS_TOO_LARGE",
        "kind": 5,
        "importPath": "backend.rest_framework.status",
        "description": "backend.rest_framework.status",
        "peekOfCode": "HTTP_431_REQUEST_HEADER_FIELDS_TOO_LARGE = 431\nHTTP_451_UNAVAILABLE_FOR_LEGAL_REASONS = 451\nHTTP_500_INTERNAL_SERVER_ERROR = 500\nHTTP_501_NOT_IMPLEMENTED = 501\nHTTP_502_BAD_GATEWAY = 502\nHTTP_503_SERVICE_UNAVAILABLE = 503\nHTTP_504_GATEWAY_TIMEOUT = 504\nHTTP_505_HTTP_VERSION_NOT_SUPPORTED = 505\nHTTP_506_VARIANT_ALSO_NEGOTIATES = 506\nHTTP_507_INSUFFICIENT_STORAGE = 507",
        "detail": "backend.rest_framework.status",
        "documentation": {}
    },
    {
        "label": "HTTP_451_UNAVAILABLE_FOR_LEGAL_REASONS",
        "kind": 5,
        "importPath": "backend.rest_framework.status",
        "description": "backend.rest_framework.status",
        "peekOfCode": "HTTP_451_UNAVAILABLE_FOR_LEGAL_REASONS = 451\nHTTP_500_INTERNAL_SERVER_ERROR = 500\nHTTP_501_NOT_IMPLEMENTED = 501\nHTTP_502_BAD_GATEWAY = 502\nHTTP_503_SERVICE_UNAVAILABLE = 503\nHTTP_504_GATEWAY_TIMEOUT = 504\nHTTP_505_HTTP_VERSION_NOT_SUPPORTED = 505\nHTTP_506_VARIANT_ALSO_NEGOTIATES = 506\nHTTP_507_INSUFFICIENT_STORAGE = 507\nHTTP_508_LOOP_DETECTED = 508",
        "detail": "backend.rest_framework.status",
        "documentation": {}
    },
    {
        "label": "HTTP_500_INTERNAL_SERVER_ERROR",
        "kind": 5,
        "importPath": "backend.rest_framework.status",
        "description": "backend.rest_framework.status",
        "peekOfCode": "HTTP_500_INTERNAL_SERVER_ERROR = 500\nHTTP_501_NOT_IMPLEMENTED = 501\nHTTP_502_BAD_GATEWAY = 502\nHTTP_503_SERVICE_UNAVAILABLE = 503\nHTTP_504_GATEWAY_TIMEOUT = 504\nHTTP_505_HTTP_VERSION_NOT_SUPPORTED = 505\nHTTP_506_VARIANT_ALSO_NEGOTIATES = 506\nHTTP_507_INSUFFICIENT_STORAGE = 507\nHTTP_508_LOOP_DETECTED = 508\nHTTP_509_BANDWIDTH_LIMIT_EXCEEDED = 509",
        "detail": "backend.rest_framework.status",
        "documentation": {}
    },
    {
        "label": "HTTP_501_NOT_IMPLEMENTED",
        "kind": 5,
        "importPath": "backend.rest_framework.status",
        "description": "backend.rest_framework.status",
        "peekOfCode": "HTTP_501_NOT_IMPLEMENTED = 501\nHTTP_502_BAD_GATEWAY = 502\nHTTP_503_SERVICE_UNAVAILABLE = 503\nHTTP_504_GATEWAY_TIMEOUT = 504\nHTTP_505_HTTP_VERSION_NOT_SUPPORTED = 505\nHTTP_506_VARIANT_ALSO_NEGOTIATES = 506\nHTTP_507_INSUFFICIENT_STORAGE = 507\nHTTP_508_LOOP_DETECTED = 508\nHTTP_509_BANDWIDTH_LIMIT_EXCEEDED = 509\nHTTP_510_NOT_EXTENDED = 510",
        "detail": "backend.rest_framework.status",
        "documentation": {}
    },
    {
        "label": "HTTP_502_BAD_GATEWAY",
        "kind": 5,
        "importPath": "backend.rest_framework.status",
        "description": "backend.rest_framework.status",
        "peekOfCode": "HTTP_502_BAD_GATEWAY = 502\nHTTP_503_SERVICE_UNAVAILABLE = 503\nHTTP_504_GATEWAY_TIMEOUT = 504\nHTTP_505_HTTP_VERSION_NOT_SUPPORTED = 505\nHTTP_506_VARIANT_ALSO_NEGOTIATES = 506\nHTTP_507_INSUFFICIENT_STORAGE = 507\nHTTP_508_LOOP_DETECTED = 508\nHTTP_509_BANDWIDTH_LIMIT_EXCEEDED = 509\nHTTP_510_NOT_EXTENDED = 510\nHTTP_511_NETWORK_AUTHENTICATION_REQUIRED = 511",
        "detail": "backend.rest_framework.status",
        "documentation": {}
    },
    {
        "label": "HTTP_503_SERVICE_UNAVAILABLE",
        "kind": 5,
        "importPath": "backend.rest_framework.status",
        "description": "backend.rest_framework.status",
        "peekOfCode": "HTTP_503_SERVICE_UNAVAILABLE = 503\nHTTP_504_GATEWAY_TIMEOUT = 504\nHTTP_505_HTTP_VERSION_NOT_SUPPORTED = 505\nHTTP_506_VARIANT_ALSO_NEGOTIATES = 506\nHTTP_507_INSUFFICIENT_STORAGE = 507\nHTTP_508_LOOP_DETECTED = 508\nHTTP_509_BANDWIDTH_LIMIT_EXCEEDED = 509\nHTTP_510_NOT_EXTENDED = 510\nHTTP_511_NETWORK_AUTHENTICATION_REQUIRED = 511",
        "detail": "backend.rest_framework.status",
        "documentation": {}
    },
    {
        "label": "HTTP_504_GATEWAY_TIMEOUT",
        "kind": 5,
        "importPath": "backend.rest_framework.status",
        "description": "backend.rest_framework.status",
        "peekOfCode": "HTTP_504_GATEWAY_TIMEOUT = 504\nHTTP_505_HTTP_VERSION_NOT_SUPPORTED = 505\nHTTP_506_VARIANT_ALSO_NEGOTIATES = 506\nHTTP_507_INSUFFICIENT_STORAGE = 507\nHTTP_508_LOOP_DETECTED = 508\nHTTP_509_BANDWIDTH_LIMIT_EXCEEDED = 509\nHTTP_510_NOT_EXTENDED = 510\nHTTP_511_NETWORK_AUTHENTICATION_REQUIRED = 511",
        "detail": "backend.rest_framework.status",
        "documentation": {}
    },
    {
        "label": "HTTP_505_HTTP_VERSION_NOT_SUPPORTED",
        "kind": 5,
        "importPath": "backend.rest_framework.status",
        "description": "backend.rest_framework.status",
        "peekOfCode": "HTTP_505_HTTP_VERSION_NOT_SUPPORTED = 505\nHTTP_506_VARIANT_ALSO_NEGOTIATES = 506\nHTTP_507_INSUFFICIENT_STORAGE = 507\nHTTP_508_LOOP_DETECTED = 508\nHTTP_509_BANDWIDTH_LIMIT_EXCEEDED = 509\nHTTP_510_NOT_EXTENDED = 510\nHTTP_511_NETWORK_AUTHENTICATION_REQUIRED = 511",
        "detail": "backend.rest_framework.status",
        "documentation": {}
    },
    {
        "label": "HTTP_506_VARIANT_ALSO_NEGOTIATES",
        "kind": 5,
        "importPath": "backend.rest_framework.status",
        "description": "backend.rest_framework.status",
        "peekOfCode": "HTTP_506_VARIANT_ALSO_NEGOTIATES = 506\nHTTP_507_INSUFFICIENT_STORAGE = 507\nHTTP_508_LOOP_DETECTED = 508\nHTTP_509_BANDWIDTH_LIMIT_EXCEEDED = 509\nHTTP_510_NOT_EXTENDED = 510\nHTTP_511_NETWORK_AUTHENTICATION_REQUIRED = 511",
        "detail": "backend.rest_framework.status",
        "documentation": {}
    },
    {
        "label": "HTTP_507_INSUFFICIENT_STORAGE",
        "kind": 5,
        "importPath": "backend.rest_framework.status",
        "description": "backend.rest_framework.status",
        "peekOfCode": "HTTP_507_INSUFFICIENT_STORAGE = 507\nHTTP_508_LOOP_DETECTED = 508\nHTTP_509_BANDWIDTH_LIMIT_EXCEEDED = 509\nHTTP_510_NOT_EXTENDED = 510\nHTTP_511_NETWORK_AUTHENTICATION_REQUIRED = 511",
        "detail": "backend.rest_framework.status",
        "documentation": {}
    },
    {
        "label": "HTTP_508_LOOP_DETECTED",
        "kind": 5,
        "importPath": "backend.rest_framework.status",
        "description": "backend.rest_framework.status",
        "peekOfCode": "HTTP_508_LOOP_DETECTED = 508\nHTTP_509_BANDWIDTH_LIMIT_EXCEEDED = 509\nHTTP_510_NOT_EXTENDED = 510\nHTTP_511_NETWORK_AUTHENTICATION_REQUIRED = 511",
        "detail": "backend.rest_framework.status",
        "documentation": {}
    },
    {
        "label": "HTTP_509_BANDWIDTH_LIMIT_EXCEEDED",
        "kind": 5,
        "importPath": "backend.rest_framework.status",
        "description": "backend.rest_framework.status",
        "peekOfCode": "HTTP_509_BANDWIDTH_LIMIT_EXCEEDED = 509\nHTTP_510_NOT_EXTENDED = 510\nHTTP_511_NETWORK_AUTHENTICATION_REQUIRED = 511",
        "detail": "backend.rest_framework.status",
        "documentation": {}
    },
    {
        "label": "HTTP_510_NOT_EXTENDED",
        "kind": 5,
        "importPath": "backend.rest_framework.status",
        "description": "backend.rest_framework.status",
        "peekOfCode": "HTTP_510_NOT_EXTENDED = 510\nHTTP_511_NETWORK_AUTHENTICATION_REQUIRED = 511",
        "detail": "backend.rest_framework.status",
        "documentation": {}
    },
    {
        "label": "HTTP_511_NETWORK_AUTHENTICATION_REQUIRED",
        "kind": 5,
        "importPath": "backend.rest_framework.status",
        "description": "backend.rest_framework.status",
        "peekOfCode": "HTTP_511_NETWORK_AUTHENTICATION_REQUIRED = 511",
        "detail": "backend.rest_framework.status",
        "documentation": {}
    },
    {
        "label": "APIRequestFactory",
        "kind": 6,
        "importPath": "backend.rest_framework.test",
        "description": "backend.rest_framework.test",
        "peekOfCode": "class APIRequestFactory(DjangoRequestFactory):\n    renderer_classes_list = api_settings.TEST_REQUEST_RENDERER_CLASSES\n    default_format = api_settings.TEST_REQUEST_DEFAULT_FORMAT\n    def __init__(self, enforce_csrf_checks=False, **defaults):\n        self.enforce_csrf_checks = enforce_csrf_checks\n        self.renderer_classes = {}\n        for cls in self.renderer_classes_list:\n            self.renderer_classes[cls.format] = cls\n        super().__init__(**defaults)\n    def _encode_data(self, data, format=None, content_type=None):",
        "detail": "backend.rest_framework.test",
        "documentation": {}
    },
    {
        "label": "ForceAuthClientHandler",
        "kind": 6,
        "importPath": "backend.rest_framework.test",
        "description": "backend.rest_framework.test",
        "peekOfCode": "class ForceAuthClientHandler(ClientHandler):\n    \"\"\"\n    A patched version of ClientHandler that can enforce authentication\n    on the outgoing requests.\n    \"\"\"\n    def __init__(self, *args, **kwargs):\n        self._force_user = None\n        self._force_token = None\n        super().__init__(*args, **kwargs)\n    def get_response(self, request):",
        "detail": "backend.rest_framework.test",
        "documentation": {}
    },
    {
        "label": "APIClient",
        "kind": 6,
        "importPath": "backend.rest_framework.test",
        "description": "backend.rest_framework.test",
        "peekOfCode": "class APIClient(APIRequestFactory, DjangoClient):\n    def __init__(self, enforce_csrf_checks=False, **defaults):\n        super().__init__(**defaults)\n        self.handler = ForceAuthClientHandler(enforce_csrf_checks)\n        self._credentials = {}\n    def credentials(self, **kwargs):\n        \"\"\"\n        Sets headers that will be used on every outgoing request.\n        \"\"\"\n        self._credentials = kwargs",
        "detail": "backend.rest_framework.test",
        "documentation": {}
    },
    {
        "label": "APITransactionTestCase",
        "kind": 6,
        "importPath": "backend.rest_framework.test",
        "description": "backend.rest_framework.test",
        "peekOfCode": "class APITransactionTestCase(testcases.TransactionTestCase):\n    client_class = APIClient\nclass APITestCase(testcases.TestCase):\n    client_class = APIClient\nclass APISimpleTestCase(testcases.SimpleTestCase):\n    client_class = APIClient\nclass APILiveServerTestCase(testcases.LiveServerTestCase):\n    client_class = APIClient\nclass URLPatternsTestCase(testcases.SimpleTestCase):\n    \"\"\"",
        "detail": "backend.rest_framework.test",
        "documentation": {}
    },
    {
        "label": "APITestCase",
        "kind": 6,
        "importPath": "backend.rest_framework.test",
        "description": "backend.rest_framework.test",
        "peekOfCode": "class APITestCase(testcases.TestCase):\n    client_class = APIClient\nclass APISimpleTestCase(testcases.SimpleTestCase):\n    client_class = APIClient\nclass APILiveServerTestCase(testcases.LiveServerTestCase):\n    client_class = APIClient\nclass URLPatternsTestCase(testcases.SimpleTestCase):\n    \"\"\"\n    Isolate URL patterns on a per-TestCase basis. For example,\n    class ATestCase(URLPatternsTestCase):",
        "detail": "backend.rest_framework.test",
        "documentation": {}
    },
    {
        "label": "APISimpleTestCase",
        "kind": 6,
        "importPath": "backend.rest_framework.test",
        "description": "backend.rest_framework.test",
        "peekOfCode": "class APISimpleTestCase(testcases.SimpleTestCase):\n    client_class = APIClient\nclass APILiveServerTestCase(testcases.LiveServerTestCase):\n    client_class = APIClient\nclass URLPatternsTestCase(testcases.SimpleTestCase):\n    \"\"\"\n    Isolate URL patterns on a per-TestCase basis. For example,\n    class ATestCase(URLPatternsTestCase):\n        urlpatterns = [...]\n        def test_something(self):",
        "detail": "backend.rest_framework.test",
        "documentation": {}
    },
    {
        "label": "APILiveServerTestCase",
        "kind": 6,
        "importPath": "backend.rest_framework.test",
        "description": "backend.rest_framework.test",
        "peekOfCode": "class APILiveServerTestCase(testcases.LiveServerTestCase):\n    client_class = APIClient\nclass URLPatternsTestCase(testcases.SimpleTestCase):\n    \"\"\"\n    Isolate URL patterns on a per-TestCase basis. For example,\n    class ATestCase(URLPatternsTestCase):\n        urlpatterns = [...]\n        def test_something(self):\n            ...\n    class AnotherTestCase(URLPatternsTestCase):",
        "detail": "backend.rest_framework.test",
        "documentation": {}
    },
    {
        "label": "URLPatternsTestCase",
        "kind": 6,
        "importPath": "backend.rest_framework.test",
        "description": "backend.rest_framework.test",
        "peekOfCode": "class URLPatternsTestCase(testcases.SimpleTestCase):\n    \"\"\"\n    Isolate URL patterns on a per-TestCase basis. For example,\n    class ATestCase(URLPatternsTestCase):\n        urlpatterns = [...]\n        def test_something(self):\n            ...\n    class AnotherTestCase(URLPatternsTestCase):\n        urlpatterns = [...]\n        def test_something_else(self):",
        "detail": "backend.rest_framework.test",
        "documentation": {}
    },
    {
        "label": "force_authenticate",
        "kind": 2,
        "importPath": "backend.rest_framework.test",
        "description": "backend.rest_framework.test",
        "peekOfCode": "def force_authenticate(request, user=None, token=None):\n    request._force_auth_user = user\n    request._force_auth_token = token\nif requests is not None:\n    class HeaderDict(requests.packages.urllib3._collections.HTTPHeaderDict):\n        def get_all(self, key, default):\n            return self.getheaders(key)\n    class MockOriginalResponse:\n        def __init__(self, headers):\n            self.msg = HeaderDict(headers)",
        "detail": "backend.rest_framework.test",
        "documentation": {}
    },
    {
        "label": "BaseThrottle",
        "kind": 6,
        "importPath": "backend.rest_framework.throttling",
        "description": "backend.rest_framework.throttling",
        "peekOfCode": "class BaseThrottle:\n    \"\"\"\n    Rate throttling of requests.\n    \"\"\"\n    def allow_request(self, request, view):\n        \"\"\"\n        Return `True` if the request should be allowed, `False` otherwise.\n        \"\"\"\n        raise NotImplementedError('.allow_request() must be overridden')\n    def get_ident(self, request):",
        "detail": "backend.rest_framework.throttling",
        "documentation": {}
    },
    {
        "label": "SimpleRateThrottle",
        "kind": 6,
        "importPath": "backend.rest_framework.throttling",
        "description": "backend.rest_framework.throttling",
        "peekOfCode": "class SimpleRateThrottle(BaseThrottle):\n    \"\"\"\n    A simple cache implementation, that only requires `.get_cache_key()`\n    to be overridden.\n    The rate (requests / seconds) is set by a `rate` attribute on the View\n    class.  The attribute is a string of the form 'number_of_requests/period'.\n    Period should be one of: ('s', 'sec', 'm', 'min', 'h', 'hour', 'd', 'day')\n    Previous request information used for throttling is stored in the cache.\n    \"\"\"\n    cache = default_cache",
        "detail": "backend.rest_framework.throttling",
        "documentation": {}
    },
    {
        "label": "AnonRateThrottle",
        "kind": 6,
        "importPath": "backend.rest_framework.throttling",
        "description": "backend.rest_framework.throttling",
        "peekOfCode": "class AnonRateThrottle(SimpleRateThrottle):\n    \"\"\"\n    Limits the rate of API calls that may be made by a anonymous users.\n    The IP address of the request will be used as the unique cache key.\n    \"\"\"\n    scope = 'anon'\n    def get_cache_key(self, request, view):\n        if request.user.is_authenticated:\n            return None  # Only throttle unauthenticated requests.\n        return self.cache_format % {",
        "detail": "backend.rest_framework.throttling",
        "documentation": {}
    },
    {
        "label": "UserRateThrottle",
        "kind": 6,
        "importPath": "backend.rest_framework.throttling",
        "description": "backend.rest_framework.throttling",
        "peekOfCode": "class UserRateThrottle(SimpleRateThrottle):\n    \"\"\"\n    Limits the rate of API calls that may be made by a given user.\n    The user id will be used as a unique cache key if the user is\n    authenticated.  For anonymous requests, the IP address of the request will\n    be used.\n    \"\"\"\n    scope = 'user'\n    def get_cache_key(self, request, view):\n        if request.user.is_authenticated:",
        "detail": "backend.rest_framework.throttling",
        "documentation": {}
    },
    {
        "label": "ScopedRateThrottle",
        "kind": 6,
        "importPath": "backend.rest_framework.throttling",
        "description": "backend.rest_framework.throttling",
        "peekOfCode": "class ScopedRateThrottle(SimpleRateThrottle):\n    \"\"\"\n    Limits the rate of API calls by different amounts for various parts of\n    the API.  Any view that has the `throttle_scope` property set will be\n    throttled.  The unique cache key will be generated by concatenating the\n    user id of the request, and the scope of the view being accessed.\n    \"\"\"\n    scope_attr = 'throttle_scope'\n    def __init__(self):\n        # Override the usual SimpleRateThrottle, because we can't determine",
        "detail": "backend.rest_framework.throttling",
        "documentation": {}
    },
    {
        "label": "apply_suffix_patterns",
        "kind": 2,
        "importPath": "backend.rest_framework.urlpatterns",
        "description": "backend.rest_framework.urlpatterns",
        "peekOfCode": "def apply_suffix_patterns(urlpatterns, suffix_pattern, suffix_required, suffix_route=None):\n    ret = []\n    for urlpattern in urlpatterns:\n        if isinstance(urlpattern, URLResolver):\n            # Set of included URL patterns\n            regex = urlpattern.pattern.regex.pattern\n            namespace = urlpattern.namespace\n            app_name = urlpattern.app_name\n            kwargs = urlpattern.default_kwargs\n            # Add in the included patterns, after applying the suffixes",
        "detail": "backend.rest_framework.urlpatterns",
        "documentation": {}
    },
    {
        "label": "format_suffix_patterns",
        "kind": 2,
        "importPath": "backend.rest_framework.urlpatterns",
        "description": "backend.rest_framework.urlpatterns",
        "peekOfCode": "def format_suffix_patterns(urlpatterns, suffix_required=False, allowed=None):\n    \"\"\"\n    Supplement existing urlpatterns with corresponding patterns that also\n    include a '.format' suffix.  Retains urlpattern ordering.\n    urlpatterns:\n        A list of URL patterns.\n    suffix_required:\n        If `True`, only suffixed URLs will be generated, and non-suffixed\n        URLs will not be used.  Defaults to `False`.\n    allowed:",
        "detail": "backend.rest_framework.urlpatterns",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "backend.rest_framework.urls",
        "description": "backend.rest_framework.urls",
        "peekOfCode": "app_name = 'rest_framework'\nurlpatterns = [\n    path('login/', views.LoginView.as_view(template_name='rest_framework/login.html'), name='login'),\n    path('logout/', views.LogoutView.as_view(), name='logout'),\n]",
        "detail": "backend.rest_framework.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "backend.rest_framework.urls",
        "description": "backend.rest_framework.urls",
        "peekOfCode": "urlpatterns = [\n    path('login/', views.LoginView.as_view(template_name='rest_framework/login.html'), name='login'),\n    path('logout/', views.LogoutView.as_view(), name='logout'),\n]",
        "detail": "backend.rest_framework.urls",
        "documentation": {}
    },
    {
        "label": "UniqueValidator",
        "kind": 6,
        "importPath": "backend.rest_framework.validators",
        "description": "backend.rest_framework.validators",
        "peekOfCode": "class UniqueValidator:\n    \"\"\"\n    Validator that corresponds to `unique=True` on a model field.\n    Should be applied to an individual field on the serializer.\n    \"\"\"\n    message = _('This field must be unique.')\n    requires_context = True\n    def __init__(self, queryset, message=None, lookup='exact'):\n        self.queryset = queryset\n        self.message = message or self.message",
        "detail": "backend.rest_framework.validators",
        "documentation": {}
    },
    {
        "label": "UniqueTogetherValidator",
        "kind": 6,
        "importPath": "backend.rest_framework.validators",
        "description": "backend.rest_framework.validators",
        "peekOfCode": "class UniqueTogetherValidator:\n    \"\"\"\n    Validator that corresponds to `unique_together = (...)` on a model class.\n    Should be applied to the serializer class, not to an individual field.\n    \"\"\"\n    message = _('The fields {field_names} must make a unique set.')\n    missing_message = _('This field is required.')\n    requires_context = True\n    def __init__(self, queryset, fields, message=None):\n        self.queryset = queryset",
        "detail": "backend.rest_framework.validators",
        "documentation": {}
    },
    {
        "label": "ProhibitSurrogateCharactersValidator",
        "kind": 6,
        "importPath": "backend.rest_framework.validators",
        "description": "backend.rest_framework.validators",
        "peekOfCode": "class ProhibitSurrogateCharactersValidator:\n    message = _('Surrogate characters are not allowed: U+{code_point:X}.')\n    code = 'surrogate_characters_not_allowed'\n    def __call__(self, value):\n        for surrogate_character in (ch for ch in str(value)\n                                    if 0xD800 <= ord(ch) <= 0xDFFF):\n            message = self.message.format(code_point=ord(surrogate_character))\n            raise ValidationError(message, code=self.code)\nclass BaseUniqueForValidator:\n    message = None",
        "detail": "backend.rest_framework.validators",
        "documentation": {}
    },
    {
        "label": "BaseUniqueForValidator",
        "kind": 6,
        "importPath": "backend.rest_framework.validators",
        "description": "backend.rest_framework.validators",
        "peekOfCode": "class BaseUniqueForValidator:\n    message = None\n    missing_message = _('This field is required.')\n    requires_context = True\n    def __init__(self, queryset, field, date_field, message=None):\n        self.queryset = queryset\n        self.field = field\n        self.date_field = date_field\n        self.message = message or self.message\n    def enforce_required_fields(self, attrs):",
        "detail": "backend.rest_framework.validators",
        "documentation": {}
    },
    {
        "label": "UniqueForDateValidator",
        "kind": 6,
        "importPath": "backend.rest_framework.validators",
        "description": "backend.rest_framework.validators",
        "peekOfCode": "class UniqueForDateValidator(BaseUniqueForValidator):\n    message = _('This field must be unique for the \"{date_field}\" date.')\n    def filter_queryset(self, attrs, queryset, field_name, date_field_name):\n        value = attrs[self.field]\n        date = attrs[self.date_field]\n        filter_kwargs = {}\n        filter_kwargs[field_name] = value\n        filter_kwargs['%s__day' % date_field_name] = date.day\n        filter_kwargs['%s__month' % date_field_name] = date.month\n        filter_kwargs['%s__year' % date_field_name] = date.year",
        "detail": "backend.rest_framework.validators",
        "documentation": {}
    },
    {
        "label": "UniqueForMonthValidator",
        "kind": 6,
        "importPath": "backend.rest_framework.validators",
        "description": "backend.rest_framework.validators",
        "peekOfCode": "class UniqueForMonthValidator(BaseUniqueForValidator):\n    message = _('This field must be unique for the \"{date_field}\" month.')\n    def filter_queryset(self, attrs, queryset, field_name, date_field_name):\n        value = attrs[self.field]\n        date = attrs[self.date_field]\n        filter_kwargs = {}\n        filter_kwargs[field_name] = value\n        filter_kwargs['%s__month' % date_field_name] = date.month\n        return qs_filter(queryset, **filter_kwargs)\nclass UniqueForYearValidator(BaseUniqueForValidator):",
        "detail": "backend.rest_framework.validators",
        "documentation": {}
    },
    {
        "label": "UniqueForYearValidator",
        "kind": 6,
        "importPath": "backend.rest_framework.validators",
        "description": "backend.rest_framework.validators",
        "peekOfCode": "class UniqueForYearValidator(BaseUniqueForValidator):\n    message = _('This field must be unique for the \"{date_field}\" year.')\n    def filter_queryset(self, attrs, queryset, field_name, date_field_name):\n        value = attrs[self.field]\n        date = attrs[self.date_field]\n        filter_kwargs = {}\n        filter_kwargs[field_name] = value\n        filter_kwargs['%s__year' % date_field_name] = date.year\n        return qs_filter(queryset, **filter_kwargs)",
        "detail": "backend.rest_framework.validators",
        "documentation": {}
    },
    {
        "label": "qs_exists",
        "kind": 2,
        "importPath": "backend.rest_framework.validators",
        "description": "backend.rest_framework.validators",
        "peekOfCode": "def qs_exists(queryset):\n    try:\n        return queryset.exists()\n    except (TypeError, ValueError, DataError):\n        return False\ndef qs_filter(queryset, **kwargs):\n    try:\n        return queryset.filter(**kwargs)\n    except (TypeError, ValueError, DataError):\n        return queryset.none()",
        "detail": "backend.rest_framework.validators",
        "documentation": {}
    },
    {
        "label": "qs_filter",
        "kind": 2,
        "importPath": "backend.rest_framework.validators",
        "description": "backend.rest_framework.validators",
        "peekOfCode": "def qs_filter(queryset, **kwargs):\n    try:\n        return queryset.filter(**kwargs)\n    except (TypeError, ValueError, DataError):\n        return queryset.none()\nclass UniqueValidator:\n    \"\"\"\n    Validator that corresponds to `unique=True` on a model field.\n    Should be applied to an individual field on the serializer.\n    \"\"\"",
        "detail": "backend.rest_framework.validators",
        "documentation": {}
    },
    {
        "label": "BaseVersioning",
        "kind": 6,
        "importPath": "backend.rest_framework.versioning",
        "description": "backend.rest_framework.versioning",
        "peekOfCode": "class BaseVersioning:\n    default_version = api_settings.DEFAULT_VERSION\n    allowed_versions = api_settings.ALLOWED_VERSIONS\n    version_param = api_settings.VERSION_PARAM\n    def determine_version(self, request, *args, **kwargs):\n        msg = '{cls}.determine_version() must be implemented.'\n        raise NotImplementedError(msg.format(\n            cls=self.__class__.__name__\n        ))\n    def reverse(self, viewname, args=None, kwargs=None, request=None, format=None, **extra):",
        "detail": "backend.rest_framework.versioning",
        "documentation": {}
    },
    {
        "label": "AcceptHeaderVersioning",
        "kind": 6,
        "importPath": "backend.rest_framework.versioning",
        "description": "backend.rest_framework.versioning",
        "peekOfCode": "class AcceptHeaderVersioning(BaseVersioning):\n    \"\"\"\n    GET /something/ HTTP/1.1\n    Host: example.com\n    Accept: application/json; version=1.0\n    \"\"\"\n    invalid_version_message = _('Invalid version in \"Accept\" header.')\n    def determine_version(self, request, *args, **kwargs):\n        media_type = _MediaType(request.accepted_media_type)\n        version = media_type.params.get(self.version_param, self.default_version)",
        "detail": "backend.rest_framework.versioning",
        "documentation": {}
    },
    {
        "label": "URLPathVersioning",
        "kind": 6,
        "importPath": "backend.rest_framework.versioning",
        "description": "backend.rest_framework.versioning",
        "peekOfCode": "class URLPathVersioning(BaseVersioning):\n    \"\"\"\n    To the client this is the same style as `NamespaceVersioning`.\n    The difference is in the backend - this implementation uses\n    Django's URL keyword arguments to determine the version.\n    An example URL conf for two views that accept two different versions.\n    urlpatterns = [\n        re_path(r'^(?P<version>[v1|v2]+)/users/$', users_list, name='users-list'),\n        re_path(r'^(?P<version>[v1|v2]+)/users/(?P<pk>[0-9]+)/$', users_detail, name='users-detail')\n    ]",
        "detail": "backend.rest_framework.versioning",
        "documentation": {}
    },
    {
        "label": "NamespaceVersioning",
        "kind": 6,
        "importPath": "backend.rest_framework.versioning",
        "description": "backend.rest_framework.versioning",
        "peekOfCode": "class NamespaceVersioning(BaseVersioning):\n    \"\"\"\n    To the client this is the same style as `URLPathVersioning`.\n    The difference is in the backend - this implementation uses\n    Django's URL namespaces to determine the version.\n    An example URL conf that is namespaced into two separate versions\n    # users/urls.py\n    urlpatterns = [\n        path('/users/', users_list, name='users-list'),\n        path('/users/<int:pk>/', users_detail, name='users-detail')",
        "detail": "backend.rest_framework.versioning",
        "documentation": {}
    },
    {
        "label": "HostNameVersioning",
        "kind": 6,
        "importPath": "backend.rest_framework.versioning",
        "description": "backend.rest_framework.versioning",
        "peekOfCode": "class HostNameVersioning(BaseVersioning):\n    \"\"\"\n    GET /something/ HTTP/1.1\n    Host: v1.example.com\n    Accept: application/json\n    \"\"\"\n    hostname_regex = re.compile(r'^([a-zA-Z0-9]+)\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$')\n    invalid_version_message = _('Invalid version in hostname.')\n    def determine_version(self, request, *args, **kwargs):\n        hostname, separator, port = request.get_host().partition(':')",
        "detail": "backend.rest_framework.versioning",
        "documentation": {}
    },
    {
        "label": "QueryParameterVersioning",
        "kind": 6,
        "importPath": "backend.rest_framework.versioning",
        "description": "backend.rest_framework.versioning",
        "peekOfCode": "class QueryParameterVersioning(BaseVersioning):\n    \"\"\"\n    GET /something/?version=0.1 HTTP/1.1\n    Host: example.com\n    Accept: application/json\n    \"\"\"\n    invalid_version_message = _('Invalid version in query parameter.')\n    def determine_version(self, request, *args, **kwargs):\n        version = request.query_params.get(self.version_param, self.default_version)\n        if not self.is_allowed_version(version):",
        "detail": "backend.rest_framework.versioning",
        "documentation": {}
    },
    {
        "label": "APIView",
        "kind": 6,
        "importPath": "backend.rest_framework.views",
        "description": "backend.rest_framework.views",
        "peekOfCode": "class APIView(View):\n    # The following policies may be set at either globally, or per-view.\n    renderer_classes = api_settings.DEFAULT_RENDERER_CLASSES\n    parser_classes = api_settings.DEFAULT_PARSER_CLASSES\n    authentication_classes = api_settings.DEFAULT_AUTHENTICATION_CLASSES\n    throttle_classes = api_settings.DEFAULT_THROTTLE_CLASSES\n    permission_classes = api_settings.DEFAULT_PERMISSION_CLASSES\n    content_negotiation_class = api_settings.DEFAULT_CONTENT_NEGOTIATION_CLASS\n    metadata_class = api_settings.DEFAULT_METADATA_CLASS\n    versioning_class = api_settings.DEFAULT_VERSIONING_CLASS",
        "detail": "backend.rest_framework.views",
        "documentation": {}
    },
    {
        "label": "get_view_name",
        "kind": 2,
        "importPath": "backend.rest_framework.views",
        "description": "backend.rest_framework.views",
        "peekOfCode": "def get_view_name(view):\n    \"\"\"\n    Given a view instance, return a textual name to represent the view.\n    This name is used in the browsable API, and in OPTIONS responses.\n    This function is the default for the `VIEW_NAME_FUNCTION` setting.\n    \"\"\"\n    # Name may be set by some Views, such as a ViewSet.\n    name = getattr(view, 'name', None)\n    if name is not None:\n        return name",
        "detail": "backend.rest_framework.views",
        "documentation": {}
    },
    {
        "label": "get_view_description",
        "kind": 2,
        "importPath": "backend.rest_framework.views",
        "description": "backend.rest_framework.views",
        "peekOfCode": "def get_view_description(view, html=False):\n    \"\"\"\n    Given a view instance, return a textual description to represent the view.\n    This name is used in the browsable API, and in OPTIONS responses.\n    This function is the default for the `VIEW_DESCRIPTION_FUNCTION` setting.\n    \"\"\"\n    # Description may be set by some Views, such as a ViewSet.\n    description = getattr(view, 'description', None)\n    if description is None:\n        description = view.__class__.__doc__ or ''",
        "detail": "backend.rest_framework.views",
        "documentation": {}
    },
    {
        "label": "set_rollback",
        "kind": 2,
        "importPath": "backend.rest_framework.views",
        "description": "backend.rest_framework.views",
        "peekOfCode": "def set_rollback():\n    for db in connections.all():\n        if db.settings_dict['ATOMIC_REQUESTS'] and db.in_atomic_block:\n            db.set_rollback(True)\ndef exception_handler(exc, context):\n    \"\"\"\n    Returns the response that should be used for any given exception.\n    By default we handle the REST framework `APIException`, and also\n    Django's built-in `Http404` and `PermissionDenied` exceptions.\n    Any unhandled exceptions may return `None`, which will cause a 500 error",
        "detail": "backend.rest_framework.views",
        "documentation": {}
    },
    {
        "label": "exception_handler",
        "kind": 2,
        "importPath": "backend.rest_framework.views",
        "description": "backend.rest_framework.views",
        "peekOfCode": "def exception_handler(exc, context):\n    \"\"\"\n    Returns the response that should be used for any given exception.\n    By default we handle the REST framework `APIException`, and also\n    Django's built-in `Http404` and `PermissionDenied` exceptions.\n    Any unhandled exceptions may return `None`, which will cause a 500 error\n    to be raised.\n    \"\"\"\n    if isinstance(exc, Http404):\n        exc = exceptions.NotFound()",
        "detail": "backend.rest_framework.views",
        "documentation": {}
    },
    {
        "label": "ViewSetMixin",
        "kind": 6,
        "importPath": "backend.rest_framework.viewsets",
        "description": "backend.rest_framework.viewsets",
        "peekOfCode": "class ViewSetMixin:\n    \"\"\"\n    This is the magic.\n    Overrides `.as_view()` so that it takes an `actions` keyword that performs\n    the binding of HTTP methods to actions on the Resource.\n    For example, to create a concrete view binding the 'GET' and 'POST' methods\n    to the 'list' and 'create' actions...\n    view = MyViewSet.as_view({'get': 'list', 'post': 'create'})\n    \"\"\"\n    @classonlymethod",
        "detail": "backend.rest_framework.viewsets",
        "documentation": {}
    },
    {
        "label": "ViewSet",
        "kind": 6,
        "importPath": "backend.rest_framework.viewsets",
        "description": "backend.rest_framework.viewsets",
        "peekOfCode": "class ViewSet(ViewSetMixin, views.APIView):\n    \"\"\"\n    The base ViewSet class does not provide any actions by default.\n    \"\"\"\n    pass\nclass GenericViewSet(ViewSetMixin, generics.GenericAPIView):\n    \"\"\"\n    The GenericViewSet class does not provide any actions by default,\n    but does include the base set of generic view behavior, such as\n    the `get_object` and `get_queryset` methods.",
        "detail": "backend.rest_framework.viewsets",
        "documentation": {}
    },
    {
        "label": "GenericViewSet",
        "kind": 6,
        "importPath": "backend.rest_framework.viewsets",
        "description": "backend.rest_framework.viewsets",
        "peekOfCode": "class GenericViewSet(ViewSetMixin, generics.GenericAPIView):\n    \"\"\"\n    The GenericViewSet class does not provide any actions by default,\n    but does include the base set of generic view behavior, such as\n    the `get_object` and `get_queryset` methods.\n    \"\"\"\n    pass\nclass ReadOnlyModelViewSet(mixins.RetrieveModelMixin,\n                           mixins.ListModelMixin,\n                           GenericViewSet):",
        "detail": "backend.rest_framework.viewsets",
        "documentation": {}
    },
    {
        "label": "ReadOnlyModelViewSet",
        "kind": 6,
        "importPath": "backend.rest_framework.viewsets",
        "description": "backend.rest_framework.viewsets",
        "peekOfCode": "class ReadOnlyModelViewSet(mixins.RetrieveModelMixin,\n                           mixins.ListModelMixin,\n                           GenericViewSet):\n    \"\"\"\n    A viewset that provides default `list()` and `retrieve()` actions.\n    \"\"\"\n    pass\nclass ModelViewSet(mixins.CreateModelMixin,\n                   mixins.RetrieveModelMixin,\n                   mixins.UpdateModelMixin,",
        "detail": "backend.rest_framework.viewsets",
        "documentation": {}
    },
    {
        "label": "ModelViewSet",
        "kind": 6,
        "importPath": "backend.rest_framework.viewsets",
        "description": "backend.rest_framework.viewsets",
        "peekOfCode": "class ModelViewSet(mixins.CreateModelMixin,\n                   mixins.RetrieveModelMixin,\n                   mixins.UpdateModelMixin,\n                   mixins.DestroyModelMixin,\n                   mixins.ListModelMixin,\n                   GenericViewSet):\n    \"\"\"\n    A viewset that provides default `create()`, `retrieve()`, `update()`,\n    `partial_update()`, `destroy()` and `list()` actions.\n    \"\"\"",
        "detail": "backend.rest_framework.viewsets",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "backend.manage",
        "description": "backend.manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'backend.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "backend.manage",
        "documentation": {}
    },
    {
        "label": "_Known",
        "kind": 6,
        "importPath": "frontend.node_modules.flatted.python.flatted",
        "description": "frontend.node_modules.flatted.python.flatted",
        "peekOfCode": "class _Known:\n    def __init__(self):\n        self.key = []\n        self.value = []\nclass _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0",
        "detail": "frontend.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "_String",
        "kind": 6,
        "importPath": "frontend.node_modules.flatted.python.flatted",
        "description": "frontend.node_modules.flatted.python.flatted",
        "peekOfCode": "class _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0\n    for _ in value:\n        keys.append(i)\n        i += 1\n    return keys",
        "detail": "frontend.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "parse",
        "kind": 2,
        "importPath": "frontend.node_modules.flatted.python.flatted",
        "description": "frontend.node_modules.flatted.python.flatted",
        "peekOfCode": "def parse(value, *args, **kwargs):\n    json = _json.loads(value, *args, **kwargs)\n    wrapped = []\n    for value in json:\n        wrapped.append(_wrap(value))\n    input = []\n    for value in wrapped:\n        if isinstance(value, _String):\n            input.append(value.value)\n        else:",
        "detail": "frontend.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "stringify",
        "kind": 2,
        "importPath": "frontend.node_modules.flatted.python.flatted",
        "description": "frontend.node_modules.flatted.python.flatted",
        "peekOfCode": "def stringify(value, *args, **kwargs):\n    known = _Known()\n    input = []\n    output = []\n    i = int(_index(known, input, value))\n    while i < len(input):\n        output.append(_transform(known, input, input[i]))\n        i += 1\n    return _json.dumps(output, *args, **kwargs)",
        "detail": "frontend.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "stringify",
        "kind": 2,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "def stringify(value):\n    return _stringify(value, separators=(',', ':'))\nassert stringify([None, None]) == '[[null,null]]'\na = []\no = {}\nassert stringify(a) == '[[]]'\nassert stringify(o) == '[{}]'\na.append(a)\no['o'] = o\nassert stringify(a) == '[[\"0\"]]'",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "a = []\no = {}\nassert stringify(a) == '[[]]'\nassert stringify(o) == '[{}]'\na.append(a)\no['o'] = o\nassert stringify(a) == '[[\"0\"]]'\nassert stringify(o) == '[{\"o\":\"0\"}]'\nb = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "o = {}\nassert stringify(a) == '[[]]'\nassert stringify(o) == '[{}]'\na.append(a)\no['o'] = o\nassert stringify(a) == '[[\"0\"]]'\nassert stringify(o) == '[{\"o\":\"0\"}]'\nb = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b\na.append(1)",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['o']",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "o['o'] = o\nassert stringify(a) == '[[\"0\"]]'\nassert stringify(o) == '[{\"o\":\"0\"}]'\nb = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b\na.append(1)\na.append('two')\na.append(True)\no['one'] = 1\no['two'] = 'two'",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "b = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b\na.append(1)\na.append('two')\na.append(True)\no['one'] = 1\no['two'] = 'two'\no['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['one']",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "o['one'] = 1\no['two'] = 'two'\no['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'\na.append(o)\no['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['two']",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "o['two'] = 'two'\no['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'\na.append(o)\no['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})\na.append([1, 2, 3])",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['three']",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "o['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'\na.append(o)\no['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})\na.append([1, 2, 3])\no['test'] = {'test': 'OK'}",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['a']",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "o['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})\na.append([1, 2, 3])\no['test'] = {'test': 'OK'}\no['array'] = [1, 2, 3]\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\",\"3\",\"4\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\",\"test\":\"3\",\"array\":\"4\"},{\"test\":\"5\"},[1,2,3],\"OK\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\",\"test\":\"3\",\"array\":\"4\"},\"two\",[\"2\",1,\"1\",true,\"0\",\"3\",\"4\"],{\"test\":\"5\"},[1,2,3],\"OK\"]'\na2 = parse(stringify(a));",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['test']",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "o['test'] = {'test': 'OK'}\no['array'] = [1, 2, 3]\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\",\"3\",\"4\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\",\"test\":\"3\",\"array\":\"4\"},{\"test\":\"5\"},[1,2,3],\"OK\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\",\"test\":\"3\",\"array\":\"4\"},\"two\",[\"2\",1,\"1\",true,\"0\",\"3\",\"4\"],{\"test\":\"5\"},[1,2,3],\"OK\"]'\na2 = parse(stringify(a));\no2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['array']",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "o['array'] = [1, 2, 3]\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\",\"3\",\"4\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\",\"test\":\"3\",\"array\":\"4\"},{\"test\":\"5\"},[1,2,3],\"OK\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\",\"test\":\"3\",\"array\":\"4\"},\"two\",[\"2\",1,\"1\",true,\"0\",\"3\",\"4\"],{\"test\":\"5\"},[1,2,3],\"OK\"]'\na2 = parse(stringify(a));\no2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']\nstr = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "a2",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "a2 = parse(stringify(a));\no2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']\nstr = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')\nassert str['b']['t']['a'] == 'sup' and str['a'][1]['b'][0]['c'] == str['b']['t']\noo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o2",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "o2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']\nstr = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')\nassert str['b']['t']['a'] == 'sup' and str['a'][1]['b'][0]['c'] == str['b']['t']\noo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']\nprint('OK')",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "str",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "str = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')\nassert str['b']['t']['a'] == 'sup' and str['a'][1]['b'][0]['c'] == str['b']['t']\noo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']\nprint('OK')",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "oo",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "oo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']\nprint('OK')",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    }
]